
RM_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  0800eee0  0800eee0  0001eee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7b4  0800f7b4  00020374  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7b4  0800f7b4  0001f7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7bc  0800f7bc  00020374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7bc  0800f7bc  0001f7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7c0  0800f7c0  0001f7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000374  20000000  0800f7c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020374  2**0
                  CONTENTS
 10 .bss          0000073c  20000374  20000374  00020374  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ab0  20000ab0  00020374  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001763d  00000000  00000000  000203a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003711  00000000  00000000  000379e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  0003b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010c0  00000000  00000000  0003c370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251f3  00000000  00000000  0003d430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc06  00000000  00000000  00062623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2c9b  00000000  00000000  0007e229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150ec4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006324  00000000  00000000  00150f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000003c  00000000  00000000  00157238  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000076  00000000  00000000  00157274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000374 	.word	0x20000374
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eec8 	.word	0x0800eec8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000378 	.word	0x20000378
 80001cc:	0800eec8 	.word	0x0800eec8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_CAN1_Init+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <MX_CAN1_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_CAN1_Init+0x64>)
 8001004:	2203      	movs	r2, #3
 8001006:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_CAN1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_CAN1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_CAN1_Init+0x64>)
 8001016:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800101a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_CAN1_Init+0x64>)
 800101e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001022:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_CAN1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_CAN1_Init+0x64>)
 800102c:	2201      	movs	r2, #1
 800102e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_CAN1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_CAN1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_CAN1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_CAN1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_CAN1_Init+0x64>)
 800104a:	f001 f9a7 	bl	800239c <HAL_CAN_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001054:	f000 fa92 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000390 	.word	0x20000390
 8001060:	40006400 	.word	0x40006400

08001064 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_CAN2_Init+0x64>)
 800106a:	4a18      	ldr	r2, [pc, #96]	; (80010cc <MX_CAN2_Init+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_CAN2_Init+0x64>)
 8001070:	2203      	movs	r2, #3
 8001072:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_CAN2_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_CAN2_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_CAN2_Init+0x64>)
 8001082:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001086:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_CAN2_Init+0x64>)
 800108a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800108e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <MX_CAN2_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_CAN2_Init+0x64>)
 8001098:	2201      	movs	r2, #1
 800109a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_CAN2_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_CAN2_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_CAN2_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_CAN2_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_CAN2_Init+0x64>)
 80010b6:	f001 f971 	bl	800239c <HAL_CAN_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80010c0:	f000 fa5c 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200003b8 	.word	0x200003b8
 80010cc:	40006800 	.word	0x40006800

080010d0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a52      	ldr	r2, [pc, #328]	; (8001238 <HAL_CAN_MspInit+0x168>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d145      	bne.n	800117e <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010f2:	4b52      	ldr	r3, [pc, #328]	; (800123c <HAL_CAN_MspInit+0x16c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a50      	ldr	r2, [pc, #320]	; (800123c <HAL_CAN_MspInit+0x16c>)
 80010fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010fc:	4b4f      	ldr	r3, [pc, #316]	; (800123c <HAL_CAN_MspInit+0x16c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d10d      	bne.n	8001120 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <HAL_CAN_MspInit+0x170>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a4c      	ldr	r2, [pc, #304]	; (8001240 <HAL_CAN_MspInit+0x170>)
 800110e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001112:	6413      	str	r3, [r2, #64]	; 0x40
 8001114:	4b4a      	ldr	r3, [pc, #296]	; (8001240 <HAL_CAN_MspInit+0x170>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	4b46      	ldr	r3, [pc, #280]	; (8001240 <HAL_CAN_MspInit+0x170>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	4a45      	ldr	r2, [pc, #276]	; (8001240 <HAL_CAN_MspInit+0x170>)
 800112a:	f043 0308 	orr.w	r3, r3, #8
 800112e:	6313      	str	r3, [r2, #48]	; 0x30
 8001130:	4b43      	ldr	r3, [pc, #268]	; (8001240 <HAL_CAN_MspInit+0x170>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800113c:	2303      	movs	r3, #3
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800114c:	2309      	movs	r3, #9
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	483b      	ldr	r0, [pc, #236]	; (8001244 <HAL_CAN_MspInit+0x174>)
 8001158:	f002 fc96 	bl	8003a88 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2013      	movs	r0, #19
 8001162:	f002 f858 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001166:	2013      	movs	r0, #19
 8001168:	f002 f871 	bl	800324e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2105      	movs	r1, #5
 8001170:	2014      	movs	r0, #20
 8001172:	f002 f850 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001176:	2014      	movs	r0, #20
 8001178:	f002 f869 	bl	800324e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800117c:	e057      	b.n	800122e <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a31      	ldr	r2, [pc, #196]	; (8001248 <HAL_CAN_MspInit+0x178>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d152      	bne.n	800122e <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <HAL_CAN_MspInit+0x170>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a2b      	ldr	r2, [pc, #172]	; (8001240 <HAL_CAN_MspInit+0x170>)
 8001192:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <HAL_CAN_MspInit+0x170>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <HAL_CAN_MspInit+0x16c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	4a24      	ldr	r2, [pc, #144]	; (800123c <HAL_CAN_MspInit+0x16c>)
 80011ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_CAN_MspInit+0x16c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d10d      	bne.n	80011d2 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <HAL_CAN_MspInit+0x170>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a20      	ldr	r2, [pc, #128]	; (8001240 <HAL_CAN_MspInit+0x170>)
 80011c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <HAL_CAN_MspInit+0x170>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_CAN_MspInit+0x170>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a19      	ldr	r2, [pc, #100]	; (8001240 <HAL_CAN_MspInit+0x170>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_CAN_MspInit+0x170>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011ee:	2360      	movs	r3, #96	; 0x60
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80011fe:	2309      	movs	r3, #9
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4810      	ldr	r0, [pc, #64]	; (800124c <HAL_CAN_MspInit+0x17c>)
 800120a:	f002 fc3d 	bl	8003a88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	203f      	movs	r0, #63	; 0x3f
 8001214:	f001 ffff 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001218:	203f      	movs	r0, #63	; 0x3f
 800121a:	f002 f818 	bl	800324e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2040      	movs	r0, #64	; 0x40
 8001224:	f001 fff7 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001228:	2040      	movs	r0, #64	; 0x40
 800122a:	f002 f810 	bl	800324e <HAL_NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3730      	adds	r7, #48	; 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40006400 	.word	0x40006400
 800123c:	200003e0 	.word	0x200003e0
 8001240:	40023800 	.word	0x40023800
 8001244:	40020c00 	.word	0x40020c00
 8001248:	40006800 	.word	0x40006800
 800124c:	40020400 	.word	0x40020400

08001250 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_DMA_Init+0x78>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <MX_DMA_Init+0x78>)
 8001260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_DMA_Init+0x78>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_DMA_Init+0x78>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <MX_DMA_Init+0x78>)
 800127c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_DMA_Init+0x78>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	200c      	movs	r0, #12
 8001294:	f001 ffbf 	bl	8003216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001298:	200c      	movs	r0, #12
 800129a:	f001 ffd8 	bl	800324e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	203a      	movs	r0, #58	; 0x3a
 80012a4:	f001 ffb7 	bl	8003216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012a8:	203a      	movs	r0, #58	; 0x3a
 80012aa:	f001 ffd0 	bl	800324e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2046      	movs	r0, #70	; 0x46
 80012b4:	f001 ffaf 	bl	8003216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012b8:	2046      	movs	r0, #70	; 0x46
 80012ba:	f001 ffc8 	bl	800324e <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b44      	ldr	r3, [pc, #272]	; (80013f8 <MX_GPIO_Init+0x12c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a43      	ldr	r2, [pc, #268]	; (80013f8 <MX_GPIO_Init+0x12c>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <MX_GPIO_Init+0x12c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <MX_GPIO_Init+0x12c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a3c      	ldr	r2, [pc, #240]	; (80013f8 <MX_GPIO_Init+0x12c>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b3a      	ldr	r3, [pc, #232]	; (80013f8 <MX_GPIO_Init+0x12c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <MX_GPIO_Init+0x12c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a35      	ldr	r2, [pc, #212]	; (80013f8 <MX_GPIO_Init+0x12c>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <MX_GPIO_Init+0x12c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <MX_GPIO_Init+0x12c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a2e      	ldr	r2, [pc, #184]	; (80013f8 <MX_GPIO_Init+0x12c>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <MX_GPIO_Init+0x12c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <MX_GPIO_Init+0x12c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <MX_GPIO_Init+0x12c>)
 800135c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <MX_GPIO_Init+0x12c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001374:	4821      	ldr	r0, [pc, #132]	; (80013fc <MX_GPIO_Init+0x130>)
 8001376:	f002 fd23 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001380:	481e      	ldr	r0, [pc, #120]	; (80013fc <MX_GPIO_Init+0x130>)
 8001382:	f002 fd1d 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_Accel_GPIO_Port, CS1_Accel_Pin, GPIO_PIN_SET);
 8001386:	2201      	movs	r2, #1
 8001388:	2110      	movs	r1, #16
 800138a:	481d      	ldr	r0, [pc, #116]	; (8001400 <MX_GPIO_Init+0x134>)
 800138c:	f002 fd18 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_Gyro_GPIO_Port, CS1_Gyro_Pin, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2101      	movs	r1, #1
 8001394:	481b      	ldr	r0, [pc, #108]	; (8001404 <MX_GPIO_Init+0x138>)
 8001396:	f002 fd13 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 800139a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4812      	ldr	r0, [pc, #72]	; (80013fc <MX_GPIO_Init+0x130>)
 80013b4:	f002 fb68 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_Accel_Pin;
 80013b8:	2310      	movs	r3, #16
 80013ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS1_Accel_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_GPIO_Init+0x134>)
 80013d0:	f002 fb5a 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_Gyro_Pin;
 80013d4:	2301      	movs	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013dc:	2301      	movs	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS1_Gyro_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <MX_GPIO_Init+0x138>)
 80013ec:	f002 fb4c 	bl	8003a88 <HAL_GPIO_Init>

}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40021c00 	.word	0x40021c00
 8001400:	40020000 	.word	0x40020000
 8001404:	40020400 	.word	0x40020400

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140c:	f000 ff30 	bl	8002270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 f84a 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001414:	f7ff ff5a 	bl	80012cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001418:	f7ff ff1a 	bl	8001250 <MX_DMA_Init>
  MX_CAN1_Init();
 800141c:	f7ff fdec 	bl	8000ff8 <MX_CAN1_Init>
  MX_SPI1_Init();
 8001420:	f000 f978 	bl	8001714 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001424:	f000 fd72 	bl	8001f0c <MX_USART3_UART_Init>
  MX_TIM9_Init();
 8001428:	f000 fc6e 	bl	8001d08 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 800142c:	f000 fd44 	bl	8001eb8 <MX_USART1_UART_Init>
  MX_TIM12_Init();
 8001430:	f000 fca4 	bl	8001d7c <MX_TIM12_Init>
  MX_CAN2_Init();
 8001434:	f7ff fe16 	bl	8001064 <MX_CAN2_Init>
  MX_TIM5_Init();
 8001438:	f000 fc18 	bl	8001c6c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 800143c:	4815      	ldr	r0, [pc, #84]	; (8001494 <main+0x8c>)
 800143e:	f004 f86f 	bl	8005520 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 8001442:	4815      	ldr	r0, [pc, #84]	; (8001498 <main+0x90>)
 8001444:	f004 f86c 	bl	8005520 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim12);
 8001448:	4814      	ldr	r0, [pc, #80]	; (800149c <main+0x94>)
 800144a:	f004 f869 	bl	8005520 <HAL_TIM_Base_Start_IT>
  RetargetInit(&huart1);
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <main+0x98>)
 8001450:	f000 f89a 	bl	8001588 <RetargetInit>
  RemoteInit();
 8001454:	f007 fdda 	bl	800900c <RemoteInit>
  MotorInit();
 8001458:	f007 fa6c 	bl	8008934 <MotorInit>
  PID_Init();
 800145c:	f007 fb92 	bl	8008b84 <PID_Init>
  Chassis_Init();
 8001460:	f005 ff66 	bl	8007330 <Chassis_Init>
  Gimbal_Init();
 8001464:	f006 fb70 	bl	8007b48 <Gimbal_Init>
  Shooter_Init();
 8001468:	f006 fe80 	bl	800816c <Shooter_Init>
  HAL_Delay(10);
 800146c:	200a      	movs	r0, #10
 800146e:	f000 ff71 	bl	8002354 <HAL_Delay>
  BMI088_Init();
 8001472:	f007 f823 	bl	80084bc <BMI088_Init>
  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800147a:	480a      	ldr	r0, [pc, #40]	; (80014a4 <main+0x9c>)
 800147c:	f002 fcb9 	bl	8003df2 <HAL_GPIO_TogglePin>
//			  Motor_Info[Yaw].TargetAngle,
//			  Motor_Info[Yaw].Angle);
//	  printf("%f,%f,%f\r\n",ImuData.angle[0],ImuData.angle[1],ImuData.angle[2]);


	  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8001480:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001484:	4807      	ldr	r0, [pc, #28]	; (80014a4 <main+0x9c>)
 8001486:	f002 fcb4 	bl	8003df2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800148a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148e:	f000 ff61 	bl	8002354 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8001492:	e7f5      	b.n	8001480 <main+0x78>
 8001494:	20000444 	.word	0x20000444
 8001498:	2000048c 	.word	0x2000048c
 800149c:	200004d4 	.word	0x200004d4
 80014a0:	2000051c 	.word	0x2000051c
 80014a4:	40021c00 	.word	0x40021c00

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	; 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2230      	movs	r2, #48	; 0x30
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f007 ff90 	bl	80093dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <SystemClock_Config+0xcc>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a27      	ldr	r2, [pc, #156]	; (8001574 <SystemClock_Config+0xcc>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <SystemClock_Config+0xcc>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <SystemClock_Config+0xd0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a21      	ldr	r2, [pc, #132]	; (8001578 <SystemClock_Config+0xd0>)
 80014f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <SystemClock_Config+0xd0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001504:	2301      	movs	r3, #1
 8001506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001512:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001518:	2306      	movs	r3, #6
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800151c:	23a8      	movs	r3, #168	; 0xa8
 800151e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001520:	2302      	movs	r3, #2
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001524:	2304      	movs	r3, #4
 8001526:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	4618      	mov	r0, r3
 800152e:	f002 fc7b 	bl	8003e28 <HAL_RCC_OscConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001538:	f000 f820 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153c:	230f      	movs	r3, #15
 800153e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001540:	2302      	movs	r3, #2
 8001542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001548:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800154c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800154e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001552:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2105      	movs	r1, #5
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fedc 	bl	8004318 <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001566:	f000 f809 	bl	800157c <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	3750      	adds	r7, #80	; 0x50
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x8>
	...

08001588 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <RetargetInit+0x28>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <RetargetInit+0x2c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6898      	ldr	r0, [r3, #8]
 800159c:	2300      	movs	r3, #0
 800159e:	2202      	movs	r2, #2
 80015a0:	2100      	movs	r1, #0
 80015a2:	f008 fd9d 	bl	800a0e0 <setvbuf>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200003e4 	.word	0x200003e4
 80015b4:	200001a0 	.word	0x200001a0

080015b8 <_isatty>:

int _isatty(int fd) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db04      	blt.n	80015d0 <_isatty+0x18>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	dc01      	bgt.n	80015d0 <_isatty+0x18>
    return 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e005      	b.n	80015dc <_isatty+0x24>

  errno = EBADF;
 80015d0:	f007 feda 	bl	8009388 <__errno>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2209      	movs	r2, #9
 80015d8:	601a      	str	r2, [r3, #0]
  return 0;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_write>:

int _write(int fd, char* ptr, int len) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d002      	beq.n	80015fc <_write+0x18>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d111      	bne.n	8001620 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <_write+0x54>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	b29a      	uxth	r2, r3
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	f004 fc08 	bl	8005e1e <HAL_UART_Transmit>
 800160e:	4603      	mov	r3, r0
 8001610:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <_write+0x38>
      return len;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	e008      	b.n	800162e <_write+0x4a>
    else
      return EIO;
 800161c:	2305      	movs	r3, #5
 800161e:	e006      	b.n	800162e <_write+0x4a>
  }
  errno = EBADF;
 8001620:	f007 feb2 	bl	8009388 <__errno>
 8001624:	4603      	mov	r3, r0
 8001626:	2209      	movs	r2, #9
 8001628:	601a      	str	r2, [r3, #0]
  return -1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200003e4 	.word	0x200003e4

0800163c <_close>:

int _close(int fd) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db04      	blt.n	8001654 <_close+0x18>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b02      	cmp	r3, #2
 800164e:	dc01      	bgt.n	8001654 <_close+0x18>
    return 0;
 8001650:	2300      	movs	r3, #0
 8001652:	e006      	b.n	8001662 <_close+0x26>

  errno = EBADF;
 8001654:	f007 fe98 	bl	8009388 <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	2209      	movs	r2, #9
 800165c:	601a      	str	r2, [r3, #0]
  return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001676:	f007 fe87 	bl	8009388 <__errno>
 800167a:	4603      	mov	r3, r0
 800167c:	2209      	movs	r2, #9
 800167e:	601a      	str	r2, [r3, #0]
  return -1;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_read>:

int _read(int fd, char* ptr, int len) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d110      	bne.n	80016c0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <_read+0x4c>)
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	2201      	movs	r2, #1
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	f004 fc4a 	bl	8005f42 <HAL_UART_Receive>
 80016ae:	4603      	mov	r3, r0
 80016b0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <_read+0x30>
      return 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e008      	b.n	80016ce <_read+0x42>
    else
      return EIO;
 80016bc:	2305      	movs	r3, #5
 80016be:	e006      	b.n	80016ce <_read+0x42>
  }
  errno = EBADF;
 80016c0:	f007 fe62 	bl	8009388 <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2209      	movs	r2, #9
 80016c8:	601a      	str	r2, [r3, #0]
  return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200003e4 	.word	0x200003e4

080016dc <_fstat>:

int _fstat(int fd, struct stat* st) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db08      	blt.n	80016fe <_fstat+0x22>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	dc05      	bgt.n	80016fe <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f8:	605a      	str	r2, [r3, #4]
    return 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e005      	b.n	800170a <_fstat+0x2e>
  }

  errno = EBADF;
 80016fe:	f007 fe43 	bl	8009388 <__errno>
 8001702:	4603      	mov	r3, r0
 8001704:	2209      	movs	r2, #9
 8001706:	601a      	str	r2, [r3, #0]
  return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_SPI1_Init+0x64>)
 800171a:	4a18      	ldr	r2, [pc, #96]	; (800177c <MX_SPI1_Init+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <MX_SPI1_Init+0x64>)
 8001720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001724:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_SPI1_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_SPI1_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_SPI1_Init+0x64>)
 8001734:	2202      	movs	r2, #2
 8001736:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_SPI1_Init+0x64>)
 800173a:	2201      	movs	r2, #1
 800173c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_SPI1_Init+0x64>)
 8001740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001744:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_SPI1_Init+0x64>)
 8001748:	2210      	movs	r2, #16
 800174a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <MX_SPI1_Init+0x64>)
 800174e:	2200      	movs	r2, #0
 8001750:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_SPI1_Init+0x64>)
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <MX_SPI1_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_SPI1_Init+0x64>)
 8001760:	220a      	movs	r2, #10
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <MX_SPI1_Init+0x64>)
 8001766:	f002 ffb7 	bl	80046d8 <HAL_SPI_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001770:	f7ff ff04 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200003e8 	.word	0x200003e8
 800177c:	40013000 	.word	0x40013000

08001780 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a2c      	ldr	r2, [pc, #176]	; (8001850 <HAL_SPI_MspInit+0xd0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d151      	bne.n	8001846 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HAL_SPI_MspInit+0xd4>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a2a      	ldr	r2, [pc, #168]	; (8001854 <HAL_SPI_MspInit+0xd4>)
 80017ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b28      	ldr	r3, [pc, #160]	; (8001854 <HAL_SPI_MspInit+0xd4>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <HAL_SPI_MspInit+0xd4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a23      	ldr	r2, [pc, #140]	; (8001854 <HAL_SPI_MspInit+0xd4>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <HAL_SPI_MspInit+0xd4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <HAL_SPI_MspInit+0xd4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <HAL_SPI_MspInit+0xd4>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <HAL_SPI_MspInit+0xd4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80017f6:	2318      	movs	r3, #24
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001806:	2305      	movs	r3, #5
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4811      	ldr	r0, [pc, #68]	; (8001858 <HAL_SPI_MspInit+0xd8>)
 8001812:	f002 f939 	bl	8003a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001826:	2305      	movs	r3, #5
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	480a      	ldr	r0, [pc, #40]	; (800185c <HAL_SPI_MspInit+0xdc>)
 8001832:	f002 f929 	bl	8003a88 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2105      	movs	r1, #5
 800183a:	2023      	movs	r0, #35	; 0x23
 800183c:	f001 fceb 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001840:	2023      	movs	r0, #35	; 0x23
 8001842:	f001 fd04 	bl	800324e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40013000 	.word	0x40013000
 8001854:	40023800 	.word	0x40023800
 8001858:	40020400 	.word	0x40020400
 800185c:	40020000 	.word	0x40020000

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_MspInit+0x4c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <HAL_MspInit+0x4c>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	6453      	str	r3, [r2, #68]	; 0x44
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_MspInit+0x4c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_MspInit+0x4c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_MspInit+0x4c>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fc:	f000 fd0a 	bl	8002314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA1_Stream1_IRQHandler+0x10>)
 800190a:	f001 fe53 	bl	80035b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000664 	.word	0x20000664

08001918 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <CAN1_TX_IRQHandler+0x10>)
 800191e:	f001 f970 	bl	8002c02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000390 	.word	0x20000390

0800192c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <CAN1_RX0_IRQHandler+0x10>)
 8001932:	f001 f966 	bl	8002c02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000390 	.word	0x20000390

08001940 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001946:	f003 fe5b 	bl	8005600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000048c 	.word	0x2000048c

08001954 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <SPI1_IRQHandler+0x10>)
 800195a:	f003 fb35 	bl	8004fc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200003e8 	.word	0x200003e8

08001968 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <USART1_IRQHandler+0x10>)
 800196e:	f004 fbef 	bl	8006150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000051c 	.word	0x2000051c

0800197c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <USART3_IRQHandler+0x10>)
 8001982:	f004 fbe5 	bl	8006150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000560 	.word	0x20000560

08001990 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001996:	f003 fe33 	bl	8005600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200004d4 	.word	0x200004d4

080019a4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <TIM5_IRQHandler+0x10>)
 80019aa:	f003 fe29 	bl	8005600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000444 	.word	0x20000444

080019b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <DMA2_Stream2_IRQHandler+0x10>)
 80019be:	f001 fdf9 	bl	80035b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200005a4 	.word	0x200005a4

080019cc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <CAN2_TX_IRQHandler+0x10>)
 80019d2:	f001 f916 	bl	8002c02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200003b8 	.word	0x200003b8

080019e0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <CAN2_RX0_IRQHandler+0x10>)
 80019e6:	f001 f90c 	bl	8002c02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200003b8 	.word	0x200003b8

080019f4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <DMA2_Stream7_IRQHandler+0x10>)
 80019fa:	f001 fddb 	bl	80035b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000604 	.word	0x20000604

08001a08 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 1 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
	if(huart==&huart1)
	{


	}
  if(huart==&huart3)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <HAL_UARTEx_RxEventCallback+0x40>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d104      	bne.n	8001a26 <HAL_UARTEx_RxEventCallback+0x1e>
  {
	  if(Size == 18)
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d101      	bne.n	8001a26 <HAL_UARTEx_RxEventCallback+0x1e>
	  {
		  RemoteData_Unpack();
 8001a22:	f007 faff 	bl	8009024 <RemoteData_Unpack>
//		  printf("%d,%d,%d,%d,%d,%d,%d\r\n",RemoteData.ch0,RemoteData.ch1,RemoteData.ch2,RemoteData.ch3
//				  ,RemoteData.s1,RemoteData.s2,RemoteData.wheel);
	  }
  }
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RecieveDate, sizeof(RecieveDate));
 8001a26:	2212      	movs	r2, #18
 8001a28:	4908      	ldr	r1, [pc, #32]	; (8001a4c <HAL_UARTEx_RxEventCallback+0x44>)
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <HAL_UARTEx_RxEventCallback+0x40>)
 8001a2c:	f004 fb2b 	bl	8006086 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx,DMA_IT_HT);
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <HAL_UARTEx_RxEventCallback+0x48>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_UARTEx_RxEventCallback+0x48>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0208 	bic.w	r2, r2, #8
 8001a3e:	601a      	str	r2, [r3, #0]
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000560 	.word	0x20000560
 8001a4c:	20000a78 	.word	0x20000a78
 8001a50:	20000664 	.word	0x20000664

08001a54 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	; 0x30
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t RXData[8];
	if(hcan == &hcan1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d117      	bne.n	8001a94 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
	{
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, RXData);
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	f107 0214 	add.w	r2, r7, #20
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	481b      	ldr	r0, [pc, #108]	; (8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001a70:	f000 ff8f 	bl	8002992 <HAL_CAN_GetRxMessage>
		Motor_RecieveData(&Motor_Info[rx_header.StdId - 0x201],RXData);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f2a3 2201 	subw	r2, r3, #513	; 0x201
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001a84:	4413      	add	r3, r2
 8001a86:	f107 020c 	add.w	r2, r7, #12
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f007 f817 	bl	8008ac0 <Motor_RecieveData>
 8001a92:	e01a      	b.n	8001aca <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
	}
	else if(hcan==&hcan2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d116      	bne.n	8001aca <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
	{
		HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rx_header, RXData);
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	f107 0214 	add.w	r2, r7, #20
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	480f      	ldr	r0, [pc, #60]	; (8001ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001aa8:	f000 ff73 	bl	8002992 <HAL_CAN_GetRxMessage>
		Motor_RecieveData(&Motor_Info[rx_header.StdId - 0x201],RXData);
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f2a3 2201 	subw	r2, r3, #513	; 0x201
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001abc:	4413      	add	r3, r2
 8001abe:	f107 020c 	add.w	r2, r7, #12
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f006 fffb 	bl	8008ac0 <Motor_RecieveData>
	}
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001aca:	2102      	movs	r1, #2
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f001 f872 	bl	8002bb6 <HAL_CAN_ActivateNotification>

}
 8001ad2:	bf00      	nop
 8001ad4:	3730      	adds	r7, #48	; 0x30
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000390 	.word	0x20000390
 8001ae0:	20000710 	.word	0x20000710
 8001ae4:	200003b8 	.word	0x200003b8

08001ae8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	if(htim==&htim5)//1000HZ
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a34      	ldr	r2, [pc, #208]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d150      	bne.n	8001b9a <HAL_TIM_PeriodElapsedCallback+0xb2>
	{
		Set_ChasissConf(IncrPID_Info[Chassis1].Output, IncrPID_Info[Chassis2].Output, IncrPID_Info[Chassis3].Output, IncrPID_Info[Chassis4].Output);
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001afa:	edd3 7a06 	vldr	s15, [r3, #24]
 8001afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b02:	ee17 3a90 	vmov	r3, s15
 8001b06:	b218      	sxth	r0, r3
 8001b08:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b0a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001b0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b12:	ee17 3a90 	vmov	r3, s15
 8001b16:	b219      	sxth	r1, r3
 8001b18:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b1a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001b1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b22:	ee17 3a90 	vmov	r3, s15
 8001b26:	b21a      	sxth	r2, r3
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b2a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8001b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b32:	ee17 3a90 	vmov	r3, s15
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	f006 ff16 	bl	8008968 <Set_ChasissConf>
		Set_GimbalConf(PosiPID_Info[Yaw].Output, PosiPID_Info[Pitch].Output);
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b3e:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 8001b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b46:	ee17 3a90 	vmov	r3, s15
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b4e:	edd2 7a58 	vldr	s15, [r2, #352]	; 0x160
 8001b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b56:	ee17 2a90 	vmov	r2, s15
 8001b5a:	b212      	sxth	r2, r2
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f006 ff48 	bl	80089f4 <Set_GimbalConf>
		Set_AmmoSpeed(IncrPID_Info[frict_L].Output, IncrPID_Info[frict_R].Output, PosiPID_Info[Ammo].Output);
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b66:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8001b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b6e:	ee17 3a90 	vmov	r3, s15
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b76:	edd2 7a2e 	vldr	s15, [r2, #184]	; 0xb8
 8001b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b7e:	ee17 2a90 	vmov	r2, s15
 8001b82:	b211      	sxth	r1, r2
 8001b84:	4a11      	ldr	r2, [pc, #68]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b86:	edd2 7a3d 	vldr	s15, [r2, #244]	; 0xf4
 8001b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b8e:	ee17 2a90 	vmov	r2, s15
 8001b92:	b212      	sxth	r2, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f006 ff5b 	bl	8008a50 <Set_AmmoSpeed>
	}
	if(htim==&htim9)//840HZ
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d105      	bne.n	8001bae <HAL_TIM_PeriodElapsedCallback+0xc6>
	{
		Chassis_UpData();
 8001ba2:	f005 fc1d 	bl	80073e0 <Chassis_UpData>
		Gimbal_UpData();
 8001ba6:	f005 ffe1 	bl	8007b6c <Gimbal_UpData>
		Shooter_UpData();
 8001baa:	f006 faf5 	bl	8008198 <Shooter_UpData>
	}
	if(htim==&htim12)//400HZ
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d102      	bne.n	8001bbc <HAL_TIM_PeriodElapsedCallback+0xd4>
	{
		Get_ImuData(&ImuData);
 8001bb6:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001bb8:	f006 fcb0 	bl	800851c <Get_ImuData>
	}
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000444 	.word	0x20000444
 8001bc8:	20000938 	.word	0x20000938
 8001bcc:	200007d0 	.word	0x200007d0
 8001bd0:	2000048c 	.word	0x2000048c
 8001bd4:	200004d4 	.word	0x200004d4
 8001bd8:	200006d8 	.word	0x200006d8

08001bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <_sbrk+0x5c>)
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <_sbrk+0x60>)
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <_sbrk+0x64>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <_sbrk+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d207      	bcs.n	8001c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c0c:	f007 fbbc 	bl	8009388 <__errno>
 8001c10:	4603      	mov	r3, r0
 8001c12:	220c      	movs	r2, #12
 8001c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	e009      	b.n	8001c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <_sbrk+0x64>)
 8001c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20020000 	.word	0x20020000
 8001c3c:	00000400 	.word	0x00000400
 8001c40:	20000440 	.word	0x20000440
 8001c44:	20000ab0 	.word	0x20000ab0

08001c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <SystemInit+0x20>)
 8001c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <SystemInit+0x20>)
 8001c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <MX_TIM5_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c80:	463b      	mov	r3, r7
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <MX_TIM5_Init+0x94>)
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	; (8001d04 <MX_TIM5_Init+0x98>)
 8001c8c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <MX_TIM5_Init+0x94>)
 8001c90:	2229      	movs	r2, #41	; 0x29
 8001c92:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <MX_TIM5_Init+0x94>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <MX_TIM5_Init+0x94>)
 8001c9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ca0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <MX_TIM5_Init+0x94>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <MX_TIM5_Init+0x94>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001cae:	4814      	ldr	r0, [pc, #80]	; (8001d00 <MX_TIM5_Init+0x94>)
 8001cb0:	f003 fbe6 	bl	8005480 <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001cba:	f7ff fc5f 	bl	800157c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cc4:	f107 0308 	add.w	r3, r7, #8
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_TIM5_Init+0x94>)
 8001ccc:	f003 fda0 	bl	8005810 <HAL_TIM_ConfigClockSource>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001cd6:	f7ff fc51 	bl	800157c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4806      	ldr	r0, [pc, #24]	; (8001d00 <MX_TIM5_Init+0x94>)
 8001ce8:	f003 ffbc 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001cf2:	f7ff fc43 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000444 	.word	0x20000444
 8001d04:	40000c00 	.word	0x40000c00

08001d08 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <MX_TIM9_Init+0x6c>)
 8001d1c:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <MX_TIM9_Init+0x70>)
 8001d1e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <MX_TIM9_Init+0x6c>)
 8001d22:	2263      	movs	r2, #99	; 0x63
 8001d24:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <MX_TIM9_Init+0x6c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_TIM9_Init+0x6c>)
 8001d2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d32:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <MX_TIM9_Init+0x6c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_TIM9_Init+0x6c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <MX_TIM9_Init+0x6c>)
 8001d42:	f003 fb9d 	bl	8005480 <HAL_TIM_Base_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001d4c:	f7ff fc16 	bl	800157c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d54:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001d56:	463b      	mov	r3, r7
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <MX_TIM9_Init+0x6c>)
 8001d5c:	f003 fd58 	bl	8005810 <HAL_TIM_ConfigClockSource>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001d66:	f7ff fc09 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000048c 	.word	0x2000048c
 8001d78:	40014000 	.word	0x40014000

08001d7c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d82:	463b      	mov	r3, r7
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <MX_TIM12_Init+0x6c>)
 8001d90:	4a16      	ldr	r2, [pc, #88]	; (8001dec <MX_TIM12_Init+0x70>)
 8001d92:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 209;
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <MX_TIM12_Init+0x6c>)
 8001d96:	22d1      	movs	r2, #209	; 0xd1
 8001d98:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <MX_TIM12_Init+0x6c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_TIM12_Init+0x6c>)
 8001da2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001da6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_TIM12_Init+0x6c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_TIM12_Init+0x6c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001db4:	480c      	ldr	r0, [pc, #48]	; (8001de8 <MX_TIM12_Init+0x6c>)
 8001db6:	f003 fb63 	bl	8005480 <HAL_TIM_Base_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8001dc0:	f7ff fbdc 	bl	800157c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001dca:	463b      	mov	r3, r7
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <MX_TIM12_Init+0x6c>)
 8001dd0:	f003 fd1e 	bl	8005810 <HAL_TIM_ConfigClockSource>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8001dda:	f7ff fbcf 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200004d4 	.word	0x200004d4
 8001dec:	40001800 	.word	0x40001800

08001df0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ea8 <HAL_TIM_Base_MspInit+0xb8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d116      	bne.n	8001e30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_TIM_Base_MspInit+0xbc>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a28      	ldr	r2, [pc, #160]	; (8001eac <HAL_TIM_Base_MspInit+0xbc>)
 8001e0c:	f043 0308 	orr.w	r3, r3, #8
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_TIM_Base_MspInit+0xbc>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	2032      	movs	r0, #50	; 0x32
 8001e24:	f001 f9f7 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e28:	2032      	movs	r0, #50	; 0x32
 8001e2a:	f001 fa10 	bl	800324e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001e2e:	e036      	b.n	8001e9e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM9)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_TIM_Base_MspInit+0xc0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d116      	bne.n	8001e68 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_TIM_Base_MspInit+0xbc>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a1a      	ldr	r2, [pc, #104]	; (8001eac <HAL_TIM_Base_MspInit+0xbc>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_TIM_Base_MspInit+0xbc>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2105      	movs	r1, #5
 8001e5a:	2018      	movs	r0, #24
 8001e5c:	f001 f9db 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e60:	2018      	movs	r0, #24
 8001e62:	f001 f9f4 	bl	800324e <HAL_NVIC_EnableIRQ>
}
 8001e66:	e01a      	b.n	8001e9e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM12)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_TIM_Base_MspInit+0xc4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d115      	bne.n	8001e9e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_TIM_Base_MspInit+0xbc>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <HAL_TIM_Base_MspInit+0xbc>)
 8001e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_TIM_Base_MspInit+0xbc>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	202b      	movs	r0, #43	; 0x2b
 8001e94:	f001 f9bf 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001e98:	202b      	movs	r0, #43	; 0x2b
 8001e9a:	f001 f9d8 	bl	800324e <HAL_NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40000c00 	.word	0x40000c00
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40014000 	.word	0x40014000
 8001eb4:	40001800 	.word	0x40001800

08001eb8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <MX_USART1_UART_Init+0x50>)
 8001ec0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ede:	220c      	movs	r2, #12
 8001ee0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ef0:	f003 ff48 	bl	8005d84 <HAL_UART_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001efa:	f7ff fb3f 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000051c 	.word	0x2000051c
 8001f08:	40011000 	.word	0x40011000

08001f0c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <MX_USART3_UART_Init+0x68>)
 8001f12:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <MX_USART3_UART_Init+0x6c>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <MX_USART3_UART_Init+0x68>)
 8001f18:	4a18      	ldr	r2, [pc, #96]	; (8001f7c <MX_USART3_UART_Init+0x70>)
 8001f1a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <MX_USART3_UART_Init+0x68>)
 8001f1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <MX_USART3_UART_Init+0x68>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_USART3_UART_Init+0x68>)
 8001f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f30:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <MX_USART3_UART_Init+0x68>)
 8001f34:	220c      	movs	r2, #12
 8001f36:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_USART3_UART_Init+0x68>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <MX_USART3_UART_Init+0x68>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f44:	480b      	ldr	r0, [pc, #44]	; (8001f74 <MX_USART3_UART_Init+0x68>)
 8001f46:	f003 ff1d 	bl	8005d84 <HAL_UART_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8001f50:	f7ff fb14 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RecieveDate, sizeof(RecieveDate));
 8001f54:	2212      	movs	r2, #18
 8001f56:	490a      	ldr	r1, [pc, #40]	; (8001f80 <MX_USART3_UART_Init+0x74>)
 8001f58:	4806      	ldr	r0, [pc, #24]	; (8001f74 <MX_USART3_UART_Init+0x68>)
 8001f5a:	f004 f894 	bl	8006086 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx,DMA_IT_HT);
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_USART3_UART_Init+0x78>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <MX_USART3_UART_Init+0x78>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0208 	bic.w	r2, r2, #8
 8001f6c:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART3_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000560 	.word	0x20000560
 8001f78:	40004800 	.word	0x40004800
 8001f7c:	000186a0 	.word	0x000186a0
 8001f80:	20000a78 	.word	0x20000a78
 8001f84:	20000664 	.word	0x20000664

08001f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a91      	ldr	r2, [pc, #580]	; (80021ec <HAL_UART_MspInit+0x264>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	f040 80b2 	bne.w	8002110 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	4b8f      	ldr	r3, [pc, #572]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	4a8e      	ldr	r2, [pc, #568]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	6453      	str	r3, [r2, #68]	; 0x44
 8001fbc:	4b8c      	ldr	r3, [pc, #560]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	4b88      	ldr	r3, [pc, #544]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	4a87      	ldr	r2, [pc, #540]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd8:	4b85      	ldr	r3, [pc, #532]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	4b81      	ldr	r3, [pc, #516]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4a80      	ldr	r2, [pc, #512]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff4:	4b7e      	ldr	r3, [pc, #504]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002010:	2307      	movs	r3, #7
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	4619      	mov	r1, r3
 800201a:	4876      	ldr	r0, [pc, #472]	; (80021f4 <HAL_UART_MspInit+0x26c>)
 800201c:	f001 fd34 	bl	8003a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002032:	2307      	movs	r3, #7
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	486e      	ldr	r0, [pc, #440]	; (80021f8 <HAL_UART_MspInit+0x270>)
 800203e:	f001 fd23 	bl	8003a88 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002042:	4b6e      	ldr	r3, [pc, #440]	; (80021fc <HAL_UART_MspInit+0x274>)
 8002044:	4a6e      	ldr	r2, [pc, #440]	; (8002200 <HAL_UART_MspInit+0x278>)
 8002046:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002048:	4b6c      	ldr	r3, [pc, #432]	; (80021fc <HAL_UART_MspInit+0x274>)
 800204a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800204e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002050:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <HAL_UART_MspInit+0x274>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002056:	4b69      	ldr	r3, [pc, #420]	; (80021fc <HAL_UART_MspInit+0x274>)
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800205c:	4b67      	ldr	r3, [pc, #412]	; (80021fc <HAL_UART_MspInit+0x274>)
 800205e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002062:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002064:	4b65      	ldr	r3, [pc, #404]	; (80021fc <HAL_UART_MspInit+0x274>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800206a:	4b64      	ldr	r3, [pc, #400]	; (80021fc <HAL_UART_MspInit+0x274>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002070:	4b62      	ldr	r3, [pc, #392]	; (80021fc <HAL_UART_MspInit+0x274>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002076:	4b61      	ldr	r3, [pc, #388]	; (80021fc <HAL_UART_MspInit+0x274>)
 8002078:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800207c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800207e:	4b5f      	ldr	r3, [pc, #380]	; (80021fc <HAL_UART_MspInit+0x274>)
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002084:	485d      	ldr	r0, [pc, #372]	; (80021fc <HAL_UART_MspInit+0x274>)
 8002086:	f001 f8fd 	bl	8003284 <HAL_DMA_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002090:	f7ff fa74 	bl	800157c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a59      	ldr	r2, [pc, #356]	; (80021fc <HAL_UART_MspInit+0x274>)
 8002098:	639a      	str	r2, [r3, #56]	; 0x38
 800209a:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_UART_MspInit+0x274>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80020a0:	4b58      	ldr	r3, [pc, #352]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020a2:	4a59      	ldr	r2, [pc, #356]	; (8002208 <HAL_UART_MspInit+0x280>)
 80020a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80020a6:	4b57      	ldr	r3, [pc, #348]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020ae:	4b55      	ldr	r3, [pc, #340]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020b0:	2240      	movs	r2, #64	; 0x40
 80020b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ba:	4b52      	ldr	r3, [pc, #328]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020c2:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c8:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020ce:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80020d4:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020da:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020dc:	4b49      	ldr	r3, [pc, #292]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020e2:	4848      	ldr	r0, [pc, #288]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020e4:	f001 f8ce 	bl	8003284 <HAL_DMA_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80020ee:	f7ff fa45 	bl	800157c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a43      	ldr	r2, [pc, #268]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020f6:	635a      	str	r2, [r3, #52]	; 0x34
 80020f8:	4a42      	ldr	r2, [pc, #264]	; (8002204 <HAL_UART_MspInit+0x27c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	210a      	movs	r1, #10
 8002102:	2025      	movs	r0, #37	; 0x25
 8002104:	f001 f887 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002108:	2025      	movs	r0, #37	; 0x25
 800210a:	f001 f8a0 	bl	800324e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800210e:	e068      	b.n	80021e2 <HAL_UART_MspInit+0x25a>
  else if(uartHandle->Instance==USART3)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a3d      	ldr	r2, [pc, #244]	; (800220c <HAL_UART_MspInit+0x284>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d163      	bne.n	80021e2 <HAL_UART_MspInit+0x25a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a33      	ldr	r2, [pc, #204]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_UART_MspInit+0x268>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_UART_MspInit+0x268>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a2c      	ldr	r2, [pc, #176]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <HAL_UART_MspInit+0x268>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002152:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002164:	2307      	movs	r3, #7
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4619      	mov	r1, r3
 800216e:	4828      	ldr	r0, [pc, #160]	; (8002210 <HAL_UART_MspInit+0x288>)
 8002170:	f001 fc8a 	bl	8003a88 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_UART_MspInit+0x28c>)
 8002176:	4a28      	ldr	r2, [pc, #160]	; (8002218 <HAL_UART_MspInit+0x290>)
 8002178:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800217a:	4b26      	ldr	r3, [pc, #152]	; (8002214 <HAL_UART_MspInit+0x28c>)
 800217c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002180:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_UART_MspInit+0x28c>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HAL_UART_MspInit+0x28c>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_UART_MspInit+0x28c>)
 8002190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002194:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <HAL_UART_MspInit+0x28c>)
 8002198:	2200      	movs	r2, #0
 800219a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_UART_MspInit+0x28c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_UART_MspInit+0x28c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <HAL_UART_MspInit+0x28c>)
 80021aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021ae:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_UART_MspInit+0x28c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80021b6:	4817      	ldr	r0, [pc, #92]	; (8002214 <HAL_UART_MspInit+0x28c>)
 80021b8:	f001 f864 	bl	8003284 <HAL_DMA_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_MspInit+0x23e>
      Error_Handler();
 80021c2:	f7ff f9db 	bl	800157c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a12      	ldr	r2, [pc, #72]	; (8002214 <HAL_UART_MspInit+0x28c>)
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38
 80021cc:	4a11      	ldr	r2, [pc, #68]	; (8002214 <HAL_UART_MspInit+0x28c>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 10, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	210a      	movs	r1, #10
 80021d6:	2027      	movs	r0, #39	; 0x27
 80021d8:	f001 f81d 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021dc:	2027      	movs	r0, #39	; 0x27
 80021de:	f001 f836 	bl	800324e <HAL_NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3730      	adds	r7, #48	; 0x30
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40011000 	.word	0x40011000
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020400 	.word	0x40020400
 80021f8:	40020000 	.word	0x40020000
 80021fc:	200005a4 	.word	0x200005a4
 8002200:	40026440 	.word	0x40026440
 8002204:	20000604 	.word	0x20000604
 8002208:	400264b8 	.word	0x400264b8
 800220c:	40004800 	.word	0x40004800
 8002210:	40020800 	.word	0x40020800
 8002214:	20000664 	.word	0x20000664
 8002218:	40026028 	.word	0x40026028

0800221c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800221c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002254 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002220:	480d      	ldr	r0, [pc, #52]	; (8002258 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002222:	490e      	ldr	r1, [pc, #56]	; (800225c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002224:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002228:	e002      	b.n	8002230 <LoopCopyDataInit>

0800222a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800222c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222e:	3304      	adds	r3, #4

08002230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002234:	d3f9      	bcc.n	800222a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002236:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002238:	4c0b      	ldr	r4, [pc, #44]	; (8002268 <LoopFillZerobss+0x26>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800223c:	e001      	b.n	8002242 <LoopFillZerobss>

0800223e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002240:	3204      	adds	r2, #4

08002242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002244:	d3fb      	bcc.n	800223e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002246:	f7ff fcff 	bl	8001c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800224a:	f007 f8a3 	bl	8009394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224e:	f7ff f8db 	bl	8001408 <main>
  bx  lr    
 8002252:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002254:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800225c:	20000374 	.word	0x20000374
  ldr r2, =_sidata
 8002260:	0800f7c4 	.word	0x0800f7c4
  ldr r2, =_sbss
 8002264:	20000374 	.word	0x20000374
  ldr r4, =_ebss
 8002268:	20000ab0 	.word	0x20000ab0

0800226c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800226c:	e7fe      	b.n	800226c <ADC_IRQHandler>
	...

08002270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_Init+0x40>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <HAL_Init+0x40>)
 800227a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800227e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <HAL_Init+0x40>)
 8002286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <HAL_Init+0x40>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002298:	2003      	movs	r0, #3
 800229a:	f000 ffb1 	bl	8003200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800229e:	200f      	movs	r0, #15
 80022a0:	f000 f808 	bl	80022b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a4:	f7ff fadc 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023c00 	.word	0x40023c00

080022b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_InitTick+0x54>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_InitTick+0x58>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 ffc9 	bl	800326a <HAL_SYSTICK_Config>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e00e      	b.n	8002300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b0f      	cmp	r3, #15
 80022e6:	d80a      	bhi.n	80022fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e8:	2200      	movs	r2, #0
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295
 80022f0:	f000 ff91 	bl	8003216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f4:	4a06      	ldr	r2, [pc, #24]	; (8002310 <HAL_InitTick+0x5c>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e000      	b.n	8002300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000000 	.word	0x20000000
 800230c:	20000008 	.word	0x20000008
 8002310:	20000004 	.word	0x20000004

08002314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_IncTick+0x20>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x24>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4413      	add	r3, r2
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <HAL_IncTick+0x24>)
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000008 	.word	0x20000008
 8002338:	200006c4 	.word	0x200006c4

0800233c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return uwTick;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_GetTick+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	200006c4 	.word	0x200006c4

08002354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800235c:	f7ff ffee 	bl	800233c <HAL_GetTick>
 8002360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d005      	beq.n	800237a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <HAL_Delay+0x44>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800237a:	bf00      	nop
 800237c:	f7ff ffde 	bl	800233c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	429a      	cmp	r2, r3
 800238a:	d8f7      	bhi.n	800237c <HAL_Delay+0x28>
  {
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000008 	.word	0x20000008

0800239c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e0ed      	b.n	800258a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fe88 	bl	80010d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d0:	f7ff ffb4 	bl	800233c <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023d6:	e012      	b.n	80023fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023d8:	f7ff ffb0 	bl	800233c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b0a      	cmp	r3, #10
 80023e4:	d90b      	bls.n	80023fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2205      	movs	r2, #5
 80023f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0c5      	b.n	800258a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0e5      	beq.n	80023d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0202 	bic.w	r2, r2, #2
 800241a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800241c:	f7ff ff8e 	bl	800233c <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002422:	e012      	b.n	800244a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002424:	f7ff ff8a 	bl	800233c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b0a      	cmp	r3, #10
 8002430:	d90b      	bls.n	800244a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2205      	movs	r2, #5
 8002442:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e09f      	b.n	800258a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e5      	bne.n	8002424 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7e1b      	ldrb	r3, [r3, #24]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d108      	bne.n	8002472 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e007      	b.n	8002482 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7e5b      	ldrb	r3, [r3, #25]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d108      	bne.n	800249c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e007      	b.n	80024ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7e9b      	ldrb	r3, [r3, #26]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d108      	bne.n	80024c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e007      	b.n	80024d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0220 	bic.w	r2, r2, #32
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7edb      	ldrb	r3, [r3, #27]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0210 	bic.w	r2, r2, #16
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e007      	b.n	8002500 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0210 	orr.w	r2, r2, #16
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7f1b      	ldrb	r3, [r3, #28]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d108      	bne.n	800251a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0208 	orr.w	r2, r2, #8
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	e007      	b.n	800252a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0208 	bic.w	r2, r2, #8
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7f5b      	ldrb	r3, [r3, #29]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d108      	bne.n	8002544 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0204 	orr.w	r2, r2, #4
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e007      	b.n	8002554 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0204 	bic.w	r2, r2, #4
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	ea42 0103 	orr.w	r1, r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025aa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d003      	beq.n	80025ba <HAL_CAN_ConfigFilter+0x26>
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	f040 80be 	bne.w	8002736 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80025ba:	4b65      	ldr	r3, [pc, #404]	; (8002750 <HAL_CAN_ConfigFilter+0x1bc>)
 80025bc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	431a      	orrs	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	2201      	movs	r2, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	43db      	mvns	r3, r3
 800260c:	401a      	ands	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d123      	bne.n	8002664 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43db      	mvns	r3, r3
 8002626:	401a      	ands	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800263e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3248      	adds	r2, #72	; 0x48
 8002644:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002658:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800265a:	6979      	ldr	r1, [r7, #20]
 800265c:	3348      	adds	r3, #72	; 0x48
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d122      	bne.n	80026b2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	431a      	orrs	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800268c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3248      	adds	r2, #72	; 0x48
 8002692:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026a8:	6979      	ldr	r1, [r7, #20]
 80026aa:	3348      	adds	r3, #72	; 0x48
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	401a      	ands	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80026cc:	e007      	b.n	80026de <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	401a      	ands	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80026f8:	e007      	b.n	800270a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	431a      	orrs	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	431a      	orrs	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002728:	f023 0201 	bic.w	r2, r3, #1
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e006      	b.n	8002744 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
  }
}
 8002744:	4618      	mov	r0, r3
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40006400 	.word	0x40006400

08002754 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	d12e      	bne.n	80027c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002780:	f7ff fddc 	bl	800233c <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002786:	e012      	b.n	80027ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002788:	f7ff fdd8 	bl	800233c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b0a      	cmp	r3, #10
 8002794:	d90b      	bls.n	80027ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2205      	movs	r2, #5
 80027a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e012      	b.n	80027d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e5      	bne.n	8002788 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e006      	b.n	80027d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
  }
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80027fa:	7ffb      	ldrb	r3, [r7, #31]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d003      	beq.n	8002808 <HAL_CAN_AddTxMessage+0x2c>
 8002800:	7ffb      	ldrb	r3, [r7, #31]
 8002802:	2b02      	cmp	r3, #2
 8002804:	f040 80b8 	bne.w	8002978 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80a0 	beq.w	8002968 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	0e1b      	lsrs	r3, r3, #24
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d907      	bls.n	8002848 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e09e      	b.n	8002986 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002848:	2201      	movs	r2, #1
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	409a      	lsls	r2, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10d      	bne.n	8002876 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002864:	68f9      	ldr	r1, [r7, #12]
 8002866:	6809      	ldr	r1, [r1, #0]
 8002868:	431a      	orrs	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3318      	adds	r3, #24
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	440b      	add	r3, r1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e00f      	b.n	8002896 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002880:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002886:	68f9      	ldr	r1, [r7, #12]
 8002888:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800288a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3318      	adds	r3, #24
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	440b      	add	r3, r1
 8002894:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6819      	ldr	r1, [r3, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3318      	adds	r3, #24
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	440b      	add	r3, r1
 80028a6:	3304      	adds	r3, #4
 80028a8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	7d1b      	ldrb	r3, [r3, #20]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d111      	bne.n	80028d6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3318      	adds	r3, #24
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	4413      	add	r3, r2
 80028be:	3304      	adds	r3, #4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	6811      	ldr	r1, [r2, #0]
 80028c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3318      	adds	r3, #24
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	440b      	add	r3, r1
 80028d2:	3304      	adds	r3, #4
 80028d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3307      	adds	r3, #7
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	061a      	lsls	r2, r3, #24
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3306      	adds	r3, #6
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	041b      	lsls	r3, r3, #16
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3305      	adds	r3, #5
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	4313      	orrs	r3, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	3204      	adds	r2, #4
 80028f6:	7812      	ldrb	r2, [r2, #0]
 80028f8:	4610      	mov	r0, r2
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	6811      	ldr	r1, [r2, #0]
 80028fe:	ea43 0200 	orr.w	r2, r3, r0
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	440b      	add	r3, r1
 8002908:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800290c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3303      	adds	r3, #3
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	061a      	lsls	r2, r3, #24
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3302      	adds	r3, #2
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3301      	adds	r3, #1
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	4313      	orrs	r3, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	7812      	ldrb	r2, [r2, #0]
 800292e:	4610      	mov	r0, r2
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	6811      	ldr	r1, [r2, #0]
 8002934:	ea43 0200 	orr.w	r2, r3, r0
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	440b      	add	r3, r1
 800293e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002942:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	3318      	adds	r3, #24
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	4413      	add	r3, r2
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	6811      	ldr	r1, [r2, #0]
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3318      	adds	r3, #24
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	440b      	add	r3, r1
 8002962:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	e00e      	b.n	8002986 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e006      	b.n	8002986 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	3724      	adds	r7, #36	; 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002992:	b480      	push	{r7}
 8002994:	b087      	sub	sp, #28
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d003      	beq.n	80029b6 <HAL_CAN_GetRxMessage+0x24>
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	f040 80f3 	bne.w	8002b9c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10e      	bne.n	80029da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d116      	bne.n	80029f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0e7      	b.n	8002baa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0d8      	b.n	8002baa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	331b      	adds	r3, #27
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	4413      	add	r3, r2
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0204 	and.w	r2, r3, #4
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	331b      	adds	r3, #27
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	4413      	add	r3, r2
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0d5b      	lsrs	r3, r3, #21
 8002a26:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e00b      	b.n	8002a48 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	331b      	adds	r3, #27
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	4413      	add	r3, r2
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	08db      	lsrs	r3, r3, #3
 8002a40:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	331b      	adds	r3, #27
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	4413      	add	r3, r2
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0202 	and.w	r2, r3, #2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	331b      	adds	r3, #27
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	4413      	add	r3, r2
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 020f 	and.w	r2, r3, #15
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	331b      	adds	r3, #27
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	4413      	add	r3, r2
 8002a82:	3304      	adds	r3, #4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	331b      	adds	r3, #27
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	4413      	add	r3, r2
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0c1b      	lsrs	r3, r3, #16
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0a1a      	lsrs	r2, r3, #8
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0c1a      	lsrs	r2, r3, #16
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	3302      	adds	r3, #2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e1a      	lsrs	r2, r3, #24
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	3303      	adds	r3, #3
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0a1a      	lsrs	r2, r3, #8
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	3305      	adds	r3, #5
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0c1a      	lsrs	r2, r3, #16
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	3306      	adds	r3, #6
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	0e1a      	lsrs	r2, r3, #24
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	3307      	adds	r3, #7
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d108      	bne.n	8002b88 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0220 	orr.w	r2, r2, #32
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	e007      	b.n	8002b98 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0220 	orr.w	r2, r2, #32
 8002b96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e006      	b.n	8002baa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d002      	beq.n	8002bd4 <HAL_CAN_ActivateNotification+0x1e>
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d109      	bne.n	8002be8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6959      	ldr	r1, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e006      	b.n	8002bf6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08a      	sub	sp, #40	; 0x28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d07c      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d023      	beq.n	8002c9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2201      	movs	r2, #1
 8002c58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f983 	bl	8002f70 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c6a:	e016      	b.n	8002c9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7e:	e00c      	b.n	8002c9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	e002      	b.n	8002c9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f989 	bl	8002fac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d024      	beq.n	8002cee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f963 	bl	8002f84 <HAL_CAN_TxMailbox1CompleteCallback>
 8002cbe:	e016      	b.n	8002cee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd2:	e00c      	b.n	8002cee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce6:	e002      	b.n	8002cee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f969 	bl	8002fc0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d024      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f943 	bl	8002f98 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d12:	e016      	b.n	8002d42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	e00c      	b.n	8002d42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d004      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3a:	e002      	b.n	8002d42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f949 	bl	8002fd4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00c      	beq.n	8002d66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2210      	movs	r2, #16
 8002d64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f930 	bl	8002fe8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fe fe57 	bl	8001a54 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00c      	beq.n	8002dca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d006      	beq.n	8002dec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2208      	movs	r2, #8
 8002de4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f912 	bl	8003010 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f8f9 	bl	8002ffc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2210      	movs	r2, #16
 8002e24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8fc 	bl	8003024 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2208      	movs	r2, #8
 8002e46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f8f5 	bl	8003038 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d07b      	beq.n	8002f50 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d072      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	f043 0304 	orr.w	r3, r3, #4
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d043      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03e      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed0:	2b60      	cmp	r3, #96	; 0x60
 8002ed2:	d02b      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x32a>
 8002ed4:	2b60      	cmp	r3, #96	; 0x60
 8002ed6:	d82e      	bhi.n	8002f36 <HAL_CAN_IRQHandler+0x334>
 8002ed8:	2b50      	cmp	r3, #80	; 0x50
 8002eda:	d022      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x320>
 8002edc:	2b50      	cmp	r3, #80	; 0x50
 8002ede:	d82a      	bhi.n	8002f36 <HAL_CAN_IRQHandler+0x334>
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	d019      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x316>
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d826      	bhi.n	8002f36 <HAL_CAN_IRQHandler+0x334>
 8002ee8:	2b30      	cmp	r3, #48	; 0x30
 8002eea:	d010      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x30c>
 8002eec:	2b30      	cmp	r3, #48	; 0x30
 8002eee:	d822      	bhi.n	8002f36 <HAL_CAN_IRQHandler+0x334>
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d002      	beq.n	8002efa <HAL_CAN_IRQHandler+0x2f8>
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d005      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ef8:	e01d      	b.n	8002f36 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	f043 0308 	orr.w	r3, r3, #8
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f02:	e019      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	f043 0310 	orr.w	r3, r3, #16
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f0c:	e014      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f16:	e00f      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f20:	e00a      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f2a:	e005      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f34:	e000      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f36:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f46:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f872 	bl	800304c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3728      	adds	r7, #40	; 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800307c:	4013      	ands	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800308c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003092:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	60d3      	str	r3, [r2, #12]
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <__NVIC_GetPriorityGrouping+0x18>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	f003 0307 	and.w	r3, r3, #7
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	db0b      	blt.n	80030ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	4907      	ldr	r1, [pc, #28]	; (80030fc <__NVIC_EnableIRQ+0x38>)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2001      	movs	r0, #1
 80030e6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000e100 	.word	0xe000e100

08003100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	2b00      	cmp	r3, #0
 8003112:	db0a      	blt.n	800312a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	b2da      	uxtb	r2, r3
 8003118:	490c      	ldr	r1, [pc, #48]	; (800314c <__NVIC_SetPriority+0x4c>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	0112      	lsls	r2, r2, #4
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	440b      	add	r3, r1
 8003124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003128:	e00a      	b.n	8003140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4908      	ldr	r1, [pc, #32]	; (8003150 <__NVIC_SetPriority+0x50>)
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	3b04      	subs	r3, #4
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	440b      	add	r3, r1
 800313e:	761a      	strb	r2, [r3, #24]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000e100 	.word	0xe000e100
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	; 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f1c3 0307 	rsb	r3, r3, #7
 800316e:	2b04      	cmp	r3, #4
 8003170:	bf28      	it	cs
 8003172:	2304      	movcs	r3, #4
 8003174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3304      	adds	r3, #4
 800317a:	2b06      	cmp	r3, #6
 800317c:	d902      	bls.n	8003184 <NVIC_EncodePriority+0x30>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3b03      	subs	r3, #3
 8003182:	e000      	b.n	8003186 <NVIC_EncodePriority+0x32>
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	f04f 32ff 	mov.w	r2, #4294967295
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43da      	mvns	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	401a      	ands	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800319c:	f04f 31ff 	mov.w	r1, #4294967295
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	43d9      	mvns	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	4313      	orrs	r3, r2
         );
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	; 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031cc:	d301      	bcc.n	80031d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ce:	2301      	movs	r3, #1
 80031d0:	e00f      	b.n	80031f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <SysTick_Config+0x40>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031da:	210f      	movs	r1, #15
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295
 80031e0:	f7ff ff8e 	bl	8003100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <SysTick_Config+0x40>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ea:	4b04      	ldr	r3, [pc, #16]	; (80031fc <SysTick_Config+0x40>)
 80031ec:	2207      	movs	r2, #7
 80031ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	e000e010 	.word	0xe000e010

08003200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ff29 	bl	8003060 <__NVIC_SetPriorityGrouping>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	4603      	mov	r3, r0
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003228:	f7ff ff3e 	bl	80030a8 <__NVIC_GetPriorityGrouping>
 800322c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	6978      	ldr	r0, [r7, #20]
 8003234:	f7ff ff8e 	bl	8003154 <NVIC_EncodePriority>
 8003238:	4602      	mov	r2, r0
 800323a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff5d 	bl	8003100 <__NVIC_SetPriority>
}
 8003246:	bf00      	nop
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	4603      	mov	r3, r0
 8003256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff31 	bl	80030c4 <__NVIC_EnableIRQ>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ffa2 	bl	80031bc <SysTick_Config>
 8003278:	4603      	mov	r3, r0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7ff f854 	bl	800233c <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e099      	b.n	80033d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c0:	e00f      	b.n	80032e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032c2:	f7ff f83b 	bl	800233c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b05      	cmp	r3, #5
 80032ce:	d908      	bls.n	80032e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2203      	movs	r2, #3
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e078      	b.n	80033d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e8      	bne.n	80032c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4b38      	ldr	r3, [pc, #224]	; (80033dc <HAL_DMA_Init+0x158>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800330e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	2b04      	cmp	r3, #4
 800333a:	d107      	bne.n	800334c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	4313      	orrs	r3, r2
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f023 0307 	bic.w	r3, r3, #7
 8003362:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	2b04      	cmp	r3, #4
 8003374:	d117      	bne.n	80033a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00e      	beq.n	80033a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fb01 	bl	8003990 <DMA_CheckFifoParam>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2240      	movs	r2, #64	; 0x40
 8003398:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033a2:	2301      	movs	r3, #1
 80033a4:	e016      	b.n	80033d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fab8 	bl	8003924 <DMA_CalcBaseAndBitshift>
 80033b4:	4603      	mov	r3, r0
 80033b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033bc:	223f      	movs	r2, #63	; 0x3f
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	f010803f 	.word	0xf010803f

080033e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_DMA_Start_IT+0x26>
 8003402:	2302      	movs	r3, #2
 8003404:	e040      	b.n	8003488 <HAL_DMA_Start_IT+0xa8>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d12f      	bne.n	800347a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2202      	movs	r2, #2
 800341e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fa4a 	bl	80038c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	223f      	movs	r2, #63	; 0x3f
 800343a:	409a      	lsls	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0216 	orr.w	r2, r2, #22
 800344e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0208 	orr.w	r2, r2, #8
 8003466:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e005      	b.n	8003486 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003482:	2302      	movs	r3, #2
 8003484:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003486:	7dfb      	ldrb	r3, [r7, #23]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800349e:	f7fe ff4d 	bl	800233c <HAL_GetTick>
 80034a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d008      	beq.n	80034c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2280      	movs	r2, #128	; 0x80
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e052      	b.n	8003568 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0216 	bic.w	r2, r2, #22
 80034d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <HAL_DMA_Abort+0x62>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0208 	bic.w	r2, r2, #8
 8003500:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003512:	e013      	b.n	800353c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003514:	f7fe ff12 	bl	800233c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b05      	cmp	r3, #5
 8003520:	d90c      	bls.n	800353c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2203      	movs	r2, #3
 800352c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e015      	b.n	8003568 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e4      	bne.n	8003514 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	223f      	movs	r2, #63	; 0x3f
 8003550:	409a      	lsls	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d004      	beq.n	800358e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e00c      	b.n	80035a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2205      	movs	r2, #5
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035c0:	4b8e      	ldr	r3, [pc, #568]	; (80037fc <HAL_DMA_IRQHandler+0x248>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a8e      	ldr	r2, [pc, #568]	; (8003800 <HAL_DMA_IRQHandler+0x24c>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	0a9b      	lsrs	r3, r3, #10
 80035cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	2208      	movs	r2, #8
 80035e0:	409a      	lsls	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01a      	beq.n	8003620 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0204 	bic.w	r2, r2, #4
 8003606:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	2208      	movs	r2, #8
 800360e:	409a      	lsls	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f043 0201 	orr.w	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	2201      	movs	r2, #1
 8003626:	409a      	lsls	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d012      	beq.n	8003656 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003642:	2201      	movs	r2, #1
 8003644:	409a      	lsls	r2, r3
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364e:	f043 0202 	orr.w	r2, r3, #2
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365a:	2204      	movs	r2, #4
 800365c:	409a      	lsls	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d012      	beq.n	800368c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00b      	beq.n	800368c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003678:	2204      	movs	r2, #4
 800367a:	409a      	lsls	r2, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	f043 0204 	orr.w	r2, r3, #4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003690:	2210      	movs	r2, #16
 8003692:	409a      	lsls	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d043      	beq.n	8003724 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d03c      	beq.n	8003724 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	2210      	movs	r2, #16
 80036b0:	409a      	lsls	r2, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d018      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d108      	bne.n	80036e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d024      	beq.n	8003724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
 80036e2:	e01f      	b.n	8003724 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01b      	beq.n	8003724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
 80036f4:	e016      	b.n	8003724 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d107      	bne.n	8003714 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0208 	bic.w	r2, r2, #8
 8003712:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	2220      	movs	r2, #32
 800372a:	409a      	lsls	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 808f 	beq.w	8003854 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8087 	beq.w	8003854 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374a:	2220      	movs	r2, #32
 800374c:	409a      	lsls	r2, r3
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b05      	cmp	r3, #5
 800375c:	d136      	bne.n	80037cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0216 	bic.w	r2, r2, #22
 800376c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800377c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <HAL_DMA_IRQHandler+0x1da>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0208 	bic.w	r2, r2, #8
 800379c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a2:	223f      	movs	r2, #63	; 0x3f
 80037a4:	409a      	lsls	r2, r3
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d07e      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
        }
        return;
 80037ca:	e079      	b.n	80038c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01d      	beq.n	8003816 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10d      	bne.n	8003804 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d031      	beq.n	8003854 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
 80037f8:	e02c      	b.n	8003854 <HAL_DMA_IRQHandler+0x2a0>
 80037fa:	bf00      	nop
 80037fc:	20000000 	.word	0x20000000
 8003800:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d023      	beq.n	8003854 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
 8003814:	e01e      	b.n	8003854 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10f      	bne.n	8003844 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0210 	bic.w	r2, r2, #16
 8003832:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003858:	2b00      	cmp	r3, #0
 800385a:	d032      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d022      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2205      	movs	r2, #5
 800386c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	3301      	adds	r3, #1
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	429a      	cmp	r2, r3
 800388a:	d307      	bcc.n	800389c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f2      	bne.n	8003880 <HAL_DMA_IRQHandler+0x2cc>
 800389a:	e000      	b.n	800389e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800389c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
 80038be:	e000      	b.n	80038c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80038c0:	bf00      	nop
    }
  }
}
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b40      	cmp	r3, #64	; 0x40
 80038f4:	d108      	bne.n	8003908 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003906:	e007      	b.n	8003918 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	60da      	str	r2, [r3, #12]
}
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	3b10      	subs	r3, #16
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <DMA_CalcBaseAndBitshift+0x64>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800393e:	4a13      	ldr	r2, [pc, #76]	; (800398c <DMA_CalcBaseAndBitshift+0x68>)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4413      	add	r3, r2
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d909      	bls.n	8003966 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800395a:	f023 0303 	bic.w	r3, r3, #3
 800395e:	1d1a      	adds	r2, r3, #4
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	659a      	str	r2, [r3, #88]	; 0x58
 8003964:	e007      	b.n	8003976 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800396e:	f023 0303 	bic.w	r3, r3, #3
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	aaaaaaab 	.word	0xaaaaaaab
 800398c:	0800eef8 	.word	0x0800eef8

08003990 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11f      	bne.n	80039ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d856      	bhi.n	8003a5e <DMA_CheckFifoParam+0xce>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <DMA_CheckFifoParam+0x28>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	080039db 	.word	0x080039db
 80039c0:	080039c9 	.word	0x080039c9
 80039c4:	08003a5f 	.word	0x08003a5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d046      	beq.n	8003a62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d8:	e043      	b.n	8003a62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039e2:	d140      	bne.n	8003a66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e8:	e03d      	b.n	8003a66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f2:	d121      	bne.n	8003a38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d837      	bhi.n	8003a6a <DMA_CheckFifoParam+0xda>
 80039fa:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <DMA_CheckFifoParam+0x70>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a17 	.word	0x08003a17
 8003a08:	08003a11 	.word	0x08003a11
 8003a0c:	08003a29 	.word	0x08003a29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      break;
 8003a14:	e030      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d025      	beq.n	8003a6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a26:	e022      	b.n	8003a6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a30:	d11f      	bne.n	8003a72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a36:	e01c      	b.n	8003a72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d903      	bls.n	8003a46 <DMA_CheckFifoParam+0xb6>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d003      	beq.n	8003a4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a44:	e018      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
      break;
 8003a4a:	e015      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00e      	beq.n	8003a76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5c:	e00b      	b.n	8003a76 <DMA_CheckFifoParam+0xe6>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e00a      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      break;
 8003a62:	bf00      	nop
 8003a64:	e008      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      break;
 8003a66:	bf00      	nop
 8003a68:	e006      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      break;
 8003a6a:	bf00      	nop
 8003a6c:	e004      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e002      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a72:	bf00      	nop
 8003a74:	e000      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      break;
 8003a76:	bf00      	nop
    }
  } 
  
  return status; 
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop

08003a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	; 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	e16b      	b.n	8003d7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	f040 815a 	bne.w	8003d76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d005      	beq.n	8003ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d130      	bne.n	8003b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b10:	2201      	movs	r2, #1
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 0201 	and.w	r2, r3, #1
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d017      	beq.n	8003b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	2203      	movs	r2, #3
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d123      	bne.n	8003bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	08da      	lsrs	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3208      	adds	r2, #8
 8003b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	08da      	lsrs	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3208      	adds	r2, #8
 8003bc6:	69b9      	ldr	r1, [r7, #24]
 8003bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0203 	and.w	r2, r3, #3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80b4 	beq.w	8003d76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	4b60      	ldr	r3, [pc, #384]	; (8003d94 <HAL_GPIO_Init+0x30c>)
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	4a5f      	ldr	r2, [pc, #380]	; (8003d94 <HAL_GPIO_Init+0x30c>)
 8003c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c1e:	4b5d      	ldr	r3, [pc, #372]	; (8003d94 <HAL_GPIO_Init+0x30c>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c2a:	4a5b      	ldr	r2, [pc, #364]	; (8003d98 <HAL_GPIO_Init+0x310>)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	089b      	lsrs	r3, r3, #2
 8003c30:	3302      	adds	r3, #2
 8003c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	220f      	movs	r2, #15
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a52      	ldr	r2, [pc, #328]	; (8003d9c <HAL_GPIO_Init+0x314>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d02b      	beq.n	8003cae <HAL_GPIO_Init+0x226>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a51      	ldr	r2, [pc, #324]	; (8003da0 <HAL_GPIO_Init+0x318>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d025      	beq.n	8003caa <HAL_GPIO_Init+0x222>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a50      	ldr	r2, [pc, #320]	; (8003da4 <HAL_GPIO_Init+0x31c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01f      	beq.n	8003ca6 <HAL_GPIO_Init+0x21e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4f      	ldr	r2, [pc, #316]	; (8003da8 <HAL_GPIO_Init+0x320>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d019      	beq.n	8003ca2 <HAL_GPIO_Init+0x21a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a4e      	ldr	r2, [pc, #312]	; (8003dac <HAL_GPIO_Init+0x324>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <HAL_GPIO_Init+0x216>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a4d      	ldr	r2, [pc, #308]	; (8003db0 <HAL_GPIO_Init+0x328>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00d      	beq.n	8003c9a <HAL_GPIO_Init+0x212>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a4c      	ldr	r2, [pc, #304]	; (8003db4 <HAL_GPIO_Init+0x32c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <HAL_GPIO_Init+0x20e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a4b      	ldr	r2, [pc, #300]	; (8003db8 <HAL_GPIO_Init+0x330>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_GPIO_Init+0x20a>
 8003c8e:	2307      	movs	r3, #7
 8003c90:	e00e      	b.n	8003cb0 <HAL_GPIO_Init+0x228>
 8003c92:	2308      	movs	r3, #8
 8003c94:	e00c      	b.n	8003cb0 <HAL_GPIO_Init+0x228>
 8003c96:	2306      	movs	r3, #6
 8003c98:	e00a      	b.n	8003cb0 <HAL_GPIO_Init+0x228>
 8003c9a:	2305      	movs	r3, #5
 8003c9c:	e008      	b.n	8003cb0 <HAL_GPIO_Init+0x228>
 8003c9e:	2304      	movs	r3, #4
 8003ca0:	e006      	b.n	8003cb0 <HAL_GPIO_Init+0x228>
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e004      	b.n	8003cb0 <HAL_GPIO_Init+0x228>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e002      	b.n	8003cb0 <HAL_GPIO_Init+0x228>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <HAL_GPIO_Init+0x228>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	f002 0203 	and.w	r2, r2, #3
 8003cb6:	0092      	lsls	r2, r2, #2
 8003cb8:	4093      	lsls	r3, r2
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cc0:	4935      	ldr	r1, [pc, #212]	; (8003d98 <HAL_GPIO_Init+0x310>)
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	089b      	lsrs	r3, r3, #2
 8003cc6:	3302      	adds	r3, #2
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cce:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <HAL_GPIO_Init+0x334>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cf2:	4a32      	ldr	r2, [pc, #200]	; (8003dbc <HAL_GPIO_Init+0x334>)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cf8:	4b30      	ldr	r3, [pc, #192]	; (8003dbc <HAL_GPIO_Init+0x334>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d1c:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <HAL_GPIO_Init+0x334>)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d22:	4b26      	ldr	r3, [pc, #152]	; (8003dbc <HAL_GPIO_Init+0x334>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d46:	4a1d      	ldr	r2, [pc, #116]	; (8003dbc <HAL_GPIO_Init+0x334>)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d4c:	4b1b      	ldr	r3, [pc, #108]	; (8003dbc <HAL_GPIO_Init+0x334>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d70:	4a12      	ldr	r2, [pc, #72]	; (8003dbc <HAL_GPIO_Init+0x334>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	f67f ae90 	bls.w	8003aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	3724      	adds	r7, #36	; 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40013800 	.word	0x40013800
 8003d9c:	40020000 	.word	0x40020000
 8003da0:	40020400 	.word	0x40020400
 8003da4:	40020800 	.word	0x40020800
 8003da8:	40020c00 	.word	0x40020c00
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40021400 	.word	0x40021400
 8003db4:	40021800 	.word	0x40021800
 8003db8:	40021c00 	.word	0x40021c00
 8003dbc:	40013c00 	.word	0x40013c00

08003dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	807b      	strh	r3, [r7, #2]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dd0:	787b      	ldrb	r3, [r7, #1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dd6:	887a      	ldrh	r2, [r7, #2]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ddc:	e003      	b.n	8003de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dde:	887b      	ldrh	r3, [r7, #2]
 8003de0:	041a      	lsls	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	619a      	str	r2, [r3, #24]
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e04:	887a      	ldrh	r2, [r7, #2]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	041a      	lsls	r2, r3, #16
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	43d9      	mvns	r1, r3
 8003e10:	887b      	ldrh	r3, [r7, #2]
 8003e12:	400b      	ands	r3, r1
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	619a      	str	r2, [r3, #24]
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e267      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d075      	beq.n	8003f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e46:	4b88      	ldr	r3, [pc, #544]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d00c      	beq.n	8003e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e52:	4b85      	ldr	r3, [pc, #532]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d112      	bne.n	8003e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5e:	4b82      	ldr	r3, [pc, #520]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6a:	d10b      	bne.n	8003e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	4b7e      	ldr	r3, [pc, #504]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d05b      	beq.n	8003f30 <HAL_RCC_OscConfig+0x108>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d157      	bne.n	8003f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e242      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8c:	d106      	bne.n	8003e9c <HAL_RCC_OscConfig+0x74>
 8003e8e:	4b76      	ldr	r3, [pc, #472]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a75      	ldr	r2, [pc, #468]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e01d      	b.n	8003ed8 <HAL_RCC_OscConfig+0xb0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x98>
 8003ea6:	4b70      	ldr	r3, [pc, #448]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a6f      	ldr	r2, [pc, #444]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	4b6d      	ldr	r3, [pc, #436]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a6c      	ldr	r2, [pc, #432]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e00b      	b.n	8003ed8 <HAL_RCC_OscConfig+0xb0>
 8003ec0:	4b69      	ldr	r3, [pc, #420]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a68      	ldr	r2, [pc, #416]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4b66      	ldr	r3, [pc, #408]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a65      	ldr	r2, [pc, #404]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d013      	beq.n	8003f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fe fa2c 	bl	800233c <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fe fa28 	bl	800233c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e207      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efa:	4b5b      	ldr	r3, [pc, #364]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0xc0>
 8003f06:	e014      	b.n	8003f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fe fa18 	bl	800233c <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fe fa14 	bl	800233c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e1f3      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f22:	4b51      	ldr	r3, [pc, #324]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0xe8>
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d063      	beq.n	8004006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f3e:	4b4a      	ldr	r3, [pc, #296]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f4a:	4b47      	ldr	r3, [pc, #284]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d11c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f56:	4b44      	ldr	r3, [pc, #272]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d116      	bne.n	8003f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f62:	4b41      	ldr	r3, [pc, #260]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_RCC_OscConfig+0x152>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d001      	beq.n	8003f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e1c7      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7a:	4b3b      	ldr	r3, [pc, #236]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4937      	ldr	r1, [pc, #220]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8e:	e03a      	b.n	8004006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f98:	4b34      	ldr	r3, [pc, #208]	; (800406c <HAL_RCC_OscConfig+0x244>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9e:	f7fe f9cd 	bl	800233c <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa6:	f7fe f9c9 	bl	800233c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e1a8      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc4:	4b28      	ldr	r3, [pc, #160]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4925      	ldr	r1, [pc, #148]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	600b      	str	r3, [r1, #0]
 8003fd8:	e015      	b.n	8004006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fda:	4b24      	ldr	r3, [pc, #144]	; (800406c <HAL_RCC_OscConfig+0x244>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fe f9ac 	bl	800233c <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe8:	f7fe f9a8 	bl	800233c <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e187      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d036      	beq.n	8004080 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d016      	beq.n	8004048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800401a:	4b15      	ldr	r3, [pc, #84]	; (8004070 <HAL_RCC_OscConfig+0x248>)
 800401c:	2201      	movs	r2, #1
 800401e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004020:	f7fe f98c 	bl	800233c <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004028:	f7fe f988 	bl	800233c <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e167      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCC_OscConfig+0x240>)
 800403c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x200>
 8004046:	e01b      	b.n	8004080 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_RCC_OscConfig+0x248>)
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404e:	f7fe f975 	bl	800233c <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004054:	e00e      	b.n	8004074 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004056:	f7fe f971 	bl	800233c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d907      	bls.n	8004074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e150      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
 8004068:	40023800 	.word	0x40023800
 800406c:	42470000 	.word	0x42470000
 8004070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004074:	4b88      	ldr	r3, [pc, #544]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 8004076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1ea      	bne.n	8004056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8097 	beq.w	80041bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004092:	4b81      	ldr	r3, [pc, #516]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10f      	bne.n	80040be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	4b7d      	ldr	r3, [pc, #500]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	4a7c      	ldr	r2, [pc, #496]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 80040a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ac:	6413      	str	r3, [r2, #64]	; 0x40
 80040ae:	4b7a      	ldr	r3, [pc, #488]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040be:	4b77      	ldr	r3, [pc, #476]	; (800429c <HAL_RCC_OscConfig+0x474>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d118      	bne.n	80040fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ca:	4b74      	ldr	r3, [pc, #464]	; (800429c <HAL_RCC_OscConfig+0x474>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a73      	ldr	r2, [pc, #460]	; (800429c <HAL_RCC_OscConfig+0x474>)
 80040d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d6:	f7fe f931 	bl	800233c <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040de:	f7fe f92d 	bl	800233c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e10c      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f0:	4b6a      	ldr	r3, [pc, #424]	; (800429c <HAL_RCC_OscConfig+0x474>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d106      	bne.n	8004112 <HAL_RCC_OscConfig+0x2ea>
 8004104:	4b64      	ldr	r3, [pc, #400]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	4a63      	ldr	r2, [pc, #396]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6713      	str	r3, [r2, #112]	; 0x70
 8004110:	e01c      	b.n	800414c <HAL_RCC_OscConfig+0x324>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b05      	cmp	r3, #5
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0x30c>
 800411a:	4b5f      	ldr	r3, [pc, #380]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	4a5e      	ldr	r2, [pc, #376]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	6713      	str	r3, [r2, #112]	; 0x70
 8004126:	4b5c      	ldr	r3, [pc, #368]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	4a5b      	ldr	r2, [pc, #364]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	6713      	str	r3, [r2, #112]	; 0x70
 8004132:	e00b      	b.n	800414c <HAL_RCC_OscConfig+0x324>
 8004134:	4b58      	ldr	r3, [pc, #352]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	4a57      	ldr	r2, [pc, #348]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 800413a:	f023 0301 	bic.w	r3, r3, #1
 800413e:	6713      	str	r3, [r2, #112]	; 0x70
 8004140:	4b55      	ldr	r3, [pc, #340]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 8004142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004144:	4a54      	ldr	r2, [pc, #336]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 8004146:	f023 0304 	bic.w	r3, r3, #4
 800414a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d015      	beq.n	8004180 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004154:	f7fe f8f2 	bl	800233c <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415a:	e00a      	b.n	8004172 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800415c:	f7fe f8ee 	bl	800233c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e0cb      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004172:	4b49      	ldr	r3, [pc, #292]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0ee      	beq.n	800415c <HAL_RCC_OscConfig+0x334>
 800417e:	e014      	b.n	80041aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004180:	f7fe f8dc 	bl	800233c <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004186:	e00a      	b.n	800419e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fe f8d8 	bl	800233c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e0b5      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419e:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1ee      	bne.n	8004188 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b0:	4b39      	ldr	r3, [pc, #228]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	4a38      	ldr	r2, [pc, #224]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 80041b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80a1 	beq.w	8004308 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041c6:	4b34      	ldr	r3, [pc, #208]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d05c      	beq.n	800428c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d141      	bne.n	800425e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041da:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <HAL_RCC_OscConfig+0x478>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7fe f8ac 	bl	800233c <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fe f8a8 	bl	800233c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e087      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fa:	4b27      	ldr	r3, [pc, #156]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	019b      	lsls	r3, r3, #6
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	3b01      	subs	r3, #1
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	061b      	lsls	r3, r3, #24
 800422a:	491b      	ldr	r1, [pc, #108]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 800422c:	4313      	orrs	r3, r2
 800422e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <HAL_RCC_OscConfig+0x478>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004236:	f7fe f881 	bl	800233c <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800423e:	f7fe f87d 	bl	800233c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e05c      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x416>
 800425c:	e054      	b.n	8004308 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425e:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <HAL_RCC_OscConfig+0x478>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fe f86a 	bl	800233c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800426c:	f7fe f866 	bl	800233c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e045      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_OscConfig+0x470>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x444>
 800428a:	e03d      	b.n	8004308 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e038      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
 8004298:	40023800 	.word	0x40023800
 800429c:	40007000 	.word	0x40007000
 80042a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <HAL_RCC_OscConfig+0x4ec>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d028      	beq.n	8004304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d121      	bne.n	8004304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d11a      	bne.n	8004304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042d4:	4013      	ands	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042dc:	4293      	cmp	r3, r2
 80042de:	d111      	bne.n	8004304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	085b      	lsrs	r3, r3, #1
 80042ec:	3b01      	subs	r3, #1
 80042ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40023800 	.word	0x40023800

08004318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0cc      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800432c:	4b68      	ldr	r3, [pc, #416]	; (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d90c      	bls.n	8004354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433a:	4b65      	ldr	r3, [pc, #404]	; (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b63      	ldr	r3, [pc, #396]	; (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0b8      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d020      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800436c:	4b59      	ldr	r3, [pc, #356]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4a58      	ldr	r2, [pc, #352]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004384:	4b53      	ldr	r3, [pc, #332]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4a52      	ldr	r2, [pc, #328]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800438e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004390:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	494d      	ldr	r1, [pc, #308]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d044      	beq.n	8004438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b6:	4b47      	ldr	r3, [pc, #284]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d119      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e07f      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d003      	beq.n	80043d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d107      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d6:	4b3f      	ldr	r3, [pc, #252]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e06f      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e6:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e067      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043f6:	4b37      	ldr	r3, [pc, #220]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f023 0203 	bic.w	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	4934      	ldr	r1, [pc, #208]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	4313      	orrs	r3, r2
 8004406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004408:	f7fd ff98 	bl	800233c <HAL_GetTick>
 800440c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440e:	e00a      	b.n	8004426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004410:	f7fd ff94 	bl	800233c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f241 3288 	movw	r2, #5000	; 0x1388
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e04f      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004426:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 020c 	and.w	r2, r3, #12
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	429a      	cmp	r2, r3
 8004436:	d1eb      	bne.n	8004410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d20c      	bcs.n	8004460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004446:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e032      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4916      	ldr	r1, [pc, #88]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800448a:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	490e      	ldr	r1, [pc, #56]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800449e:	f000 f821 	bl	80044e4 <HAL_RCC_GetSysClockFreq>
 80044a2:	4602      	mov	r2, r0
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	490a      	ldr	r1, [pc, #40]	; (80044d8 <HAL_RCC_ClockConfig+0x1c0>)
 80044b0:	5ccb      	ldrb	r3, [r1, r3]
 80044b2:	fa22 f303 	lsr.w	r3, r2, r3
 80044b6:	4a09      	ldr	r2, [pc, #36]	; (80044dc <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <HAL_RCC_ClockConfig+0x1c8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fd fef8 	bl	80022b4 <HAL_InitTick>

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40023c00 	.word	0x40023c00
 80044d4:	40023800 	.word	0x40023800
 80044d8:	0800eee0 	.word	0x0800eee0
 80044dc:	20000000 	.word	0x20000000
 80044e0:	20000004 	.word	0x20000004

080044e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e8:	b090      	sub	sp, #64	; 0x40
 80044ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	637b      	str	r3, [r7, #52]	; 0x34
 80044f0:	2300      	movs	r3, #0
 80044f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044f4:	2300      	movs	r3, #0
 80044f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044fc:	4b59      	ldr	r3, [pc, #356]	; (8004664 <HAL_RCC_GetSysClockFreq+0x180>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	2b08      	cmp	r3, #8
 8004506:	d00d      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0x40>
 8004508:	2b08      	cmp	r3, #8
 800450a:	f200 80a1 	bhi.w	8004650 <HAL_RCC_GetSysClockFreq+0x16c>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0x34>
 8004512:	2b04      	cmp	r3, #4
 8004514:	d003      	beq.n	800451e <HAL_RCC_GetSysClockFreq+0x3a>
 8004516:	e09b      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004518:	4b53      	ldr	r3, [pc, #332]	; (8004668 <HAL_RCC_GetSysClockFreq+0x184>)
 800451a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800451c:	e09b      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800451e:	4b53      	ldr	r3, [pc, #332]	; (800466c <HAL_RCC_GetSysClockFreq+0x188>)
 8004520:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004522:	e098      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004524:	4b4f      	ldr	r3, [pc, #316]	; (8004664 <HAL_RCC_GetSysClockFreq+0x180>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800452c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800452e:	4b4d      	ldr	r3, [pc, #308]	; (8004664 <HAL_RCC_GetSysClockFreq+0x180>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d028      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453a:	4b4a      	ldr	r3, [pc, #296]	; (8004664 <HAL_RCC_GetSysClockFreq+0x180>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	099b      	lsrs	r3, r3, #6
 8004540:	2200      	movs	r2, #0
 8004542:	623b      	str	r3, [r7, #32]
 8004544:	627a      	str	r2, [r7, #36]	; 0x24
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800454c:	2100      	movs	r1, #0
 800454e:	4b47      	ldr	r3, [pc, #284]	; (800466c <HAL_RCC_GetSysClockFreq+0x188>)
 8004550:	fb03 f201 	mul.w	r2, r3, r1
 8004554:	2300      	movs	r3, #0
 8004556:	fb00 f303 	mul.w	r3, r0, r3
 800455a:	4413      	add	r3, r2
 800455c:	4a43      	ldr	r2, [pc, #268]	; (800466c <HAL_RCC_GetSysClockFreq+0x188>)
 800455e:	fba0 1202 	umull	r1, r2, r0, r2
 8004562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004564:	460a      	mov	r2, r1
 8004566:	62ba      	str	r2, [r7, #40]	; 0x28
 8004568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800456a:	4413      	add	r3, r2
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800456e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004570:	2200      	movs	r2, #0
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	61fa      	str	r2, [r7, #28]
 8004576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800457a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800457e:	f7fc fb83 	bl	8000c88 <__aeabi_uldivmod>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4613      	mov	r3, r2
 8004588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458a:	e053      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800458c:	4b35      	ldr	r3, [pc, #212]	; (8004664 <HAL_RCC_GetSysClockFreq+0x180>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	099b      	lsrs	r3, r3, #6
 8004592:	2200      	movs	r2, #0
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	617a      	str	r2, [r7, #20]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800459e:	f04f 0b00 	mov.w	fp, #0
 80045a2:	4652      	mov	r2, sl
 80045a4:	465b      	mov	r3, fp
 80045a6:	f04f 0000 	mov.w	r0, #0
 80045aa:	f04f 0100 	mov.w	r1, #0
 80045ae:	0159      	lsls	r1, r3, #5
 80045b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045b4:	0150      	lsls	r0, r2, #5
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	ebb2 080a 	subs.w	r8, r2, sl
 80045be:	eb63 090b 	sbc.w	r9, r3, fp
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045d6:	ebb2 0408 	subs.w	r4, r2, r8
 80045da:	eb63 0509 	sbc.w	r5, r3, r9
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	00eb      	lsls	r3, r5, #3
 80045e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ec:	00e2      	lsls	r2, r4, #3
 80045ee:	4614      	mov	r4, r2
 80045f0:	461d      	mov	r5, r3
 80045f2:	eb14 030a 	adds.w	r3, r4, sl
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	eb45 030b 	adc.w	r3, r5, fp
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800460a:	4629      	mov	r1, r5
 800460c:	028b      	lsls	r3, r1, #10
 800460e:	4621      	mov	r1, r4
 8004610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004614:	4621      	mov	r1, r4
 8004616:	028a      	lsls	r2, r1, #10
 8004618:	4610      	mov	r0, r2
 800461a:	4619      	mov	r1, r3
 800461c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461e:	2200      	movs	r2, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	60fa      	str	r2, [r7, #12]
 8004624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004628:	f7fc fb2e 	bl	8000c88 <__aeabi_uldivmod>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4613      	mov	r3, r2
 8004632:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCC_GetSysClockFreq+0x180>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	0c1b      	lsrs	r3, r3, #16
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	3301      	adds	r3, #1
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800464e:	e002      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <HAL_RCC_GetSysClockFreq+0x184>)
 8004652:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004658:	4618      	mov	r0, r3
 800465a:	3740      	adds	r7, #64	; 0x40
 800465c:	46bd      	mov	sp, r7
 800465e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004662:	bf00      	nop
 8004664:	40023800 	.word	0x40023800
 8004668:	00f42400 	.word	0x00f42400
 800466c:	00b71b00 	.word	0x00b71b00

08004670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004674:	4b03      	ldr	r3, [pc, #12]	; (8004684 <HAL_RCC_GetHCLKFreq+0x14>)
 8004676:	681b      	ldr	r3, [r3, #0]
}
 8004678:	4618      	mov	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000000 	.word	0x20000000

08004688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800468c:	f7ff fff0 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 8004690:	4602      	mov	r2, r0
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	0a9b      	lsrs	r3, r3, #10
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	4903      	ldr	r1, [pc, #12]	; (80046ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800469e:	5ccb      	ldrb	r3, [r1, r3]
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40023800 	.word	0x40023800
 80046ac:	0800eef0 	.word	0x0800eef0

080046b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046b4:	f7ff ffdc 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	0b5b      	lsrs	r3, r3, #13
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	4903      	ldr	r1, [pc, #12]	; (80046d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40023800 	.word	0x40023800
 80046d4:	0800eef0 	.word	0x0800eef0

080046d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e07b      	b.n	80047e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d108      	bne.n	8004704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046fa:	d009      	beq.n	8004710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	61da      	str	r2, [r3, #28]
 8004702:	e005      	b.n	8004710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fd f828 	bl	8001780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004746:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	ea42 0103 	orr.w	r1, r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	0c1b      	lsrs	r3, r3, #16
 80047ae:	f003 0104 	and.w	r1, r3, #4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	f003 0210 	and.w	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b088      	sub	sp, #32
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	603b      	str	r3, [r7, #0]
 80047f6:	4613      	mov	r3, r2
 80047f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_SPI_Transmit+0x22>
 8004808:	2302      	movs	r3, #2
 800480a:	e126      	b.n	8004a5a <HAL_SPI_Transmit+0x270>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004814:	f7fd fd92 	bl	800233c <HAL_GetTick>
 8004818:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d002      	beq.n	8004830 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800482a:	2302      	movs	r3, #2
 800482c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800482e:	e10b      	b.n	8004a48 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_SPI_Transmit+0x52>
 8004836:	88fb      	ldrh	r3, [r7, #6]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004840:	e102      	b.n	8004a48 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2203      	movs	r2, #3
 8004846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	88fa      	ldrh	r2, [r7, #6]
 800485a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	88fa      	ldrh	r2, [r7, #6]
 8004860:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004888:	d10f      	bne.n	80048aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004898:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	d007      	beq.n	80048c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d0:	d14b      	bne.n	800496a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_SPI_Transmit+0xf6>
 80048da:	8afb      	ldrh	r3, [r7, #22]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d13e      	bne.n	800495e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	881a      	ldrh	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	1c9a      	adds	r2, r3, #2
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004904:	e02b      	b.n	800495e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b02      	cmp	r3, #2
 8004912:	d112      	bne.n	800493a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	881a      	ldrh	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	1c9a      	adds	r2, r3, #2
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	86da      	strh	r2, [r3, #54]	; 0x36
 8004938:	e011      	b.n	800495e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800493a:	f7fd fcff 	bl	800233c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d803      	bhi.n	8004952 <HAL_SPI_Transmit+0x168>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d102      	bne.n	8004958 <HAL_SPI_Transmit+0x16e>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800495c:	e074      	b.n	8004a48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ce      	bne.n	8004906 <HAL_SPI_Transmit+0x11c>
 8004968:	e04c      	b.n	8004a04 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Transmit+0x18e>
 8004972:	8afb      	ldrh	r3, [r7, #22]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d140      	bne.n	80049fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	7812      	ldrb	r2, [r2, #0]
 8004984:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800499e:	e02c      	b.n	80049fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d113      	bne.n	80049d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80049d4:	e011      	b.n	80049fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d6:	f7fd fcb1 	bl	800233c <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d803      	bhi.n	80049ee <HAL_SPI_Transmit+0x204>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d102      	bne.n	80049f4 <HAL_SPI_Transmit+0x20a>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049f8:	e026      	b.n	8004a48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1cd      	bne.n	80049a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	6839      	ldr	r1, [r7, #0]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fcf7 	bl	80053fc <SPI_EndRxTxTransaction>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e000      	b.n	8004a48 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b088      	sub	sp, #32
 8004a66:	af02      	add	r7, sp, #8
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a7e:	d112      	bne.n	8004aa6 <HAL_SPI_Receive+0x44>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10e      	bne.n	8004aa6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	4613      	mov	r3, r2
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f8f1 	bl	8004c84 <HAL_SPI_TransmitReceive>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	e0ea      	b.n	8004c7c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_SPI_Receive+0x52>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e0e3      	b.n	8004c7c <HAL_SPI_Receive+0x21a>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004abc:	f7fd fc3e 	bl	800233c <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d002      	beq.n	8004ad4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ad2:	e0ca      	b.n	8004c6a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_SPI_Receive+0x7e>
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ae4:	e0c1      	b.n	8004c6a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b2c:	d10f      	bne.n	8004b4e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d007      	beq.n	8004b6c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d162      	bne.n	8004c3a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b74:	e02e      	b.n	8004bd4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d115      	bne.n	8004bb0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f103 020c 	add.w	r2, r3, #12
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	7812      	ldrb	r2, [r2, #0]
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bae:	e011      	b.n	8004bd4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb0:	f7fd fbc4 	bl	800233c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d803      	bhi.n	8004bc8 <HAL_SPI_Receive+0x166>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d102      	bne.n	8004bce <HAL_SPI_Receive+0x16c>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bd2:	e04a      	b.n	8004c6a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1cb      	bne.n	8004b76 <HAL_SPI_Receive+0x114>
 8004bde:	e031      	b.n	8004c44 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d113      	bne.n	8004c16 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	b292      	uxth	r2, r2
 8004bfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	1c9a      	adds	r2, r3, #2
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c14:	e011      	b.n	8004c3a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c16:	f7fd fb91 	bl	800233c <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d803      	bhi.n	8004c2e <HAL_SPI_Receive+0x1cc>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d102      	bne.n	8004c34 <HAL_SPI_Receive+0x1d2>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c38:	e017      	b.n	8004c6a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1cd      	bne.n	8004be0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fb71 	bl	8005330 <SPI_EndRxTransaction>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
 8004c66:	e000      	b.n	8004c6a <HAL_SPI_Receive+0x208>
  }

error :
 8004c68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08c      	sub	sp, #48	; 0x30
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c92:	2301      	movs	r3, #1
 8004c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x26>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e18a      	b.n	8004fc0 <HAL_SPI_TransmitReceive+0x33c>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb2:	f7fd fb43 	bl	800233c <HAL_GetTick>
 8004cb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d00f      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0x70>
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cda:	d107      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d103      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x68>
 8004ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d003      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cf2:	e15b      	b.n	8004fac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_SPI_TransmitReceive+0x82>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_SPI_TransmitReceive+0x82>
 8004d00:	887b      	ldrh	r3, [r7, #2]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d0c:	e14e      	b.n	8004fac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d003      	beq.n	8004d22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2205      	movs	r2, #5
 8004d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	887a      	ldrh	r2, [r7, #2]
 8004d32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	887a      	ldrh	r2, [r7, #2]
 8004d4a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	d007      	beq.n	8004d76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7e:	d178      	bne.n	8004e72 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_SPI_TransmitReceive+0x10a>
 8004d88:	8b7b      	ldrh	r3, [r7, #26]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d166      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	881a      	ldrh	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	1c9a      	adds	r2, r3, #2
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004db2:	e053      	b.n	8004e5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d11b      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x176>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d016      	beq.n	8004dfa <HAL_SPI_TransmitReceive+0x176>
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d113      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	881a      	ldrh	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	1c9a      	adds	r2, r3, #2
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d119      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x1b8>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d014      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	b292      	uxth	r2, r2
 8004e1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e3c:	f7fd fa7e 	bl	800233c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d807      	bhi.n	8004e5c <HAL_SPI_TransmitReceive+0x1d8>
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d003      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e5a:	e0a7      	b.n	8004fac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1a6      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x130>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1a1      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x130>
 8004e70:	e07c      	b.n	8004f6c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x1fc>
 8004e7a:	8b7b      	ldrh	r3, [r7, #26]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d16b      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	330c      	adds	r3, #12
 8004e8a:	7812      	ldrb	r2, [r2, #0]
 8004e8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea6:	e057      	b.n	8004f58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d11c      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x26c>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d017      	beq.n	8004ef0 <HAL_SPI_TransmitReceive+0x26c>
 8004ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d114      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d119      	bne.n	8004f32 <HAL_SPI_TransmitReceive+0x2ae>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d014      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f32:	f7fd fa03 	bl	800233c <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d803      	bhi.n	8004f4a <HAL_SPI_TransmitReceive+0x2c6>
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d102      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x2cc>
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d103      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f56:	e029      	b.n	8004fac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1a2      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x224>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d19d      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fa43 	bl	80053fc <SPI_EndRxTxTransaction>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d006      	beq.n	8004f8a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f88:	e010      	b.n	8004fac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	e000      	b.n	8004fac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004faa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3730      	adds	r7, #48	; 0x30
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10f      	bne.n	800500c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	099b      	lsrs	r3, r3, #6
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
    return;
 800500a:	e0d7      	b.n	80051bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_SPI_IRQHandler+0x66>
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	09db      	lsrs	r3, r3, #7
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
    return;
 800502c:	e0c6      	b.n	80051bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10c      	bne.n	8005054 <HAL_SPI_IRQHandler+0x8c>
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	099b      	lsrs	r3, r3, #6
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	0a1b      	lsrs	r3, r3, #8
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 80b4 	beq.w	80051bc <HAL_SPI_IRQHandler+0x1f4>
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80ad 	beq.w	80051bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	099b      	lsrs	r3, r3, #6
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d023      	beq.n	80050b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b03      	cmp	r3, #3
 8005078:	d011      	beq.n	800509e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507e:	f043 0204 	orr.w	r2, r3, #4
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	e00b      	b.n	80050b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	693b      	ldr	r3, [r7, #16]
        return;
 80050b4:	e082      	b.n	80051bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d014      	beq.n	80050ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c6:	f043 0201 	orr.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	0a1b      	lsrs	r3, r3, #8
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00c      	beq.n	8005112 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fc:	f043 0208 	orr.w	r2, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005104:	2300      	movs	r3, #0
 8005106:	60bb      	str	r3, [r7, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	2b00      	cmp	r3, #0
 8005118:	d04f      	beq.n	80051ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005128:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <HAL_SPI_IRQHandler+0x17e>
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d034      	beq.n	80051b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0203 	bic.w	r2, r2, #3
 8005154:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d011      	beq.n	8005182 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005162:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <HAL_SPI_IRQHandler+0x1fc>)
 8005164:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	4618      	mov	r0, r3
 800516c:	f7fe fa00 	bl	8003570 <HAL_DMA_Abort_IT>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518e:	4a0d      	ldr	r2, [pc, #52]	; (80051c4 <HAL_SPI_IRQHandler+0x1fc>)
 8005190:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005196:	4618      	mov	r0, r3
 8005198:	f7fe f9ea 	bl	8003570 <HAL_DMA_Abort_IT>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80051ae:	e003      	b.n	80051b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f809 	bl	80051c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80051b6:	e000      	b.n	80051ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80051b8:	bf00      	nop
    return;
 80051ba:	bf00      	nop
  }
}
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	080051f9 	.word	0x080051f9

080051c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ea:	b2db      	uxtb	r3, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7ff ffd8 	bl	80051c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005218:	bf00      	nop
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	4613      	mov	r3, r2
 800522e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005230:	f7fd f884 	bl	800233c <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	4413      	add	r3, r2
 800523e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005240:	f7fd f87c 	bl	800233c <HAL_GetTick>
 8005244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005246:	4b39      	ldr	r3, [pc, #228]	; (800532c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	015b      	lsls	r3, r3, #5
 800524c:	0d1b      	lsrs	r3, r3, #20
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	fb02 f303 	mul.w	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005256:	e054      	b.n	8005302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	d050      	beq.n	8005302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005260:	f7fd f86c 	bl	800233c <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	429a      	cmp	r2, r3
 800526e:	d902      	bls.n	8005276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d13d      	bne.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800528e:	d111      	bne.n	80052b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005298:	d004      	beq.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a2:	d107      	bne.n	80052b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052bc:	d10f      	bne.n	80052de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e017      	b.n	8005322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	3b01      	subs	r3, #1
 8005300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4013      	ands	r3, r2
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	bf0c      	ite	eq
 8005312:	2301      	moveq	r3, #1
 8005314:	2300      	movne	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	461a      	mov	r2, r3
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	429a      	cmp	r2, r3
 800531e:	d19b      	bne.n	8005258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000000 	.word	0x20000000

08005330 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005344:	d111      	bne.n	800536a <SPI_EndRxTransaction+0x3a>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800534e:	d004      	beq.n	800535a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005358:	d107      	bne.n	800536a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005368:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005372:	d12a      	bne.n	80053ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800537c:	d012      	beq.n	80053a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2200      	movs	r2, #0
 8005386:	2180      	movs	r1, #128	; 0x80
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff ff49 	bl	8005220 <SPI_WaitFlagStateUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d02d      	beq.n	80053f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005398:	f043 0220 	orr.w	r2, r3, #32
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e026      	b.n	80053f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2200      	movs	r2, #0
 80053ac:	2101      	movs	r1, #1
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff ff36 	bl	8005220 <SPI_WaitFlagStateUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01a      	beq.n	80053f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	f043 0220 	orr.w	r2, r3, #32
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e013      	b.n	80053f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2200      	movs	r2, #0
 80053d2:	2101      	movs	r1, #1
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7ff ff23 	bl	8005220 <SPI_WaitFlagStateUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e4:	f043 0220 	orr.w	r2, r3, #32
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e000      	b.n	80053f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005408:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <SPI_EndRxTxTransaction+0x7c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1b      	ldr	r2, [pc, #108]	; (800547c <SPI_EndRxTxTransaction+0x80>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	0d5b      	lsrs	r3, r3, #21
 8005414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005418:	fb02 f303 	mul.w	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005426:	d112      	bne.n	800544e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2200      	movs	r2, #0
 8005430:	2180      	movs	r1, #128	; 0x80
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fef4 	bl	8005220 <SPI_WaitFlagStateUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d016      	beq.n	800546c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e00f      	b.n	800546e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	3b01      	subs	r3, #1
 8005458:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b80      	cmp	r3, #128	; 0x80
 8005466:	d0f2      	beq.n	800544e <SPI_EndRxTxTransaction+0x52>
 8005468:	e000      	b.n	800546c <SPI_EndRxTxTransaction+0x70>
        break;
 800546a:	bf00      	nop
  }

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000000 	.word	0x20000000
 800547c:	165e9f81 	.word	0x165e9f81

08005480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e041      	b.n	8005516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fc fca2 	bl	8001df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f000 fa96 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d001      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e04e      	b.n	80055d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a23      	ldr	r2, [pc, #140]	; (80055e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d022      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005562:	d01d      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1f      	ldr	r2, [pc, #124]	; (80055e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d018      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1e      	ldr	r2, [pc, #120]	; (80055ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1c      	ldr	r2, [pc, #112]	; (80055f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00e      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1b      	ldr	r2, [pc, #108]	; (80055f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d009      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a19      	ldr	r2, [pc, #100]	; (80055f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x80>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a18      	ldr	r2, [pc, #96]	; (80055fc <HAL_TIM_Base_Start_IT+0xdc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d111      	bne.n	80055c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b06      	cmp	r3, #6
 80055b0:	d010      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0201 	orr.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c2:	e007      	b.n	80055d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800
 80055f0:	40000c00 	.word	0x40000c00
 80055f4:	40010400 	.word	0x40010400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40001800 	.word	0x40001800

08005600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b02      	cmp	r3, #2
 8005614:	d122      	bne.n	800565c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b02      	cmp	r3, #2
 8005622:	d11b      	bne.n	800565c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0202 	mvn.w	r2, #2
 800562c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9b5 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f9a7 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f9b8 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b04      	cmp	r3, #4
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b04      	cmp	r3, #4
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0204 	mvn.w	r2, #4
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2202      	movs	r2, #2
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f98b 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f97d 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f98e 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0208 	mvn.w	r2, #8
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2204      	movs	r2, #4
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f961 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f953 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f964 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b10      	cmp	r3, #16
 8005710:	d122      	bne.n	8005758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0310 	and.w	r3, r3, #16
 800571c:	2b10      	cmp	r3, #16
 800571e:	d11b      	bne.n	8005758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0210 	mvn.w	r2, #16
 8005728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2208      	movs	r2, #8
 800572e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f937 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 8005744:	e005      	b.n	8005752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f929 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f93a 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b01      	cmp	r3, #1
 8005764:	d10e      	bne.n	8005784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b01      	cmp	r3, #1
 8005772:	d107      	bne.n	8005784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0201 	mvn.w	r2, #1
 800577c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fc f9b2 	bl	8001ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578e:	2b80      	cmp	r3, #128	; 0x80
 8005790:	d10e      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579c:	2b80      	cmp	r3, #128	; 0x80
 800579e:	d107      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fae0 	bl	8005d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d10e      	bne.n	80057dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	d107      	bne.n	80057dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f8ff 	bl	80059da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d10e      	bne.n	8005808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d107      	bne.n	8005808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0220 	mvn.w	r2, #32
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 faaa 	bl	8005d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIM_ConfigClockSource+0x1c>
 8005828:	2302      	movs	r3, #2
 800582a:	e0b4      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x186>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800584a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005864:	d03e      	beq.n	80058e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586a:	f200 8087 	bhi.w	800597c <HAL_TIM_ConfigClockSource+0x16c>
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005872:	f000 8086 	beq.w	8005982 <HAL_TIM_ConfigClockSource+0x172>
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587a:	d87f      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b70      	cmp	r3, #112	; 0x70
 800587e:	d01a      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005880:	2b70      	cmp	r3, #112	; 0x70
 8005882:	d87b      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b60      	cmp	r3, #96	; 0x60
 8005886:	d050      	beq.n	800592a <HAL_TIM_ConfigClockSource+0x11a>
 8005888:	2b60      	cmp	r3, #96	; 0x60
 800588a:	d877      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b50      	cmp	r3, #80	; 0x50
 800588e:	d03c      	beq.n	800590a <HAL_TIM_ConfigClockSource+0xfa>
 8005890:	2b50      	cmp	r3, #80	; 0x50
 8005892:	d873      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	d058      	beq.n	800594a <HAL_TIM_ConfigClockSource+0x13a>
 8005898:	2b40      	cmp	r3, #64	; 0x40
 800589a:	d86f      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b30      	cmp	r3, #48	; 0x30
 800589e:	d064      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x15a>
 80058a0:	2b30      	cmp	r3, #48	; 0x30
 80058a2:	d86b      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d060      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x15a>
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d867      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d05c      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x15a>
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d05a      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x15a>
 80058b4:	e062      	b.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6899      	ldr	r1, [r3, #8]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f000 f9ad 	bl	8005c24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	609a      	str	r2, [r3, #8]
      break;
 80058e2:	e04f      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	6899      	ldr	r1, [r3, #8]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f000 f996 	bl	8005c24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005906:	609a      	str	r2, [r3, #8]
      break;
 8005908:	e03c      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	6859      	ldr	r1, [r3, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	461a      	mov	r2, r3
 8005918:	f000 f90a 	bl	8005b30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2150      	movs	r1, #80	; 0x50
 8005922:	4618      	mov	r0, r3
 8005924:	f000 f963 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 8005928:	e02c      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6859      	ldr	r1, [r3, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	461a      	mov	r2, r3
 8005938:	f000 f929 	bl	8005b8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2160      	movs	r1, #96	; 0x60
 8005942:	4618      	mov	r0, r3
 8005944:	f000 f953 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 8005948:	e01c      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6859      	ldr	r1, [r3, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	461a      	mov	r2, r3
 8005958:	f000 f8ea 	bl	8005b30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2140      	movs	r1, #64	; 0x40
 8005962:	4618      	mov	r0, r3
 8005964:	f000 f943 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 8005968:	e00c      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f000 f93a 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 800597a:	e003      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	73fb      	strb	r3, [r7, #15]
      break;
 8005980:	e000      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a40      	ldr	r2, [pc, #256]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d013      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d00f      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3d      	ldr	r2, [pc, #244]	; (8005b08 <TIM_Base_SetConfig+0x118>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a3c      	ldr	r2, [pc, #240]	; (8005b0c <TIM_Base_SetConfig+0x11c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a3b      	ldr	r2, [pc, #236]	; (8005b10 <TIM_Base_SetConfig+0x120>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a3a      	ldr	r2, [pc, #232]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d108      	bne.n	8005a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2f      	ldr	r2, [pc, #188]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d02b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a50:	d027      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <TIM_Base_SetConfig+0x118>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d023      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2b      	ldr	r2, [pc, #172]	; (8005b0c <TIM_Base_SetConfig+0x11c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2a      	ldr	r2, [pc, #168]	; (8005b10 <TIM_Base_SetConfig+0x120>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d017      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a28      	ldr	r2, [pc, #160]	; (8005b18 <TIM_Base_SetConfig+0x128>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a27      	ldr	r2, [pc, #156]	; (8005b1c <TIM_Base_SetConfig+0x12c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a26      	ldr	r2, [pc, #152]	; (8005b20 <TIM_Base_SetConfig+0x130>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	; (8005b24 <TIM_Base_SetConfig+0x134>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a24      	ldr	r2, [pc, #144]	; (8005b28 <TIM_Base_SetConfig+0x138>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a23      	ldr	r2, [pc, #140]	; (8005b2c <TIM_Base_SetConfig+0x13c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d108      	bne.n	8005ab4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_Base_SetConfig+0xf8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a0c      	ldr	r2, [pc, #48]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d103      	bne.n	8005af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	615a      	str	r2, [r3, #20]
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800
 8005b10:	40000c00 	.word	0x40000c00
 8005b14:	40010400 	.word	0x40010400
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40014400 	.word	0x40014400
 8005b20:	40014800 	.word	0x40014800
 8005b24:	40001800 	.word	0x40001800
 8005b28:	40001c00 	.word	0x40001c00
 8005b2c:	40002000 	.word	0x40002000

08005b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0201 	bic.w	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f023 030a 	bic.w	r3, r3, #10
 8005b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	621a      	str	r2, [r3, #32]
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b087      	sub	sp, #28
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	f023 0210 	bic.w	r2, r3, #16
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	031b      	lsls	r3, r3, #12
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f043 0307 	orr.w	r3, r3, #7
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	609a      	str	r2, [r3, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	021a      	lsls	r2, r3, #8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e05a      	b.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a21      	ldr	r2, [pc, #132]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d022      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc8:	d01d      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a1a      	ldr	r2, [pc, #104]	; (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a18      	ldr	r2, [pc, #96]	; (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a17      	ldr	r2, [pc, #92]	; (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d10c      	bne.n	8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40010400 	.word	0x40010400
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40001800 	.word	0x40001800

08005d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e03f      	b.n	8005e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fc f8ec 	bl	8001f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2224      	movs	r2, #36	; 0x24
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 f83d 	bl	8006e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695a      	ldr	r2, [r3, #20]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b08a      	sub	sp, #40	; 0x28
 8005e22:	af02      	add	r7, sp, #8
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	603b      	str	r3, [r7, #0]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d17c      	bne.n	8005f38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_UART_Transmit+0x2c>
 8005e44:	88fb      	ldrh	r3, [r7, #6]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e075      	b.n	8005f3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_UART_Transmit+0x3e>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e06e      	b.n	8005f3a <HAL_UART_Transmit+0x11c>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2221      	movs	r2, #33	; 0x21
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e72:	f7fc fa63 	bl	800233c <HAL_GetTick>
 8005e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8c:	d108      	bne.n	8005ea0 <HAL_UART_Transmit+0x82>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	e003      	b.n	8005ea8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005eb0:	e02a      	b.n	8005f08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2180      	movs	r1, #128	; 0x80
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 fcf5 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e036      	b.n	8005f3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10b      	bne.n	8005eea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	61bb      	str	r3, [r7, #24]
 8005ee8:	e007      	b.n	8005efa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1cf      	bne.n	8005eb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2140      	movs	r1, #64	; 0x40
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fcc5 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e006      	b.n	8005f3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	e000      	b.n	8005f3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f38:	2302      	movs	r3, #2
  }
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b08a      	sub	sp, #40	; 0x28
 8005f46:	af02      	add	r7, sp, #8
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	603b      	str	r3, [r7, #0]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	f040 808c 	bne.w	800607c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_UART_Receive+0x2e>
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e084      	b.n	800607e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_UART_Receive+0x40>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e07d      	b.n	800607e <HAL_UART_Receive+0x13c>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2222      	movs	r2, #34	; 0x22
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f9e:	f7fc f9cd 	bl	800233c <HAL_GetTick>
 8005fa2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	88fa      	ldrh	r2, [r7, #6]
 8005fae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb8:	d108      	bne.n	8005fcc <HAL_UART_Receive+0x8a>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d104      	bne.n	8005fcc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	e003      	b.n	8005fd4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005fdc:	e043      	b.n	8006066 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2120      	movs	r1, #32
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fc5f 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e042      	b.n	800607e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10c      	bne.n	8006018 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	b29b      	uxth	r3, r3
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	b29a      	uxth	r2, r3
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	3302      	adds	r3, #2
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	e01f      	b.n	8006058 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006020:	d007      	beq.n	8006032 <HAL_UART_Receive+0xf0>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <HAL_UART_Receive+0xfe>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	b2da      	uxtb	r2, r3
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e008      	b.n	8006052 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800604c:	b2da      	uxtb	r2, r3
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	3301      	adds	r3, #1
 8006056:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1b6      	bne.n	8005fde <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	e000      	b.n	800607e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800607c:	2302      	movs	r3, #2
  }
}
 800607e:	4618      	mov	r0, r3
 8006080:	3720      	adds	r7, #32
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b08c      	sub	sp, #48	; 0x30
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	4613      	mov	r3, r2
 8006092:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b20      	cmp	r3, #32
 800609e:	d152      	bne.n	8006146 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e04b      	b.n	8006148 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e044      	b.n	8006148 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80060cc:	88fb      	ldrh	r3, [r7, #6]
 80060ce:	461a      	mov	r2, r3
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fc58 	bl	8006988 <UART_Start_Receive_DMA>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80060de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d12c      	bne.n	8006140 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d125      	bne.n	800613a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ee:	2300      	movs	r3, #0
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	330c      	adds	r3, #12
 800610a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	617b      	str	r3, [r7, #20]
   return(result);
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f043 0310 	orr.w	r3, r3, #16
 800611a:	62bb      	str	r3, [r7, #40]	; 0x28
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006124:	627a      	str	r2, [r7, #36]	; 0x24
 8006126:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6a39      	ldr	r1, [r7, #32]
 800612a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	61fb      	str	r3, [r7, #28]
   return(result);
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e5      	bne.n	8006104 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006138:	e002      	b.n	8006140 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006144:	e000      	b.n	8006148 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006146:	2302      	movs	r3, #2
  }
}
 8006148:	4618      	mov	r0, r3
 800614a:	3730      	adds	r7, #48	; 0x30
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b0ba      	sub	sp, #232	; 0xe8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006176:	2300      	movs	r3, #0
 8006178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800617c:	2300      	movs	r3, #0
 800617e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800618e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10f      	bne.n	80061b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <HAL_UART_IRQHandler+0x66>
 80061a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fd8f 	bl	8006cd2 <UART_Receive_IT>
      return;
 80061b4:	e256      	b.n	8006664 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80de 	beq.w	800637c <HAL_UART_IRQHandler+0x22c>
 80061c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 80d1 	beq.w	800637c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <HAL_UART_IRQHandler+0xae>
 80061e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f043 0201 	orr.w	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <HAL_UART_IRQHandler+0xd2>
 800620a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f043 0202 	orr.w	r2, r3, #2
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <HAL_UART_IRQHandler+0xf6>
 800622e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f043 0204 	orr.w	r2, r3, #4
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b00      	cmp	r3, #0
 8006250:	d011      	beq.n	8006276 <HAL_UART_IRQHandler+0x126>
 8006252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d105      	bne.n	800626a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800625e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	f043 0208 	orr.w	r2, r3, #8
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 81ed 	beq.w	800665a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_UART_IRQHandler+0x14e>
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fd1a 	bl	8006cd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a8:	2b40      	cmp	r3, #64	; 0x40
 80062aa:	bf0c      	ite	eq
 80062ac:	2301      	moveq	r3, #1
 80062ae:	2300      	movne	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <HAL_UART_IRQHandler+0x17a>
 80062c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d04f      	beq.n	800636a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fc22 	bl	8006b14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d141      	bne.n	8006362 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3314      	adds	r3, #20
 80062e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3314      	adds	r3, #20
 8006306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800630a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800630e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1d9      	bne.n	80062de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	2b00      	cmp	r3, #0
 8006330:	d013      	beq.n	800635a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	4a7d      	ldr	r2, [pc, #500]	; (800652c <HAL_UART_IRQHandler+0x3dc>)
 8006338:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633e:	4618      	mov	r0, r3
 8006340:	f7fd f916 	bl	8003570 <HAL_DMA_Abort_IT>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006354:	4610      	mov	r0, r2
 8006356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006358:	e00e      	b.n	8006378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f9a4 	bl	80066a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006360:	e00a      	b.n	8006378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f9a0 	bl	80066a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006368:	e006      	b.n	8006378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f99c 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006376:	e170      	b.n	800665a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	bf00      	nop
    return;
 800637a:	e16e      	b.n	800665a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	2b01      	cmp	r3, #1
 8006382:	f040 814a 	bne.w	800661a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 8143 	beq.w	800661a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 813c 	beq.w	800661a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063a2:	2300      	movs	r3, #0
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	60bb      	str	r3, [r7, #8]
 80063b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c2:	2b40      	cmp	r3, #64	; 0x40
 80063c4:	f040 80b4 	bne.w	8006530 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8140 	beq.w	800665e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063e6:	429a      	cmp	r2, r3
 80063e8:	f080 8139 	bcs.w	800665e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fe:	f000 8088 	beq.w	8006512 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800641c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	330c      	adds	r3, #12
 800642a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800642e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800643a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1d9      	bne.n	8006402 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3314      	adds	r3, #20
 8006454:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800645e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006460:	f023 0301 	bic.w	r3, r3, #1
 8006464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3314      	adds	r3, #20
 800646e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006472:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006476:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800647a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e1      	bne.n	800644e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3314      	adds	r3, #20
 8006490:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800649a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800649c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3314      	adds	r3, #20
 80064aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e3      	bne.n	800648a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e2:	f023 0310 	bic.w	r3, r3, #16
 80064e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	330c      	adds	r3, #12
 80064f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80064f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e3      	bne.n	80064d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650c:	4618      	mov	r0, r3
 800650e:	f7fc ffbf 	bl	8003490 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800651a:	b29b      	uxth	r3, r3
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	b29b      	uxth	r3, r3
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fb fa70 	bl	8001a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006528:	e099      	b.n	800665e <HAL_UART_IRQHandler+0x50e>
 800652a:	bf00      	nop
 800652c:	08006bdb 	.word	0x08006bdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006538:	b29b      	uxth	r3, r3
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 808b 	beq.w	8006662 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800654c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 8086 	beq.w	8006662 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800656c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	330c      	adds	r3, #12
 8006576:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800657a:	647a      	str	r2, [r7, #68]	; 0x44
 800657c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e3      	bne.n	8006556 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3314      	adds	r3, #20
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	623b      	str	r3, [r7, #32]
   return(result);
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3314      	adds	r3, #20
 80065ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065b2:	633a      	str	r2, [r7, #48]	; 0x30
 80065b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e3      	bne.n	800658e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0310 	bic.w	r3, r3, #16
 80065ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065f8:	61fa      	str	r2, [r7, #28]
 80065fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	69b9      	ldr	r1, [r7, #24]
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	617b      	str	r3, [r7, #20]
   return(result);
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e3      	bne.n	80065d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800660c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fb f9f8 	bl	8001a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006618:	e023      	b.n	8006662 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800661a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <HAL_UART_IRQHandler+0x4ea>
 8006626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800662a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fae5 	bl	8006c02 <UART_Transmit_IT>
    return;
 8006638:	e014      	b.n	8006664 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00e      	beq.n	8006664 <HAL_UART_IRQHandler+0x514>
 8006646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fb25 	bl	8006ca2 <UART_EndTransmit_IT>
    return;
 8006658:	e004      	b.n	8006664 <HAL_UART_IRQHandler+0x514>
    return;
 800665a:	bf00      	nop
 800665c:	e002      	b.n	8006664 <HAL_UART_IRQHandler+0x514>
      return;
 800665e:	bf00      	nop
 8006660:	e000      	b.n	8006664 <HAL_UART_IRQHandler+0x514>
      return;
 8006662:	bf00      	nop
  }
}
 8006664:	37e8      	adds	r7, #232	; 0xe8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop

0800666c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b09c      	sub	sp, #112	; 0x70
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d172      	bne.n	80067be <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80066d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066da:	2200      	movs	r2, #0
 80066dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	330c      	adds	r3, #12
 80066e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80066f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	330c      	adds	r3, #12
 80066fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8006700:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006702:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800670c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e5      	bne.n	80066de <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3314      	adds	r3, #20
 8006718:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006724:	f023 0301 	bic.w	r3, r3, #1
 8006728:	667b      	str	r3, [r7, #100]	; 0x64
 800672a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3314      	adds	r3, #20
 8006730:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006732:	647a      	str	r2, [r7, #68]	; 0x44
 8006734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e5      	bne.n	8006712 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3314      	adds	r3, #20
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	623b      	str	r3, [r7, #32]
   return(result);
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800675c:	663b      	str	r3, [r7, #96]	; 0x60
 800675e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3314      	adds	r3, #20
 8006764:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006766:	633a      	str	r2, [r7, #48]	; 0x30
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800676c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e5      	bne.n	8006746 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800677a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	2b01      	cmp	r3, #1
 8006788:	d119      	bne.n	80067be <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	330c      	adds	r3, #12
 8006790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	60fb      	str	r3, [r7, #12]
   return(result);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f023 0310 	bic.w	r3, r3, #16
 80067a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	330c      	adds	r3, #12
 80067a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067aa:	61fa      	str	r2, [r7, #28]
 80067ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	69b9      	ldr	r1, [r7, #24]
 80067b0:	69fa      	ldr	r2, [r7, #28]
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	617b      	str	r3, [r7, #20]
   return(result);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e5      	bne.n	800678a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d106      	bne.n	80067d4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067ca:	4619      	mov	r1, r3
 80067cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067ce:	f7fb f91b 	bl	8001a08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067d2:	e002      	b.n	80067da <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80067d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067d6:	f7ff ff53 	bl	8006680 <HAL_UART_RxCpltCallback>
}
 80067da:	bf00      	nop
 80067dc:	3770      	adds	r7, #112	; 0x70
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d108      	bne.n	800680a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	b29b      	uxth	r3, r3
 8006800:	4619      	mov	r1, r3
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f7fb f900 	bl	8001a08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006808:	e002      	b.n	8006810 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f7ff ff42 	bl	8006694 <HAL_UART_RxHalfCpltCallback>
}
 8006810:	bf00      	nop
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006828:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006834:	2b80      	cmp	r3, #128	; 0x80
 8006836:	bf0c      	ite	eq
 8006838:	2301      	moveq	r3, #1
 800683a:	2300      	movne	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b21      	cmp	r3, #33	; 0x21
 800684a:	d108      	bne.n	800685e <UART_DMAError+0x46>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2200      	movs	r2, #0
 8006856:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006858:	68b8      	ldr	r0, [r7, #8]
 800685a:	f000 f933 	bl	8006ac4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006868:	2b40      	cmp	r3, #64	; 0x40
 800686a:	bf0c      	ite	eq
 800686c:	2301      	moveq	r3, #1
 800686e:	2300      	movne	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b22      	cmp	r3, #34	; 0x22
 800687e:	d108      	bne.n	8006892 <UART_DMAError+0x7a>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2200      	movs	r2, #0
 800688a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800688c:	68b8      	ldr	r0, [r7, #8]
 800688e:	f000 f941 	bl	8006b14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f043 0210 	orr.w	r2, r3, #16
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800689e:	68b8      	ldr	r0, [r7, #8]
 80068a0:	f7ff ff02 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b090      	sub	sp, #64	; 0x40
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	4613      	mov	r3, r2
 80068ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068bc:	e050      	b.n	8006960 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c4:	d04c      	beq.n	8006960 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d007      	beq.n	80068dc <UART_WaitOnFlagUntilTimeout+0x30>
 80068cc:	f7fb fd36 	bl	800233c <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068d8:	429a      	cmp	r2, r3
 80068da:	d241      	bcs.n	8006960 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	330c      	adds	r3, #12
 80068fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068fc:	637a      	str	r2, [r7, #52]	; 0x34
 80068fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e5      	bne.n	80068dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3314      	adds	r3, #20
 8006916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	613b      	str	r3, [r7, #16]
   return(result);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	63bb      	str	r3, [r7, #56]	; 0x38
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3314      	adds	r3, #20
 800692e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006930:	623a      	str	r2, [r7, #32]
 8006932:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	69f9      	ldr	r1, [r7, #28]
 8006936:	6a3a      	ldr	r2, [r7, #32]
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	61bb      	str	r3, [r7, #24]
   return(result);
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e5      	bne.n	8006910 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e00f      	b.n	8006980 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	4013      	ands	r3, r2
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	429a      	cmp	r2, r3
 800696e:	bf0c      	ite	eq
 8006970:	2301      	moveq	r3, #1
 8006972:	2300      	movne	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	429a      	cmp	r2, r3
 800697c:	d09f      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3740      	adds	r7, #64	; 0x40
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b098      	sub	sp, #96	; 0x60
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	4613      	mov	r3, r2
 8006994:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	88fa      	ldrh	r2, [r7, #6]
 80069a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2222      	movs	r2, #34	; 0x22
 80069ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	4a40      	ldr	r2, [pc, #256]	; (8006ab8 <UART_Start_Receive_DMA+0x130>)
 80069b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	4a3f      	ldr	r2, [pc, #252]	; (8006abc <UART_Start_Receive_DMA+0x134>)
 80069be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	4a3e      	ldr	r2, [pc, #248]	; (8006ac0 <UART_Start_Receive_DMA+0x138>)
 80069c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	2200      	movs	r2, #0
 80069ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80069d0:	f107 0308 	add.w	r3, r7, #8
 80069d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3304      	adds	r3, #4
 80069e0:	4619      	mov	r1, r3
 80069e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	f7fc fcfa 	bl	80033e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	613b      	str	r3, [r7, #16]
 8006a00:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d019      	beq.n	8006a46 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	330c      	adds	r3, #12
 8006a18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a28:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	330c      	adds	r3, #12
 8006a30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a32:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006a34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e5      	bne.n	8006a12 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3314      	adds	r3, #20
 8006a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	f043 0301 	orr.w	r3, r3, #1
 8006a5c:	657b      	str	r3, [r7, #84]	; 0x54
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3314      	adds	r3, #20
 8006a64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a66:	63ba      	str	r2, [r7, #56]	; 0x38
 8006a68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e5      	bne.n	8006a46 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3314      	adds	r3, #20
 8006a80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	617b      	str	r3, [r7, #20]
   return(result);
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a90:	653b      	str	r3, [r7, #80]	; 0x50
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3314      	adds	r3, #20
 8006a98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a9a:	627a      	str	r2, [r7, #36]	; 0x24
 8006a9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6a39      	ldr	r1, [r7, #32]
 8006aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e5      	bne.n	8006a7a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3760      	adds	r7, #96	; 0x60
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	080066bd 	.word	0x080066bd
 8006abc:	080067e3 	.word	0x080067e3
 8006ac0:	08006819 	.word	0x08006819

08006ac4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b089      	sub	sp, #36	; 0x24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	330c      	adds	r3, #12
 8006ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ae2:	61fb      	str	r3, [r7, #28]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	61ba      	str	r2, [r7, #24]
 8006aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6979      	ldr	r1, [r7, #20]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	613b      	str	r3, [r7, #16]
   return(result);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e5      	bne.n	8006acc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2220      	movs	r2, #32
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006b08:	bf00      	nop
 8006b0a:	3724      	adds	r7, #36	; 0x24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b095      	sub	sp, #84	; 0x54
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b3c:	643a      	str	r2, [r7, #64]	; 0x40
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e5      	bne.n	8006b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3314      	adds	r3, #20
 8006b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f023 0301 	bic.w	r3, r3, #1
 8006b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3314      	adds	r3, #20
 8006b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e5      	bne.n	8006b50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d119      	bne.n	8006bc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f023 0310 	bic.w	r3, r3, #16
 8006ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	330c      	adds	r3, #12
 8006baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bac:	61ba      	str	r2, [r7, #24]
 8006bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6979      	ldr	r1, [r7, #20]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e5      	bne.n	8006b8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006bce:	bf00      	nop
 8006bd0:	3754      	adds	r7, #84	; 0x54
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff fd57 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b21      	cmp	r3, #33	; 0x21
 8006c14:	d13e      	bne.n	8006c94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1e:	d114      	bne.n	8006c4a <UART_Transmit_IT+0x48>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d110      	bne.n	8006c4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	1c9a      	adds	r2, r3, #2
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	621a      	str	r2, [r3, #32]
 8006c48:	e008      	b.n	8006c5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	1c59      	adds	r1, r3, #1
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6211      	str	r1, [r2, #32]
 8006c54:	781a      	ldrb	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10f      	bne.n	8006c90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e000      	b.n	8006c96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c94:	2302      	movs	r3, #2
  }
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff fcd2 	bl	800666c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b08c      	sub	sp, #48	; 0x30
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b22      	cmp	r3, #34	; 0x22
 8006ce4:	f040 80ab 	bne.w	8006e3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf0:	d117      	bne.n	8006d22 <UART_Receive_IT+0x50>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d113      	bne.n	8006d22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1a:	1c9a      	adds	r2, r3, #2
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006d20:	e026      	b.n	8006d70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d34:	d007      	beq.n	8006d46 <UART_Receive_IT+0x74>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <UART_Receive_IT+0x82>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	e008      	b.n	8006d66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d15a      	bne.n	8006e3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0220 	bic.w	r2, r2, #32
 8006d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695a      	ldr	r2, [r3, #20]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0201 	bic.w	r2, r2, #1
 8006db2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d135      	bne.n	8006e30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	330c      	adds	r3, #12
 8006dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f023 0310 	bic.w	r3, r3, #16
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	330c      	adds	r3, #12
 8006de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dea:	623a      	str	r2, [r7, #32]
 8006dec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	69f9      	ldr	r1, [r7, #28]
 8006df0:	6a3a      	ldr	r2, [r7, #32]
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e5      	bne.n	8006dca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b10      	cmp	r3, #16
 8006e0a:	d10a      	bne.n	8006e22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7fa fded 	bl	8001a08 <HAL_UARTEx_RxEventCallback>
 8006e2e:	e002      	b.n	8006e36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff fc25 	bl	8006680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e002      	b.n	8006e40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e000      	b.n	8006e40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e3e:	2302      	movs	r3, #2
  }
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3730      	adds	r7, #48	; 0x30
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e4c:	b0c0      	sub	sp, #256	; 0x100
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e64:	68d9      	ldr	r1, [r3, #12]
 8006e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	ea40 0301 	orr.w	r3, r0, r1
 8006e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ea0:	f021 010c 	bic.w	r1, r1, #12
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006eae:	430b      	orrs	r3, r1
 8006eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec2:	6999      	ldr	r1, [r3, #24]
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	ea40 0301 	orr.w	r3, r0, r1
 8006ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	4b8f      	ldr	r3, [pc, #572]	; (8007114 <UART_SetConfig+0x2cc>)
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d005      	beq.n	8006ee8 <UART_SetConfig+0xa0>
 8006edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	4b8d      	ldr	r3, [pc, #564]	; (8007118 <UART_SetConfig+0x2d0>)
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d104      	bne.n	8006ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ee8:	f7fd fbe2 	bl	80046b0 <HAL_RCC_GetPCLK2Freq>
 8006eec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ef0:	e003      	b.n	8006efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ef2:	f7fd fbc9 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 8006ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f04:	f040 810c 	bne.w	8007120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	1891      	adds	r1, r2, r2
 8006f20:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f22:	415b      	adcs	r3, r3
 8006f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	eb12 0801 	adds.w	r8, r2, r1
 8006f30:	4629      	mov	r1, r5
 8006f32:	eb43 0901 	adc.w	r9, r3, r1
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f4a:	4690      	mov	r8, r2
 8006f4c:	4699      	mov	r9, r3
 8006f4e:	4623      	mov	r3, r4
 8006f50:	eb18 0303 	adds.w	r3, r8, r3
 8006f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f58:	462b      	mov	r3, r5
 8006f5a:	eb49 0303 	adc.w	r3, r9, r3
 8006f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f76:	460b      	mov	r3, r1
 8006f78:	18db      	adds	r3, r3, r3
 8006f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	eb42 0303 	adc.w	r3, r2, r3
 8006f82:	657b      	str	r3, [r7, #84]	; 0x54
 8006f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f8c:	f7f9 fe7c 	bl	8000c88 <__aeabi_uldivmod>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4b61      	ldr	r3, [pc, #388]	; (800711c <UART_SetConfig+0x2d4>)
 8006f96:	fba3 2302 	umull	r2, r3, r3, r2
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	011c      	lsls	r4, r3, #4
 8006f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	464b      	mov	r3, r9
 8006fb4:	1891      	adds	r1, r2, r2
 8006fb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006fb8:	415b      	adcs	r3, r3
 8006fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fc0:	4641      	mov	r1, r8
 8006fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fe0:	4692      	mov	sl, r2
 8006fe2:	469b      	mov	fp, r3
 8006fe4:	4643      	mov	r3, r8
 8006fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8006fea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fee:	464b      	mov	r3, r9
 8006ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8006ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007004:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800700c:	460b      	mov	r3, r1
 800700e:	18db      	adds	r3, r3, r3
 8007010:	643b      	str	r3, [r7, #64]	; 0x40
 8007012:	4613      	mov	r3, r2
 8007014:	eb42 0303 	adc.w	r3, r2, r3
 8007018:	647b      	str	r3, [r7, #68]	; 0x44
 800701a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800701e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007022:	f7f9 fe31 	bl	8000c88 <__aeabi_uldivmod>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4611      	mov	r1, r2
 800702c:	4b3b      	ldr	r3, [pc, #236]	; (800711c <UART_SetConfig+0x2d4>)
 800702e:	fba3 2301 	umull	r2, r3, r3, r1
 8007032:	095b      	lsrs	r3, r3, #5
 8007034:	2264      	movs	r2, #100	; 0x64
 8007036:	fb02 f303 	mul.w	r3, r2, r3
 800703a:	1acb      	subs	r3, r1, r3
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007042:	4b36      	ldr	r3, [pc, #216]	; (800711c <UART_SetConfig+0x2d4>)
 8007044:	fba3 2302 	umull	r2, r3, r3, r2
 8007048:	095b      	lsrs	r3, r3, #5
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007050:	441c      	add	r4, r3
 8007052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007056:	2200      	movs	r2, #0
 8007058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800705c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007064:	4642      	mov	r2, r8
 8007066:	464b      	mov	r3, r9
 8007068:	1891      	adds	r1, r2, r2
 800706a:	63b9      	str	r1, [r7, #56]	; 0x38
 800706c:	415b      	adcs	r3, r3
 800706e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007074:	4641      	mov	r1, r8
 8007076:	1851      	adds	r1, r2, r1
 8007078:	6339      	str	r1, [r7, #48]	; 0x30
 800707a:	4649      	mov	r1, r9
 800707c:	414b      	adcs	r3, r1
 800707e:	637b      	str	r3, [r7, #52]	; 0x34
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800708c:	4659      	mov	r1, fp
 800708e:	00cb      	lsls	r3, r1, #3
 8007090:	4651      	mov	r1, sl
 8007092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007096:	4651      	mov	r1, sl
 8007098:	00ca      	lsls	r2, r1, #3
 800709a:	4610      	mov	r0, r2
 800709c:	4619      	mov	r1, r3
 800709e:	4603      	mov	r3, r0
 80070a0:	4642      	mov	r2, r8
 80070a2:	189b      	adds	r3, r3, r2
 80070a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070a8:	464b      	mov	r3, r9
 80070aa:	460a      	mov	r2, r1
 80070ac:	eb42 0303 	adc.w	r3, r2, r3
 80070b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80070c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070c8:	460b      	mov	r3, r1
 80070ca:	18db      	adds	r3, r3, r3
 80070cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ce:	4613      	mov	r3, r2
 80070d0:	eb42 0303 	adc.w	r3, r2, r3
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80070de:	f7f9 fdd3 	bl	8000c88 <__aeabi_uldivmod>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4b0d      	ldr	r3, [pc, #52]	; (800711c <UART_SetConfig+0x2d4>)
 80070e8:	fba3 1302 	umull	r1, r3, r3, r2
 80070ec:	095b      	lsrs	r3, r3, #5
 80070ee:	2164      	movs	r1, #100	; 0x64
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	3332      	adds	r3, #50	; 0x32
 80070fa:	4a08      	ldr	r2, [pc, #32]	; (800711c <UART_SetConfig+0x2d4>)
 80070fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007100:	095b      	lsrs	r3, r3, #5
 8007102:	f003 0207 	and.w	r2, r3, #7
 8007106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4422      	add	r2, r4
 800710e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007110:	e105      	b.n	800731e <UART_SetConfig+0x4d6>
 8007112:	bf00      	nop
 8007114:	40011000 	.word	0x40011000
 8007118:	40011400 	.word	0x40011400
 800711c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007124:	2200      	movs	r2, #0
 8007126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800712a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800712e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007132:	4642      	mov	r2, r8
 8007134:	464b      	mov	r3, r9
 8007136:	1891      	adds	r1, r2, r2
 8007138:	6239      	str	r1, [r7, #32]
 800713a:	415b      	adcs	r3, r3
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
 800713e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007142:	4641      	mov	r1, r8
 8007144:	1854      	adds	r4, r2, r1
 8007146:	4649      	mov	r1, r9
 8007148:	eb43 0501 	adc.w	r5, r3, r1
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	00eb      	lsls	r3, r5, #3
 8007156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800715a:	00e2      	lsls	r2, r4, #3
 800715c:	4614      	mov	r4, r2
 800715e:	461d      	mov	r5, r3
 8007160:	4643      	mov	r3, r8
 8007162:	18e3      	adds	r3, r4, r3
 8007164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007168:	464b      	mov	r3, r9
 800716a:	eb45 0303 	adc.w	r3, r5, r3
 800716e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800717e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800718e:	4629      	mov	r1, r5
 8007190:	008b      	lsls	r3, r1, #2
 8007192:	4621      	mov	r1, r4
 8007194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007198:	4621      	mov	r1, r4
 800719a:	008a      	lsls	r2, r1, #2
 800719c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80071a0:	f7f9 fd72 	bl	8000c88 <__aeabi_uldivmod>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	4b60      	ldr	r3, [pc, #384]	; (800732c <UART_SetConfig+0x4e4>)
 80071aa:	fba3 2302 	umull	r2, r3, r3, r2
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	011c      	lsls	r4, r3, #4
 80071b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80071c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80071c4:	4642      	mov	r2, r8
 80071c6:	464b      	mov	r3, r9
 80071c8:	1891      	adds	r1, r2, r2
 80071ca:	61b9      	str	r1, [r7, #24]
 80071cc:	415b      	adcs	r3, r3
 80071ce:	61fb      	str	r3, [r7, #28]
 80071d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071d4:	4641      	mov	r1, r8
 80071d6:	1851      	adds	r1, r2, r1
 80071d8:	6139      	str	r1, [r7, #16]
 80071da:	4649      	mov	r1, r9
 80071dc:	414b      	adcs	r3, r1
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071ec:	4659      	mov	r1, fp
 80071ee:	00cb      	lsls	r3, r1, #3
 80071f0:	4651      	mov	r1, sl
 80071f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071f6:	4651      	mov	r1, sl
 80071f8:	00ca      	lsls	r2, r1, #3
 80071fa:	4610      	mov	r0, r2
 80071fc:	4619      	mov	r1, r3
 80071fe:	4603      	mov	r3, r0
 8007200:	4642      	mov	r2, r8
 8007202:	189b      	adds	r3, r3, r2
 8007204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007208:	464b      	mov	r3, r9
 800720a:	460a      	mov	r2, r1
 800720c:	eb42 0303 	adc.w	r3, r2, r3
 8007210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	67bb      	str	r3, [r7, #120]	; 0x78
 800721e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007220:	f04f 0200 	mov.w	r2, #0
 8007224:	f04f 0300 	mov.w	r3, #0
 8007228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800722c:	4649      	mov	r1, r9
 800722e:	008b      	lsls	r3, r1, #2
 8007230:	4641      	mov	r1, r8
 8007232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007236:	4641      	mov	r1, r8
 8007238:	008a      	lsls	r2, r1, #2
 800723a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800723e:	f7f9 fd23 	bl	8000c88 <__aeabi_uldivmod>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4b39      	ldr	r3, [pc, #228]	; (800732c <UART_SetConfig+0x4e4>)
 8007248:	fba3 1302 	umull	r1, r3, r3, r2
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	2164      	movs	r1, #100	; 0x64
 8007250:	fb01 f303 	mul.w	r3, r1, r3
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	3332      	adds	r3, #50	; 0x32
 800725a:	4a34      	ldr	r2, [pc, #208]	; (800732c <UART_SetConfig+0x4e4>)
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007266:	441c      	add	r4, r3
 8007268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800726c:	2200      	movs	r2, #0
 800726e:	673b      	str	r3, [r7, #112]	; 0x70
 8007270:	677a      	str	r2, [r7, #116]	; 0x74
 8007272:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007276:	4642      	mov	r2, r8
 8007278:	464b      	mov	r3, r9
 800727a:	1891      	adds	r1, r2, r2
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	415b      	adcs	r3, r3
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007286:	4641      	mov	r1, r8
 8007288:	1851      	adds	r1, r2, r1
 800728a:	6039      	str	r1, [r7, #0]
 800728c:	4649      	mov	r1, r9
 800728e:	414b      	adcs	r3, r1
 8007290:	607b      	str	r3, [r7, #4]
 8007292:	f04f 0200 	mov.w	r2, #0
 8007296:	f04f 0300 	mov.w	r3, #0
 800729a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800729e:	4659      	mov	r1, fp
 80072a0:	00cb      	lsls	r3, r1, #3
 80072a2:	4651      	mov	r1, sl
 80072a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072a8:	4651      	mov	r1, sl
 80072aa:	00ca      	lsls	r2, r1, #3
 80072ac:	4610      	mov	r0, r2
 80072ae:	4619      	mov	r1, r3
 80072b0:	4603      	mov	r3, r0
 80072b2:	4642      	mov	r2, r8
 80072b4:	189b      	adds	r3, r3, r2
 80072b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80072b8:	464b      	mov	r3, r9
 80072ba:	460a      	mov	r2, r1
 80072bc:	eb42 0303 	adc.w	r3, r2, r3
 80072c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	663b      	str	r3, [r7, #96]	; 0x60
 80072cc:	667a      	str	r2, [r7, #100]	; 0x64
 80072ce:	f04f 0200 	mov.w	r2, #0
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80072da:	4649      	mov	r1, r9
 80072dc:	008b      	lsls	r3, r1, #2
 80072de:	4641      	mov	r1, r8
 80072e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072e4:	4641      	mov	r1, r8
 80072e6:	008a      	lsls	r2, r1, #2
 80072e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072ec:	f7f9 fccc 	bl	8000c88 <__aeabi_uldivmod>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4b0d      	ldr	r3, [pc, #52]	; (800732c <UART_SetConfig+0x4e4>)
 80072f6:	fba3 1302 	umull	r1, r3, r3, r2
 80072fa:	095b      	lsrs	r3, r3, #5
 80072fc:	2164      	movs	r1, #100	; 0x64
 80072fe:	fb01 f303 	mul.w	r3, r1, r3
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	3332      	adds	r3, #50	; 0x32
 8007308:	4a08      	ldr	r2, [pc, #32]	; (800732c <UART_SetConfig+0x4e4>)
 800730a:	fba2 2303 	umull	r2, r3, r2, r3
 800730e:	095b      	lsrs	r3, r3, #5
 8007310:	f003 020f 	and.w	r2, r3, #15
 8007314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4422      	add	r2, r4
 800731c:	609a      	str	r2, [r3, #8]
}
 800731e:	bf00      	nop
 8007320:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007324:	46bd      	mov	sp, r7
 8007326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800732a:	bf00      	nop
 800732c:	51eb851f 	.word	0x51eb851f

08007330 <Chassis_Init>:
#include "remote.h"
#include "math.h"
#include "Gimbal.h"

void Chassis_Init(void)
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
	RemoteData.ChassisType = Mecanum;
 8007334:	4b03      	ldr	r3, [pc, #12]	; (8007344 <Chassis_Init+0x14>)
 8007336:	2200      	movs	r2, #0
 8007338:	741a      	strb	r2, [r3, #16]
}
 800733a:	bf00      	nop
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	20000a8c 	.word	0x20000a8c

08007348 <ChassisAngle_Solve>:


void ChassisAngle_Solve(void)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
	//经过处理后可认为枪口位置编码器返回值为0
	Motor_Info[Chassis_Posi].Angle = Motor_Info[Yaw].Angle-YAW_InitalAngle +8192;
 800734e:	4b21      	ldr	r3, [pc, #132]	; (80073d4 <ChassisAngle_Solve+0x8c>)
 8007350:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007354:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007358:	b29a      	uxth	r2, r3
 800735a:	4b1e      	ldr	r3, [pc, #120]	; (80073d4 <ChassisAngle_Solve+0x8c>)
 800735c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	float wheel_speed_sum = -((float)Motor_Info[Chassis1].Speed + (float)Motor_Info[Chassis2].Speed + (float)Motor_Info[Chassis3].Speed + (float)Motor_Info[Chassis4].Speed);
 8007360:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <ChassisAngle_Solve+0x8c>)
 8007362:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800736e:	4b19      	ldr	r3, [pc, #100]	; (80073d4 <ChassisAngle_Solve+0x8c>)
 8007370:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007374:	ee07 3a90 	vmov	s15, r3
 8007378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800737c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007380:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <ChassisAngle_Solve+0x8c>)
 8007382:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800738e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007392:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <ChassisAngle_Solve+0x8c>)
 8007394:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8007398:	ee07 3a90 	vmov	s15, r3
 800739c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073a4:	eef1 7a67 	vneg.f32	s15, s15
 80073a8:	edc7 7a01 	vstr	s15, [r7, #4]
	Motor_Info[Chassis_Posi].Speed = wheel_speed_sum / (2*(MECANUM_WHEEL_BASE + MECANUM_WHEEL_TARCK)*60
 80073ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80073b0:	eddf 6a09 	vldr	s13, [pc, #36]	; 80073d8 <ChassisAngle_Solve+0x90>
 80073b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073bc:	ee17 3a90 	vmov	r3, s15
 80073c0:	b21a      	sxth	r2, r3
 80073c2:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <ChassisAngle_Solve+0x8c>)
 80073c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
						/(2*MECANUM_WHEEL_RADIUS * PI)*3591/187);
//	RemoteData.SpeedX = (-Motor_Info[Chassis1].Speed + Motor_Info[Chassis2].Speed + Motor_Info[Chassis3].Speed + Motor_Info[Chassis4].Speed)/4;
//	RemoteData.SpeedY = (Motor_Info[Chassis1].Speed + Motor_Info[Chassis2].Speed - Motor_Info[Chassis3].Speed - Motor_Info[Chassis4].Speed)/4;
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	20000710 	.word	0x20000710
 80073d8:	45408bc4 	.word	0x45408bc4
 80073dc:	00000000 	.word	0x00000000

080073e0 <Chassis_UpData>:

void Chassis_UpData(void)
{
 80073e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e4:	ed2d 8b02 	vpush	{d8}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
	//判断底盘的状态（不转、转、底盘跟随）
	switch((uint8_t)RemoteData.ChassisStatus)
 80073ec:	4b05      	ldr	r3, [pc, #20]	; (8007404 <Chassis_UpData+0x24>)
 80073ee:	7b1b      	ldrb	r3, [r3, #12]
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d00c      	beq.n	800740e <Chassis_UpData+0x2e>
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	dc20      	bgt.n	800743a <Chassis_UpData+0x5a>
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d005      	beq.n	8007408 <Chassis_UpData+0x28>
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d009      	beq.n	8007414 <Chassis_UpData+0x34>
 8007400:	e01b      	b.n	800743a <Chassis_UpData+0x5a>
 8007402:	bf00      	nop
 8007404:	20000a8c 	.word	0x20000a8c
	{
	case ChassisNoSpin:
		RemoteData.TargetSpeedW=0;
 8007408:	4bd9      	ldr	r3, [pc, #868]	; (8007770 <Chassis_UpData+0x390>)
 800740a:	2200      	movs	r2, #0
 800740c:	809a      	strh	r2, [r3, #4]
	case ChassisSpin:
		RemoteData.TargetSpeedW=5.0f;
 800740e:	4bd8      	ldr	r3, [pc, #864]	; (8007770 <Chassis_UpData+0x390>)
 8007410:	2205      	movs	r2, #5
 8007412:	809a      	strh	r2, [r3, #4]

	case ChassisFollow:
		{
			Motor_Info[Chassis_Posi].TargetAngle=YAW_InitalAngle;
 8007414:	4bd7      	ldr	r3, [pc, #860]	; (8007774 <Chassis_UpData+0x394>)
 8007416:	2200      	movs	r2, #0
 8007418:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			Posi_IncrPID(&PosiPID_Info[Chassis_Posi], &IncrPID_Info[Chassis_Posi], &Motor_Info[Chassis_Posi]);
 800741c:	4ad6      	ldr	r2, [pc, #856]	; (8007778 <Chassis_UpData+0x398>)
 800741e:	49d7      	ldr	r1, [pc, #860]	; (800777c <Chassis_UpData+0x39c>)
 8007420:	48d7      	ldr	r0, [pc, #860]	; (8007780 <Chassis_UpData+0x3a0>)
 8007422:	f001 fcfb 	bl	8008e1c <Posi_IncrPID>
			RemoteData.TargetSpeedW=PosiPID_Info[Chassis_Posi].Output;
 8007426:	4bd7      	ldr	r3, [pc, #860]	; (8007784 <Chassis_UpData+0x3a4>)
 8007428:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 800742c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007430:	ee17 3a90 	vmov	r3, s15
 8007434:	b21a      	sxth	r2, r3
 8007436:	4bce      	ldr	r3, [pc, #824]	; (8007770 <Chassis_UpData+0x390>)
 8007438:	809a      	strh	r2, [r3, #4]
		}
	}

	//将世界坐标系下的速度转换成底盘坐标系下的速度
	ChassisAngle_Solve();
 800743a:	f7ff ff85 	bl	8007348 <ChassisAngle_Solve>
	float angle =(float)Motor_Info[Chassis_Posi].Angle/8192.0f * 2.0f *PI;
 800743e:	4bcd      	ldr	r3, [pc, #820]	; (8007774 <Chassis_UpData+0x394>)
 8007440:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007444:	ee07 3a90 	vmov	s15, r3
 8007448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800744c:	eddf 6ace 	vldr	s13, [pc, #824]	; 8007788 <Chassis_UpData+0x3a8>
 8007450:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007454:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007458:	ed9f 7acc 	vldr	s14, [pc, #816]	; 800778c <Chassis_UpData+0x3ac>
 800745c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007460:	edc7 7a02 	vstr	s15, [r7, #8]
	RemoteData.TargetSpeedX=RemoteData.TargetSpeedX*cosf(angle) +RemoteData.TargetSpeedY*sinf(angle);
 8007464:	4bc2      	ldr	r3, [pc, #776]	; (8007770 <Chassis_UpData+0x390>)
 8007466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007472:	ed97 0a02 	vldr	s0, [r7, #8]
 8007476:	f006 fce9 	bl	800de4c <cosf>
 800747a:	eef0 7a40 	vmov.f32	s15, s0
 800747e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007482:	4bbb      	ldr	r3, [pc, #748]	; (8007770 <Chassis_UpData+0x390>)
 8007484:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007488:	ee07 3a90 	vmov	s15, r3
 800748c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8007490:	ed97 0a02 	vldr	s0, [r7, #8]
 8007494:	f006 fd1e 	bl	800ded4 <sinf>
 8007498:	eef0 7a40 	vmov.f32	s15, s0
 800749c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80074a0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80074a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074a8:	ee17 3a90 	vmov	r3, s15
 80074ac:	b21a      	sxth	r2, r3
 80074ae:	4bb0      	ldr	r3, [pc, #704]	; (8007770 <Chassis_UpData+0x390>)
 80074b0:	801a      	strh	r2, [r3, #0]
	RemoteData.TargetSpeedY=RemoteData.TargetSpeedY*cosf(angle) -RemoteData.TargetSpeedX*sinf(angle);
 80074b2:	4baf      	ldr	r3, [pc, #700]	; (8007770 <Chassis_UpData+0x390>)
 80074b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80074b8:	ee07 3a90 	vmov	s15, r3
 80074bc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80074c0:	ed97 0a02 	vldr	s0, [r7, #8]
 80074c4:	f006 fcc2 	bl	800de4c <cosf>
 80074c8:	eef0 7a40 	vmov.f32	s15, s0
 80074cc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80074d0:	4ba7      	ldr	r3, [pc, #668]	; (8007770 <Chassis_UpData+0x390>)
 80074d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80074de:	ed97 0a02 	vldr	s0, [r7, #8]
 80074e2:	f006 fcf7 	bl	800ded4 <sinf>
 80074e6:	eef0 7a40 	vmov.f32	s15, s0
 80074ea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80074ee:	ee78 7a67 	vsub.f32	s15, s16, s15
 80074f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074f6:	ee17 3a90 	vmov	r3, s15
 80074fa:	b21a      	sxth	r2, r3
 80074fc:	4b9c      	ldr	r3, [pc, #624]	; (8007770 <Chassis_UpData+0x390>)
 80074fe:	805a      	strh	r2, [r3, #2]


	//麦轮底盘解算
	if(RemoteData.ChassisType == Mecanum)
 8007500:	4b9b      	ldr	r3, [pc, #620]	; (8007770 <Chassis_UpData+0x390>)
 8007502:	7c1b      	ldrb	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	f040 8184 	bne.w	8007812 <Chassis_UpData+0x432>
	{
		Motor_Info[Chassis1].TargetSpeed = -(RemoteData.TargetSpeedX - RemoteData.TargetSpeedY + RemoteData.TargetSpeedW *0.5*(MECANUM_WHEEL_BASE + MECANUM_WHEEL_TARCK))*60/(2*MECANUM_WHEEL_RADIUS *PI)*3591/187;
 800750a:	4b99      	ldr	r3, [pc, #612]	; (8007770 <Chassis_UpData+0x390>)
 800750c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007510:	461a      	mov	r2, r3
 8007512:	4b97      	ldr	r3, [pc, #604]	; (8007770 <Chassis_UpData+0x390>)
 8007514:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	4618      	mov	r0, r3
 800751c:	f7f9 f802 	bl	8000524 <__aeabi_i2d>
 8007520:	4604      	mov	r4, r0
 8007522:	460d      	mov	r5, r1
 8007524:	4b92      	ldr	r3, [pc, #584]	; (8007770 <Chassis_UpData+0x390>)
 8007526:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800752a:	4618      	mov	r0, r3
 800752c:	f7f8 fffa 	bl	8000524 <__aeabi_i2d>
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	4b96      	ldr	r3, [pc, #600]	; (8007790 <Chassis_UpData+0x3b0>)
 8007536:	f7f9 f85f 	bl	80005f8 <__aeabi_dmul>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4610      	mov	r0, r2
 8007540:	4619      	mov	r1, r3
 8007542:	a383      	add	r3, pc, #524	; (adr r3, 8007750 <Chassis_UpData+0x370>)
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f7f9 f856 	bl	80005f8 <__aeabi_dmul>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4620      	mov	r0, r4
 8007552:	4629      	mov	r1, r5
 8007554:	f7f8 fe9a 	bl	800028c <__adddf3>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	603a      	str	r2, [r7, #0]
 800755e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007562:	607b      	str	r3, [r7, #4]
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	4b8a      	ldr	r3, [pc, #552]	; (8007794 <Chassis_UpData+0x3b4>)
 800756a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800756e:	f7f9 f843 	bl	80005f8 <__aeabi_dmul>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4610      	mov	r0, r2
 8007578:	4619      	mov	r1, r3
 800757a:	a377      	add	r3, pc, #476	; (adr r3, 8007758 <Chassis_UpData+0x378>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	f7f9 f964 	bl	800084c <__aeabi_ddiv>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4610      	mov	r0, r2
 800758a:	4619      	mov	r1, r3
 800758c:	a374      	add	r3, pc, #464	; (adr r3, 8007760 <Chassis_UpData+0x380>)
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	f7f9 f831 	bl	80005f8 <__aeabi_dmul>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4610      	mov	r0, r2
 800759c:	4619      	mov	r1, r3
 800759e:	a372      	add	r3, pc, #456	; (adr r3, 8007768 <Chassis_UpData+0x388>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f7f9 f952 	bl	800084c <__aeabi_ddiv>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4610      	mov	r0, r2
 80075ae:	4619      	mov	r1, r3
 80075b0:	f7f9 fad2 	bl	8000b58 <__aeabi_d2iz>
 80075b4:	4603      	mov	r3, r0
 80075b6:	b21a      	sxth	r2, r3
 80075b8:	4b6e      	ldr	r3, [pc, #440]	; (8007774 <Chassis_UpData+0x394>)
 80075ba:	809a      	strh	r2, [r3, #4]
		Motor_Info[Chassis2].TargetSpeed = (RemoteData.TargetSpeedX + RemoteData.TargetSpeedY - RemoteData.TargetSpeedW *0.5*(MECANUM_WHEEL_BASE + MECANUM_WHEEL_TARCK))*60/(2*MECANUM_WHEEL_RADIUS *PI)*3591/187;
 80075bc:	4b6c      	ldr	r3, [pc, #432]	; (8007770 <Chassis_UpData+0x390>)
 80075be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075c2:	461a      	mov	r2, r3
 80075c4:	4b6a      	ldr	r3, [pc, #424]	; (8007770 <Chassis_UpData+0x390>)
 80075c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80075ca:	4413      	add	r3, r2
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7f8 ffa9 	bl	8000524 <__aeabi_i2d>
 80075d2:	4604      	mov	r4, r0
 80075d4:	460d      	mov	r5, r1
 80075d6:	4b66      	ldr	r3, [pc, #408]	; (8007770 <Chassis_UpData+0x390>)
 80075d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7f8 ffa1 	bl	8000524 <__aeabi_i2d>
 80075e2:	f04f 0200 	mov.w	r2, #0
 80075e6:	4b6a      	ldr	r3, [pc, #424]	; (8007790 <Chassis_UpData+0x3b0>)
 80075e8:	f7f9 f806 	bl	80005f8 <__aeabi_dmul>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4610      	mov	r0, r2
 80075f2:	4619      	mov	r1, r3
 80075f4:	a356      	add	r3, pc, #344	; (adr r3, 8007750 <Chassis_UpData+0x370>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f8 fffd 	bl	80005f8 <__aeabi_dmul>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4620      	mov	r0, r4
 8007604:	4629      	mov	r1, r5
 8007606:	f7f8 fe3f 	bl	8000288 <__aeabi_dsub>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4610      	mov	r0, r2
 8007610:	4619      	mov	r1, r3
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	4b5f      	ldr	r3, [pc, #380]	; (8007794 <Chassis_UpData+0x3b4>)
 8007618:	f7f8 ffee 	bl	80005f8 <__aeabi_dmul>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4610      	mov	r0, r2
 8007622:	4619      	mov	r1, r3
 8007624:	a34c      	add	r3, pc, #304	; (adr r3, 8007758 <Chassis_UpData+0x378>)
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	f7f9 f90f 	bl	800084c <__aeabi_ddiv>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	4610      	mov	r0, r2
 8007634:	4619      	mov	r1, r3
 8007636:	a34a      	add	r3, pc, #296	; (adr r3, 8007760 <Chassis_UpData+0x380>)
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	f7f8 ffdc 	bl	80005f8 <__aeabi_dmul>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4610      	mov	r0, r2
 8007646:	4619      	mov	r1, r3
 8007648:	a347      	add	r3, pc, #284	; (adr r3, 8007768 <Chassis_UpData+0x388>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f7f9 f8fd 	bl	800084c <__aeabi_ddiv>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4610      	mov	r0, r2
 8007658:	4619      	mov	r1, r3
 800765a:	f7f9 fa7d 	bl	8000b58 <__aeabi_d2iz>
 800765e:	4603      	mov	r3, r0
 8007660:	b21a      	sxth	r2, r3
 8007662:	4b44      	ldr	r3, [pc, #272]	; (8007774 <Chassis_UpData+0x394>)
 8007664:	821a      	strh	r2, [r3, #16]
		Motor_Info[Chassis3].TargetSpeed = (RemoteData.TargetSpeedX - RemoteData.TargetSpeedY - RemoteData.TargetSpeedW *0.5*(MECANUM_WHEEL_BASE + MECANUM_WHEEL_TARCK))*60/(2*MECANUM_WHEEL_RADIUS *PI)*3591/187;
 8007666:	4b42      	ldr	r3, [pc, #264]	; (8007770 <Chassis_UpData+0x390>)
 8007668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800766c:	461a      	mov	r2, r3
 800766e:	4b40      	ldr	r3, [pc, #256]	; (8007770 <Chassis_UpData+0x390>)
 8007670:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	4618      	mov	r0, r3
 8007678:	f7f8 ff54 	bl	8000524 <__aeabi_i2d>
 800767c:	4604      	mov	r4, r0
 800767e:	460d      	mov	r5, r1
 8007680:	4b3b      	ldr	r3, [pc, #236]	; (8007770 <Chassis_UpData+0x390>)
 8007682:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007686:	4618      	mov	r0, r3
 8007688:	f7f8 ff4c 	bl	8000524 <__aeabi_i2d>
 800768c:	f04f 0200 	mov.w	r2, #0
 8007690:	4b3f      	ldr	r3, [pc, #252]	; (8007790 <Chassis_UpData+0x3b0>)
 8007692:	f7f8 ffb1 	bl	80005f8 <__aeabi_dmul>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	4610      	mov	r0, r2
 800769c:	4619      	mov	r1, r3
 800769e:	a32c      	add	r3, pc, #176	; (adr r3, 8007750 <Chassis_UpData+0x370>)
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	f7f8 ffa8 	bl	80005f8 <__aeabi_dmul>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4620      	mov	r0, r4
 80076ae:	4629      	mov	r1, r5
 80076b0:	f7f8 fdea 	bl	8000288 <__aeabi_dsub>
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	4610      	mov	r0, r2
 80076ba:	4619      	mov	r1, r3
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	4b34      	ldr	r3, [pc, #208]	; (8007794 <Chassis_UpData+0x3b4>)
 80076c2:	f7f8 ff99 	bl	80005f8 <__aeabi_dmul>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4610      	mov	r0, r2
 80076cc:	4619      	mov	r1, r3
 80076ce:	a322      	add	r3, pc, #136	; (adr r3, 8007758 <Chassis_UpData+0x378>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f9 f8ba 	bl	800084c <__aeabi_ddiv>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4610      	mov	r0, r2
 80076de:	4619      	mov	r1, r3
 80076e0:	a31f      	add	r3, pc, #124	; (adr r3, 8007760 <Chassis_UpData+0x380>)
 80076e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e6:	f7f8 ff87 	bl	80005f8 <__aeabi_dmul>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4610      	mov	r0, r2
 80076f0:	4619      	mov	r1, r3
 80076f2:	a31d      	add	r3, pc, #116	; (adr r3, 8007768 <Chassis_UpData+0x388>)
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f7f9 f8a8 	bl	800084c <__aeabi_ddiv>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4610      	mov	r0, r2
 8007702:	4619      	mov	r1, r3
 8007704:	f7f9 fa28 	bl	8000b58 <__aeabi_d2iz>
 8007708:	4603      	mov	r3, r0
 800770a:	b21a      	sxth	r2, r3
 800770c:	4b19      	ldr	r3, [pc, #100]	; (8007774 <Chassis_UpData+0x394>)
 800770e:	839a      	strh	r2, [r3, #28]
		Motor_Info[Chassis4].TargetSpeed = -(RemoteData.TargetSpeedX + RemoteData.TargetSpeedY + RemoteData.TargetSpeedW *0.5*(MECANUM_WHEEL_BASE + MECANUM_WHEEL_TARCK))*60/(2*MECANUM_WHEEL_RADIUS *PI)*3591/187;
 8007710:	4b17      	ldr	r3, [pc, #92]	; (8007770 <Chassis_UpData+0x390>)
 8007712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007716:	461a      	mov	r2, r3
 8007718:	4b15      	ldr	r3, [pc, #84]	; (8007770 <Chassis_UpData+0x390>)
 800771a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800771e:	4413      	add	r3, r2
 8007720:	4618      	mov	r0, r3
 8007722:	f7f8 feff 	bl	8000524 <__aeabi_i2d>
 8007726:	4604      	mov	r4, r0
 8007728:	460d      	mov	r5, r1
 800772a:	4b11      	ldr	r3, [pc, #68]	; (8007770 <Chassis_UpData+0x390>)
 800772c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007730:	4618      	mov	r0, r3
 8007732:	f7f8 fef7 	bl	8000524 <__aeabi_i2d>
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	4b15      	ldr	r3, [pc, #84]	; (8007790 <Chassis_UpData+0x3b0>)
 800773c:	f7f8 ff5c 	bl	80005f8 <__aeabi_dmul>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4610      	mov	r0, r2
 8007746:	4619      	mov	r1, r3
 8007748:	e026      	b.n	8007798 <Chassis_UpData+0x3b8>
 800774a:	bf00      	nop
 800774c:	f3af 8000 	nop.w
 8007750:	c0000000 	.word	0xc0000000
 8007754:	3fe428f5 	.word	0x3fe428f5
 8007758:	60000000 	.word	0x60000000
 800775c:	3fde28c7 	.word	0x3fde28c7
 8007760:	00000000 	.word	0x00000000
 8007764:	40ac0e00 	.word	0x40ac0e00
 8007768:	00000000 	.word	0x00000000
 800776c:	40676000 	.word	0x40676000
 8007770:	20000a8c 	.word	0x20000a8c
 8007774:	20000710 	.word	0x20000710
 8007778:	20000764 	.word	0x20000764
 800777c:	20000a18 	.word	0x20000a18
 8007780:	200008cc 	.word	0x200008cc
 8007784:	200007d0 	.word	0x200007d0
 8007788:	46000000 	.word	0x46000000
 800778c:	40490fdb 	.word	0x40490fdb
 8007790:	3fe00000 	.word	0x3fe00000
 8007794:	404e0000 	.word	0x404e0000
 8007798:	a3d5      	add	r3, pc, #852	; (adr r3, 8007af0 <Chassis_UpData+0x710>)
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	f7f8 ff2b 	bl	80005f8 <__aeabi_dmul>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7f8 fd6f 	bl	800028c <__adddf3>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4692      	mov	sl, r2
 80077b4:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	4bce      	ldr	r3, [pc, #824]	; (8007af8 <Chassis_UpData+0x718>)
 80077be:	4650      	mov	r0, sl
 80077c0:	4659      	mov	r1, fp
 80077c2:	f7f8 ff19 	bl	80005f8 <__aeabi_dmul>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4610      	mov	r0, r2
 80077cc:	4619      	mov	r1, r3
 80077ce:	a3c2      	add	r3, pc, #776	; (adr r3, 8007ad8 <Chassis_UpData+0x6f8>)
 80077d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d4:	f7f9 f83a 	bl	800084c <__aeabi_ddiv>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4610      	mov	r0, r2
 80077de:	4619      	mov	r1, r3
 80077e0:	a3bf      	add	r3, pc, #764	; (adr r3, 8007ae0 <Chassis_UpData+0x700>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	f7f8 ff07 	bl	80005f8 <__aeabi_dmul>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	4610      	mov	r0, r2
 80077f0:	4619      	mov	r1, r3
 80077f2:	a3bd      	add	r3, pc, #756	; (adr r3, 8007ae8 <Chassis_UpData+0x708>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f9 f828 	bl	800084c <__aeabi_ddiv>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4610      	mov	r0, r2
 8007802:	4619      	mov	r1, r3
 8007804:	f7f9 f9a8 	bl	8000b58 <__aeabi_d2iz>
 8007808:	4603      	mov	r3, r0
 800780a:	b21a      	sxth	r2, r3
 800780c:	4bbb      	ldr	r3, [pc, #748]	; (8007afc <Chassis_UpData+0x71c>)
 800780e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007810:	e15e      	b.n	8007ad0 <Chassis_UpData+0x6f0>
	}

	else if(RemoteData.ChassisType  == Omni_4)
 8007812:	4bbb      	ldr	r3, [pc, #748]	; (8007b00 <Chassis_UpData+0x720>)
 8007814:	7c1b      	ldrb	r3, [r3, #16]
 8007816:	2b01      	cmp	r3, #1
 8007818:	f040 815a 	bne.w	8007ad0 <Chassis_UpData+0x6f0>
	{
		Motor_Info[Chassis1].TargetSpeed = -(RemoteData.TargetSpeedX - RemoteData.TargetSpeedY + RemoteData.TargetSpeedW *0.5*(MECANUM_WHEEL_BASE + MECANUM_WHEEL_TARCK))*60/(2*MECANUM_WHEEL_RADIUS *PI)*3591/187;
 800781c:	4bb8      	ldr	r3, [pc, #736]	; (8007b00 <Chassis_UpData+0x720>)
 800781e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007822:	461a      	mov	r2, r3
 8007824:	4bb6      	ldr	r3, [pc, #728]	; (8007b00 <Chassis_UpData+0x720>)
 8007826:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	4618      	mov	r0, r3
 800782e:	f7f8 fe79 	bl	8000524 <__aeabi_i2d>
 8007832:	4682      	mov	sl, r0
 8007834:	468b      	mov	fp, r1
 8007836:	4bb2      	ldr	r3, [pc, #712]	; (8007b00 <Chassis_UpData+0x720>)
 8007838:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800783c:	4618      	mov	r0, r3
 800783e:	f7f8 fe71 	bl	8000524 <__aeabi_i2d>
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	4baf      	ldr	r3, [pc, #700]	; (8007b04 <Chassis_UpData+0x724>)
 8007848:	f7f8 fed6 	bl	80005f8 <__aeabi_dmul>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	4610      	mov	r0, r2
 8007852:	4619      	mov	r1, r3
 8007854:	a3a6      	add	r3, pc, #664	; (adr r3, 8007af0 <Chassis_UpData+0x710>)
 8007856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785a:	f7f8 fecd 	bl	80005f8 <__aeabi_dmul>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4650      	mov	r0, sl
 8007864:	4659      	mov	r1, fp
 8007866:	f7f8 fd11 	bl	800028c <__adddf3>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4690      	mov	r8, r2
 8007870:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8007874:	f04f 0200 	mov.w	r2, #0
 8007878:	4b9f      	ldr	r3, [pc, #636]	; (8007af8 <Chassis_UpData+0x718>)
 800787a:	4640      	mov	r0, r8
 800787c:	4649      	mov	r1, r9
 800787e:	f7f8 febb 	bl	80005f8 <__aeabi_dmul>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4610      	mov	r0, r2
 8007888:	4619      	mov	r1, r3
 800788a:	a393      	add	r3, pc, #588	; (adr r3, 8007ad8 <Chassis_UpData+0x6f8>)
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f7f8 ffdc 	bl	800084c <__aeabi_ddiv>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4610      	mov	r0, r2
 800789a:	4619      	mov	r1, r3
 800789c:	a390      	add	r3, pc, #576	; (adr r3, 8007ae0 <Chassis_UpData+0x700>)
 800789e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a2:	f7f8 fea9 	bl	80005f8 <__aeabi_dmul>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4610      	mov	r0, r2
 80078ac:	4619      	mov	r1, r3
 80078ae:	a38e      	add	r3, pc, #568	; (adr r3, 8007ae8 <Chassis_UpData+0x708>)
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f7f8 ffca 	bl	800084c <__aeabi_ddiv>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4610      	mov	r0, r2
 80078be:	4619      	mov	r1, r3
 80078c0:	f7f9 f94a 	bl	8000b58 <__aeabi_d2iz>
 80078c4:	4603      	mov	r3, r0
 80078c6:	b21a      	sxth	r2, r3
 80078c8:	4b8c      	ldr	r3, [pc, #560]	; (8007afc <Chassis_UpData+0x71c>)
 80078ca:	809a      	strh	r2, [r3, #4]
		Motor_Info[Chassis2].TargetSpeed = (RemoteData.TargetSpeedX + RemoteData.TargetSpeedY - RemoteData.TargetSpeedW *0.5*(MECANUM_WHEEL_BASE + MECANUM_WHEEL_TARCK))*60/(2*MECANUM_WHEEL_RADIUS *PI)*3591/187;
 80078cc:	4b8c      	ldr	r3, [pc, #560]	; (8007b00 <Chassis_UpData+0x720>)
 80078ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078d2:	461a      	mov	r2, r3
 80078d4:	4b8a      	ldr	r3, [pc, #552]	; (8007b00 <Chassis_UpData+0x720>)
 80078d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80078da:	4413      	add	r3, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f7f8 fe21 	bl	8000524 <__aeabi_i2d>
 80078e2:	4680      	mov	r8, r0
 80078e4:	4689      	mov	r9, r1
 80078e6:	4b86      	ldr	r3, [pc, #536]	; (8007b00 <Chassis_UpData+0x720>)
 80078e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7f8 fe19 	bl	8000524 <__aeabi_i2d>
 80078f2:	f04f 0200 	mov.w	r2, #0
 80078f6:	4b83      	ldr	r3, [pc, #524]	; (8007b04 <Chassis_UpData+0x724>)
 80078f8:	f7f8 fe7e 	bl	80005f8 <__aeabi_dmul>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4610      	mov	r0, r2
 8007902:	4619      	mov	r1, r3
 8007904:	a37a      	add	r3, pc, #488	; (adr r3, 8007af0 <Chassis_UpData+0x710>)
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	f7f8 fe75 	bl	80005f8 <__aeabi_dmul>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7f8 fcb7 	bl	8000288 <__aeabi_dsub>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4610      	mov	r0, r2
 8007920:	4619      	mov	r1, r3
 8007922:	f04f 0200 	mov.w	r2, #0
 8007926:	4b74      	ldr	r3, [pc, #464]	; (8007af8 <Chassis_UpData+0x718>)
 8007928:	f7f8 fe66 	bl	80005f8 <__aeabi_dmul>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	4610      	mov	r0, r2
 8007932:	4619      	mov	r1, r3
 8007934:	a368      	add	r3, pc, #416	; (adr r3, 8007ad8 <Chassis_UpData+0x6f8>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	f7f8 ff87 	bl	800084c <__aeabi_ddiv>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4610      	mov	r0, r2
 8007944:	4619      	mov	r1, r3
 8007946:	a366      	add	r3, pc, #408	; (adr r3, 8007ae0 <Chassis_UpData+0x700>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f7f8 fe54 	bl	80005f8 <__aeabi_dmul>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4610      	mov	r0, r2
 8007956:	4619      	mov	r1, r3
 8007958:	a363      	add	r3, pc, #396	; (adr r3, 8007ae8 <Chassis_UpData+0x708>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7f8 ff75 	bl	800084c <__aeabi_ddiv>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4610      	mov	r0, r2
 8007968:	4619      	mov	r1, r3
 800796a:	f7f9 f8f5 	bl	8000b58 <__aeabi_d2iz>
 800796e:	4603      	mov	r3, r0
 8007970:	b21a      	sxth	r2, r3
 8007972:	4b62      	ldr	r3, [pc, #392]	; (8007afc <Chassis_UpData+0x71c>)
 8007974:	821a      	strh	r2, [r3, #16]
		Motor_Info[Chassis3].TargetSpeed = (RemoteData.TargetSpeedX - RemoteData.TargetSpeedY - RemoteData.TargetSpeedW *0.5*(MECANUM_WHEEL_BASE + MECANUM_WHEEL_TARCK))*60/(2*MECANUM_WHEEL_RADIUS *PI)*3591/187;
 8007976:	4b62      	ldr	r3, [pc, #392]	; (8007b00 <Chassis_UpData+0x720>)
 8007978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800797c:	461a      	mov	r2, r3
 800797e:	4b60      	ldr	r3, [pc, #384]	; (8007b00 <Chassis_UpData+0x720>)
 8007980:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	4618      	mov	r0, r3
 8007988:	f7f8 fdcc 	bl	8000524 <__aeabi_i2d>
 800798c:	4680      	mov	r8, r0
 800798e:	4689      	mov	r9, r1
 8007990:	4b5b      	ldr	r3, [pc, #364]	; (8007b00 <Chassis_UpData+0x720>)
 8007992:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007996:	4618      	mov	r0, r3
 8007998:	f7f8 fdc4 	bl	8000524 <__aeabi_i2d>
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	4b58      	ldr	r3, [pc, #352]	; (8007b04 <Chassis_UpData+0x724>)
 80079a2:	f7f8 fe29 	bl	80005f8 <__aeabi_dmul>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4610      	mov	r0, r2
 80079ac:	4619      	mov	r1, r3
 80079ae:	a350      	add	r3, pc, #320	; (adr r3, 8007af0 <Chassis_UpData+0x710>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f8 fe20 	bl	80005f8 <__aeabi_dmul>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4640      	mov	r0, r8
 80079be:	4649      	mov	r1, r9
 80079c0:	f7f8 fc62 	bl	8000288 <__aeabi_dsub>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4610      	mov	r0, r2
 80079ca:	4619      	mov	r1, r3
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	4b49      	ldr	r3, [pc, #292]	; (8007af8 <Chassis_UpData+0x718>)
 80079d2:	f7f8 fe11 	bl	80005f8 <__aeabi_dmul>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	4610      	mov	r0, r2
 80079dc:	4619      	mov	r1, r3
 80079de:	a33e      	add	r3, pc, #248	; (adr r3, 8007ad8 <Chassis_UpData+0x6f8>)
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f7f8 ff32 	bl	800084c <__aeabi_ddiv>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4610      	mov	r0, r2
 80079ee:	4619      	mov	r1, r3
 80079f0:	a33b      	add	r3, pc, #236	; (adr r3, 8007ae0 <Chassis_UpData+0x700>)
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	f7f8 fdff 	bl	80005f8 <__aeabi_dmul>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	4610      	mov	r0, r2
 8007a00:	4619      	mov	r1, r3
 8007a02:	a339      	add	r3, pc, #228	; (adr r3, 8007ae8 <Chassis_UpData+0x708>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f7f8 ff20 	bl	800084c <__aeabi_ddiv>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4610      	mov	r0, r2
 8007a12:	4619      	mov	r1, r3
 8007a14:	f7f9 f8a0 	bl	8000b58 <__aeabi_d2iz>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	b21a      	sxth	r2, r3
 8007a1c:	4b37      	ldr	r3, [pc, #220]	; (8007afc <Chassis_UpData+0x71c>)
 8007a1e:	839a      	strh	r2, [r3, #28]
		Motor_Info[Chassis4].TargetSpeed = -(RemoteData.TargetSpeedX + RemoteData.TargetSpeedY + RemoteData.TargetSpeedW *0.5*(MECANUM_WHEEL_BASE + MECANUM_WHEEL_TARCK))*60/(2*MECANUM_WHEEL_RADIUS *PI)*3591/187;
 8007a20:	4b37      	ldr	r3, [pc, #220]	; (8007b00 <Chassis_UpData+0x720>)
 8007a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a26:	461a      	mov	r2, r3
 8007a28:	4b35      	ldr	r3, [pc, #212]	; (8007b00 <Chassis_UpData+0x720>)
 8007a2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a2e:	4413      	add	r3, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7f8 fd77 	bl	8000524 <__aeabi_i2d>
 8007a36:	4680      	mov	r8, r0
 8007a38:	4689      	mov	r9, r1
 8007a3a:	4b31      	ldr	r3, [pc, #196]	; (8007b00 <Chassis_UpData+0x720>)
 8007a3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7f8 fd6f 	bl	8000524 <__aeabi_i2d>
 8007a46:	f04f 0200 	mov.w	r2, #0
 8007a4a:	4b2e      	ldr	r3, [pc, #184]	; (8007b04 <Chassis_UpData+0x724>)
 8007a4c:	f7f8 fdd4 	bl	80005f8 <__aeabi_dmul>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4610      	mov	r0, r2
 8007a56:	4619      	mov	r1, r3
 8007a58:	a325      	add	r3, pc, #148	; (adr r3, 8007af0 <Chassis_UpData+0x710>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	f7f8 fdcb 	bl	80005f8 <__aeabi_dmul>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4640      	mov	r0, r8
 8007a68:	4649      	mov	r1, r9
 8007a6a:	f7f8 fc0f 	bl	800028c <__adddf3>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4614      	mov	r4, r2
 8007a74:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	4b1e      	ldr	r3, [pc, #120]	; (8007af8 <Chassis_UpData+0x718>)
 8007a7e:	4620      	mov	r0, r4
 8007a80:	4629      	mov	r1, r5
 8007a82:	f7f8 fdb9 	bl	80005f8 <__aeabi_dmul>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	a312      	add	r3, pc, #72	; (adr r3, 8007ad8 <Chassis_UpData+0x6f8>)
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f7f8 feda 	bl	800084c <__aeabi_ddiv>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	a30f      	add	r3, pc, #60	; (adr r3, 8007ae0 <Chassis_UpData+0x700>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f7f8 fda7 	bl	80005f8 <__aeabi_dmul>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4610      	mov	r0, r2
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	a30d      	add	r3, pc, #52	; (adr r3, 8007ae8 <Chassis_UpData+0x708>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f7f8 fec8 	bl	800084c <__aeabi_ddiv>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	f7f9 f848 	bl	8000b58 <__aeabi_d2iz>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	b21a      	sxth	r2, r3
 8007acc:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <Chassis_UpData+0x71c>)
 8007ace:	851a      	strh	r2, [r3, #40]	; 0x28
	}

	for(uint8_t i =Chassis1;i<=Chassis4;i++)
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73fb      	strb	r3, [r7, #15]
 8007ad4:	e029      	b.n	8007b2a <Chassis_UpData+0x74a>
 8007ad6:	bf00      	nop
 8007ad8:	60000000 	.word	0x60000000
 8007adc:	3fde28c7 	.word	0x3fde28c7
 8007ae0:	00000000 	.word	0x00000000
 8007ae4:	40ac0e00 	.word	0x40ac0e00
 8007ae8:	00000000 	.word	0x00000000
 8007aec:	40676000 	.word	0x40676000
 8007af0:	c0000000 	.word	0xc0000000
 8007af4:	3fe428f5 	.word	0x3fe428f5
 8007af8:	404e0000 	.word	0x404e0000
 8007afc:	20000710 	.word	0x20000710
 8007b00:	20000a8c 	.word	0x20000a8c
 8007b04:	3fe00000 	.word	0x3fe00000
		{
			IncrPID(&IncrPID_Info[i], &Motor_Info[i]);
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	015b      	lsls	r3, r3, #5
 8007b0c:	4a0c      	ldr	r2, [pc, #48]	; (8007b40 <Chassis_UpData+0x760>)
 8007b0e:	1898      	adds	r0, r3, r2
 8007b10:	7bfa      	ldrb	r2, [r7, #15]
 8007b12:	4613      	mov	r3, r2
 8007b14:	005b      	lsls	r3, r3, #1
 8007b16:	4413      	add	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4a0a      	ldr	r2, [pc, #40]	; (8007b44 <Chassis_UpData+0x764>)
 8007b1c:	4413      	add	r3, r2
 8007b1e:	4619      	mov	r1, r3
 8007b20:	f001 f916 	bl	8008d50 <IncrPID>
	for(uint8_t i =Chassis1;i<=Chassis4;i++)
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	3301      	adds	r3, #1
 8007b28:	73fb      	strb	r3, [r7, #15]
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d9eb      	bls.n	8007b08 <Chassis_UpData+0x728>
		}
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	ecbd 8b02 	vpop	{d8}
 8007b3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b40:	20000938 	.word	0x20000938
 8007b44:	20000710 	.word	0x20000710

08007b48 <Gimbal_Init>:
#include "pid.h"
#include "remote.h"


void Gimbal_Init(void)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
	Motor_Info[Yaw].TargetAngle=YAW_InitalAngle;
 8007b4c:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <Gimbal_Init+0x20>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	Motor_Info[Pitch].TargetAngle=Pitch_InitalAngle;
 8007b54:	4b04      	ldr	r3, [pc, #16]	; (8007b68 <Gimbal_Init+0x20>)
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
}
 8007b5c:	bf00      	nop
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	20000710 	.word	0x20000710

08007b6c <Gimbal_UpData>:


void Gimbal_UpData(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
	//不知道用的是哪一个角
	Motor_Info[Yaw].TargetAngle=ImuData.angle[0]*8192-1;
 8007b70:	4b1b      	ldr	r3, [pc, #108]	; (8007be0 <Gimbal_UpData+0x74>)
 8007b72:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007b76:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8007be4 <Gimbal_UpData+0x78>
 8007b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b8a:	ee17 3a90 	vmov	r3, s15
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	4b15      	ldr	r3, [pc, #84]	; (8007be8 <Gimbal_UpData+0x7c>)
 8007b92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	Motor_Info[Yaw].TargetAngle+=RemoteData.TargetSpeedYaw;
 8007b96:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <Gimbal_UpData+0x7c>)
 8007b98:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007b9c:	4b13      	ldr	r3, [pc, #76]	; (8007bec <Gimbal_UpData+0x80>)
 8007b9e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <Gimbal_UpData+0x7c>)
 8007baa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	Motor_Info[Pitch].TargetAngle+=RemoteData.TargetSpeedPitch;
 8007bae:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <Gimbal_UpData+0x7c>)
 8007bb0:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8007bb4:	4b0d      	ldr	r3, [pc, #52]	; (8007bec <Gimbal_UpData+0x80>)
 8007bb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <Gimbal_UpData+0x7c>)
 8007bc2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	Posi_IncrPID(&PosiPID_Info[Yaw], &IncrPID_Info[Yaw], &Motor_Info[Yaw]);
 8007bc6:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <Gimbal_UpData+0x84>)
 8007bc8:	490a      	ldr	r1, [pc, #40]	; (8007bf4 <Gimbal_UpData+0x88>)
 8007bca:	480b      	ldr	r0, [pc, #44]	; (8007bf8 <Gimbal_UpData+0x8c>)
 8007bcc:	f001 f926 	bl	8008e1c <Posi_IncrPID>
	Posi_IncrPID(&PosiPID_Info[Pitch], &IncrPID_Info[Pitch], &Motor_Info[Pitch]);
 8007bd0:	4a0a      	ldr	r2, [pc, #40]	; (8007bfc <Gimbal_UpData+0x90>)
 8007bd2:	490b      	ldr	r1, [pc, #44]	; (8007c00 <Gimbal_UpData+0x94>)
 8007bd4:	480b      	ldr	r0, [pc, #44]	; (8007c04 <Gimbal_UpData+0x98>)
 8007bd6:	f001 f921 	bl	8008e1c <Posi_IncrPID>
}
 8007bda:	bf00      	nop
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	200006d8 	.word	0x200006d8
 8007be4:	46000000 	.word	0x46000000
 8007be8:	20000710 	.word	0x20000710
 8007bec:	20000a8c 	.word	0x20000a8c
 8007bf0:	20000770 	.word	0x20000770
 8007bf4:	20000a38 	.word	0x20000a38
 8007bf8:	200008f0 	.word	0x200008f0
 8007bfc:	2000077c 	.word	0x2000077c
 8007c00:	20000a58 	.word	0x20000a58
 8007c04:	20000914 	.word	0x20000914

08007c08 <MahonyAHRSupdateIMU>:
// Functions

// IMU algorithm update

void MahonyAHRSupdateIMU(float q[4], float gx, float gy, float gz, float ax,
		float ay, float az) {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b092      	sub	sp, #72	; 0x48
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	61f8      	str	r0, [r7, #28]
 8007c10:	ed87 0a06 	vstr	s0, [r7, #24]
 8007c14:	edc7 0a05 	vstr	s1, [r7, #20]
 8007c18:	ed87 1a04 	vstr	s2, [r7, #16]
 8007c1c:	edc7 1a03 	vstr	s3, [r7, #12]
 8007c20:	ed87 2a02 	vstr	s4, [r7, #8]
 8007c24:	edc7 2a01 	vstr	s5, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8007c28:	edd7 7a03 	vldr	s15, [r7, #12]
 8007c2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c34:	d10e      	bne.n	8007c54 <MahonyAHRSupdateIMU+0x4c>
 8007c36:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c42:	d107      	bne.n	8007c54 <MahonyAHRSupdateIMU+0x4c>
 8007c44:	edd7 7a01 	vldr	s15, [r7, #4]
 8007c48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c50:	f000 8136 	beq.w	8007ec0 <MahonyAHRSupdateIMU+0x2b8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8007c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8007c58:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007c5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007c64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c68:	edd7 7a01 	vldr	s15, [r7, #4]
 8007c6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c74:	eeb0 0a67 	vmov.f32	s0, s15
 8007c78:	f000 fa3c 	bl	80080f4 <invSqrt>
 8007c7c:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		ax *= recipNorm;
 8007c80:	ed97 7a03 	vldr	s14, [r7, #12]
 8007c84:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c8c:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8007c90:	ed97 7a02 	vldr	s14, [r7, #8]
 8007c94:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9c:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8007ca0:	ed97 7a01 	vldr	s14, [r7, #4]
 8007ca4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cac:	edc7 7a01 	vstr	s15, [r7, #4]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	ed93 7a00 	vldr	s14, [r3]
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	330c      	adds	r3, #12
 8007cbc:	edd3 7a00 	vldr	s15, [r3]
 8007cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	edd3 6a00 	vldr	s13, [r3]
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	3308      	adds	r3, #8
 8007cce:	edd3 7a00 	vldr	s15, [r3]
 8007cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cda:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	ed93 7a00 	vldr	s14, [r3]
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	edd3 7a00 	vldr	s15, [r3]
 8007cec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	edd3 6a00 	vldr	s13, [r3]
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	330c      	adds	r3, #12
 8007cfc:	edd3 7a00 	vldr	s15, [r3]
 8007d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d08:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	ed93 7a00 	vldr	s14, [r3]
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	edd3 7a00 	vldr	s15, [r3]
 8007d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007d20:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	330c      	adds	r3, #12
 8007d28:	edd3 6a00 	vldr	s13, [r3]
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	330c      	adds	r3, #12
 8007d30:	edd3 7a00 	vldr	s15, [r3]
 8007d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d3c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8007d40:	ed97 7a02 	vldr	s14, [r7, #8]
 8007d44:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d4c:	edd7 6a01 	vldr	s13, [r7, #4]
 8007d50:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d5c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		halfey = (az * halfvx - ax * halfvz);
 8007d60:	ed97 7a01 	vldr	s14, [r7, #4]
 8007d64:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d6c:	edd7 6a03 	vldr	s13, [r7, #12]
 8007d70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d7c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		halfez = (ax * halfvy - ay * halfvx);
 8007d80:	ed97 7a03 	vldr	s14, [r7, #12]
 8007d84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d8c:	edd7 6a02 	vldr	s13, [r7, #8]
 8007d90:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d9c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Compute and apply integral feedback if enabled
		if (twoKi > 0.0f) {
 8007da0:	4bcd      	ldr	r3, [pc, #820]	; (80080d8 <MahonyAHRSupdateIMU+0x4d0>)
 8007da2:	edd3 7a00 	vldr	s15, [r3]
 8007da6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dae:	dd54      	ble.n	8007e5a <MahonyAHRSupdateIMU+0x252>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);// integral error scaled by Ki
 8007db0:	4bc9      	ldr	r3, [pc, #804]	; (80080d8 <MahonyAHRSupdateIMU+0x4d0>)
 8007db2:	ed93 7a00 	vldr	s14, [r3]
 8007db6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dbe:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 80080dc <MahonyAHRSupdateIMU+0x4d4>
 8007dc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007dc6:	4bc6      	ldr	r3, [pc, #792]	; (80080e0 <MahonyAHRSupdateIMU+0x4d8>)
 8007dc8:	edd3 7a00 	vldr	s15, [r3]
 8007dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dd0:	4bc3      	ldr	r3, [pc, #780]	; (80080e0 <MahonyAHRSupdateIMU+0x4d8>)
 8007dd2:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8007dd6:	4bc0      	ldr	r3, [pc, #768]	; (80080d8 <MahonyAHRSupdateIMU+0x4d0>)
 8007dd8:	ed93 7a00 	vldr	s14, [r3]
 8007ddc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de4:	ed9f 7abd 	vldr	s14, [pc, #756]	; 80080dc <MahonyAHRSupdateIMU+0x4d4>
 8007de8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007dec:	4bbd      	ldr	r3, [pc, #756]	; (80080e4 <MahonyAHRSupdateIMU+0x4dc>)
 8007dee:	edd3 7a00 	vldr	s15, [r3]
 8007df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007df6:	4bbb      	ldr	r3, [pc, #748]	; (80080e4 <MahonyAHRSupdateIMU+0x4dc>)
 8007df8:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8007dfc:	4bb6      	ldr	r3, [pc, #728]	; (80080d8 <MahonyAHRSupdateIMU+0x4d0>)
 8007dfe:	ed93 7a00 	vldr	s14, [r3]
 8007e02:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e0a:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80080dc <MahonyAHRSupdateIMU+0x4d4>
 8007e0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007e12:	4bb5      	ldr	r3, [pc, #724]	; (80080e8 <MahonyAHRSupdateIMU+0x4e0>)
 8007e14:	edd3 7a00 	vldr	s15, [r3]
 8007e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e1c:	4bb2      	ldr	r3, [pc, #712]	; (80080e8 <MahonyAHRSupdateIMU+0x4e0>)
 8007e1e:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8007e22:	4baf      	ldr	r3, [pc, #700]	; (80080e0 <MahonyAHRSupdateIMU+0x4d8>)
 8007e24:	edd3 7a00 	vldr	s15, [r3]
 8007e28:	ed97 7a06 	vldr	s14, [r7, #24]
 8007e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e30:	edc7 7a06 	vstr	s15, [r7, #24]
			gy += integralFBy;
 8007e34:	4bab      	ldr	r3, [pc, #684]	; (80080e4 <MahonyAHRSupdateIMU+0x4dc>)
 8007e36:	edd3 7a00 	vldr	s15, [r3]
 8007e3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8007e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e42:	edc7 7a05 	vstr	s15, [r7, #20]
			gz += integralFBz;
 8007e46:	4ba8      	ldr	r3, [pc, #672]	; (80080e8 <MahonyAHRSupdateIMU+0x4e0>)
 8007e48:	edd3 7a00 	vldr	s15, [r3]
 8007e4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8007e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e54:	edc7 7a04 	vstr	s15, [r7, #16]
 8007e58:	e00b      	b.n	8007e72 <MahonyAHRSupdateIMU+0x26a>
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 8007e5a:	4ba1      	ldr	r3, [pc, #644]	; (80080e0 <MahonyAHRSupdateIMU+0x4d8>)
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8007e62:	4ba0      	ldr	r3, [pc, #640]	; (80080e4 <MahonyAHRSupdateIMU+0x4dc>)
 8007e64:	f04f 0200 	mov.w	r2, #0
 8007e68:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8007e6a:	4b9f      	ldr	r3, [pc, #636]	; (80080e8 <MahonyAHRSupdateIMU+0x4e0>)
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8007e72:	4b9e      	ldr	r3, [pc, #632]	; (80080ec <MahonyAHRSupdateIMU+0x4e4>)
 8007e74:	ed93 7a00 	vldr	s14, [r3]
 8007e78:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e80:	ed97 7a06 	vldr	s14, [r7, #24]
 8007e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e88:	edc7 7a06 	vstr	s15, [r7, #24]
		gy += twoKp * halfey;
 8007e8c:	4b97      	ldr	r3, [pc, #604]	; (80080ec <MahonyAHRSupdateIMU+0x4e4>)
 8007e8e:	ed93 7a00 	vldr	s14, [r3]
 8007e92:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8007e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ea2:	edc7 7a05 	vstr	s15, [r7, #20]
		gz += twoKp * halfez;
 8007ea6:	4b91      	ldr	r3, [pc, #580]	; (80080ec <MahonyAHRSupdateIMU+0x4e4>)
 8007ea8:	ed93 7a00 	vldr	s14, [r3]
 8007eac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb4:	ed97 7a04 	vldr	s14, [r7, #16]
 8007eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ebc:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 8007ec0:	edd7 7a06 	vldr	s15, [r7, #24]
 8007ec4:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80080f0 <MahonyAHRSupdateIMU+0x4e8>
 8007ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ecc:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= (0.5f * (1.0f / sampleFreq));
 8007ed0:	edd7 7a05 	vldr	s15, [r7, #20]
 8007ed4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80080f0 <MahonyAHRSupdateIMU+0x4e8>
 8007ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007edc:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= (0.5f * (1.0f / sampleFreq));
 8007ee0:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ee4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80080f0 <MahonyAHRSupdateIMU+0x4e8>
 8007ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007eec:	edc7 7a04 	vstr	s15, [r7, #16]
	qa = q[0];
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	62bb      	str	r3, [r7, #40]	; 0x28
	qb = q[1];
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
	qc = q[2];
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	ed93 7a00 	vldr	s14, [r3]
 8007f08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007f0c:	eef1 6a67 	vneg.f32	s13, s15
 8007f10:	edd7 7a06 	vldr	s15, [r7, #24]
 8007f14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007f18:	ed97 6a08 	vldr	s12, [r7, #32]
 8007f1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007f20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007f24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	330c      	adds	r3, #12
 8007f2c:	ed93 6a00 	vldr	s12, [r3]
 8007f30:	edd7 7a04 	vldr	s15, [r7, #16]
 8007f34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007f38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	ed93 7a00 	vldr	s14, [r3]
 8007f4e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007f52:	edd7 7a06 	vldr	s15, [r7, #24]
 8007f56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007f5a:	ed97 6a08 	vldr	s12, [r7, #32]
 8007f5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007f62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007f66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	ed93 6a00 	vldr	s12, [r3]
 8007f72:	edd7 7a05 	vldr	s15, [r7, #20]
 8007f76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007f7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	3304      	adds	r3, #4
 8007f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f86:	edc3 7a00 	vstr	s15, [r3]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	ed93 7a00 	vldr	s14, [r3]
 8007f92:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8007f9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007f9e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8007fa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8007fa6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007faa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	330c      	adds	r3, #12
 8007fb2:	ed93 6a00 	vldr	s12, [r3]
 8007fb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8007fba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fca:	edc3 7a00 	vstr	s15, [r3]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	330c      	adds	r3, #12
 8007fd2:	ed93 7a00 	vldr	s14, [r3]
 8007fd6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007fda:	edd7 7a04 	vldr	s15, [r7, #16]
 8007fde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007fe2:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8007fe6:	edd7 7a05 	vldr	s15, [r7, #20]
 8007fea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007fee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007ff2:	ed97 6a08 	vldr	s12, [r7, #32]
 8007ff6:	edd7 7a06 	vldr	s15, [r7, #24]
 8007ffa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007ffe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	330c      	adds	r3, #12
 8008006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800800a:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	ed93 7a00 	vldr	s14, [r3]
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	edd3 7a00 	vldr	s15, [r3]
 800801a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	3304      	adds	r3, #4
 8008022:	edd3 6a00 	vldr	s13, [r3]
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	3304      	adds	r3, #4
 800802a:	edd3 7a00 	vldr	s15, [r3]
 800802e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008032:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	3308      	adds	r3, #8
 800803a:	edd3 6a00 	vldr	s13, [r3]
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	3308      	adds	r3, #8
 8008042:	edd3 7a00 	vldr	s15, [r3]
 8008046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800804a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	330c      	adds	r3, #12
 8008052:	edd3 6a00 	vldr	s13, [r3]
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	330c      	adds	r3, #12
 800805a:	edd3 7a00 	vldr	s15, [r3]
 800805e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008066:	eeb0 0a67 	vmov.f32	s0, s15
 800806a:	f000 f843 	bl	80080f4 <invSqrt>
 800806e:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	q[0] *= recipNorm;
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	ed93 7a00 	vldr	s14, [r3]
 8008078:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800807c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	3304      	adds	r3, #4
 800808a:	ed93 7a00 	vldr	s14, [r3]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	3304      	adds	r3, #4
 8008092:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800809a:	edc3 7a00 	vstr	s15, [r3]
	q[2] *= recipNorm;
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	3308      	adds	r3, #8
 80080a2:	ed93 7a00 	vldr	s14, [r3]
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	3308      	adds	r3, #8
 80080aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80080ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b2:	edc3 7a00 	vstr	s15, [r3]
	q[3] *= recipNorm;
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	330c      	adds	r3, #12
 80080ba:	ed93 7a00 	vldr	s14, [r3]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	330c      	adds	r3, #12
 80080c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80080c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ca:	edc3 7a00 	vstr	s15, [r3]
}
 80080ce:	bf00      	nop
 80080d0:	3748      	adds	r7, #72	; 0x48
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	200006c8 	.word	0x200006c8
 80080dc:	3c23d70a 	.word	0x3c23d70a
 80080e0:	200006cc 	.word	0x200006cc
 80080e4:	200006d0 	.word	0x200006d0
 80080e8:	200006d4 	.word	0x200006d4
 80080ec:	2000000c 	.word	0x2000000c
 80080f0:	3ba3d70a 	.word	0x3ba3d70a

080080f4 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80080fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8008102:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800810a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 8008112:	f107 0310 	add.w	r3, r7, #16
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	105a      	asrs	r2, r3, #1
 800811e:	4b12      	ldr	r3, [pc, #72]	; (8008168 <invSqrt+0x74>)
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8008124:	f107 030c 	add.w	r3, r7, #12
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800812c:	ed97 7a04 	vldr	s14, [r7, #16]
 8008130:	edd7 7a05 	vldr	s15, [r7, #20]
 8008134:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008138:	edd7 7a04 	vldr	s15, [r7, #16]
 800813c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008140:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8008144:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008148:	edd7 7a04 	vldr	s15, [r7, #16]
 800814c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008150:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	ee07 3a90 	vmov	s15, r3
}
 800815a:	eeb0 0a67 	vmov.f32	s0, s15
 800815e:	371c      	adds	r7, #28
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	5f3759df 	.word	0x5f3759df

0800816c <Shooter_Init>:
#include "imu.h"
#include "pid.h"
#include "remote.h"

void Shooter_Init(void)
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
	Motor_Info[frict_L].TargetSpeed = ShooterSpeed;
 8008170:	4b08      	ldr	r3, [pc, #32]	; (8008194 <Shooter_Init+0x28>)
 8008172:	2210      	movs	r2, #16
 8008174:	869a      	strh	r2, [r3, #52]	; 0x34
	Motor_Info[frict_R].TargetSpeed = -ShooterSpeed;
 8008176:	4b07      	ldr	r3, [pc, #28]	; (8008194 <Shooter_Init+0x28>)
 8008178:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800817c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	Motor_Info[Ammo].TargetAngle =	Ammo_InitalAngle;
 8008180:	4b04      	ldr	r3, [pc, #16]	; (8008194 <Shooter_Init+0x28>)
 8008182:	2200      	movs	r2, #0
 8008184:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8008188:	bf00      	nop
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	20000710 	.word	0x20000710

08008198 <Shooter_UpData>:

void Shooter_UpData(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
	if(RemoteData.ShootStrategy== MultiShoot)
 800819e:	4b2d      	ldr	r3, [pc, #180]	; (8008254 <Shooter_UpData+0xbc>)
 80081a0:	7b9b      	ldrb	r3, [r3, #14]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d111      	bne.n	80081ca <Shooter_UpData+0x32>
	{
		Motor_Info[frict_L].TargetSpeed = 	ShooterSpeed;
 80081a6:	4b2c      	ldr	r3, [pc, #176]	; (8008258 <Shooter_UpData+0xc0>)
 80081a8:	2210      	movs	r2, #16
 80081aa:	869a      	strh	r2, [r3, #52]	; 0x34
		Motor_Info[frict_R].TargetSpeed = 	-ShooterSpeed;
 80081ac:	4b2a      	ldr	r3, [pc, #168]	; (8008258 <Shooter_UpData+0xc0>)
 80081ae:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80081b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		Motor_Info[Ammo].TargetAngle +=8192/8;
 80081b6:	4b28      	ldr	r3, [pc, #160]	; (8008258 <Shooter_UpData+0xc0>)
 80081b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80081bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	4b25      	ldr	r3, [pc, #148]	; (8008258 <Shooter_UpData+0xc0>)
 80081c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80081c8:	e014      	b.n	80081f4 <Shooter_UpData+0x5c>
	}
	else if(RemoteData.ShootStrategy== Reverse)
 80081ca:	4b22      	ldr	r3, [pc, #136]	; (8008254 <Shooter_UpData+0xbc>)
 80081cc:	7b9b      	ldrb	r3, [r3, #14]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d110      	bne.n	80081f4 <Shooter_UpData+0x5c>
	{
		Motor_Info[frict_L].TargetSpeed =	-ReverseSpeed;
 80081d2:	4b21      	ldr	r3, [pc, #132]	; (8008258 <Shooter_UpData+0xc0>)
 80081d4:	2204      	movs	r2, #4
 80081d6:	869a      	strh	r2, [r3, #52]	; 0x34
		Motor_Info[frict_R].TargetSpeed =	 ReverseSpeed;
 80081d8:	4b1f      	ldr	r3, [pc, #124]	; (8008258 <Shooter_UpData+0xc0>)
 80081da:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80081de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		Motor_Info[Ammo].TargetAngle -=8192/8;
 80081e2:	4b1d      	ldr	r3, [pc, #116]	; (8008258 <Shooter_UpData+0xc0>)
 80081e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80081e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	4b1a      	ldr	r3, [pc, #104]	; (8008258 <Shooter_UpData+0xc0>)
 80081f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	}

	if(Motor_Info[Ammo].TargetAngle>8192)
 80081f4:	4b18      	ldr	r3, [pc, #96]	; (8008258 <Shooter_UpData+0xc0>)
 80081f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80081fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fe:	d908      	bls.n	8008212 <Shooter_UpData+0x7a>
		Motor_Info[Ammo].TargetAngle-=8192;
 8008200:	4b15      	ldr	r3, [pc, #84]	; (8008258 <Shooter_UpData+0xc0>)
 8008202:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008206:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800820a:	b29a      	uxth	r2, r3
 800820c:	4b12      	ldr	r3, [pc, #72]	; (8008258 <Shooter_UpData+0xc0>)
 800820e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	else if(Motor_Info[Ammo].TargetAngle<0)
		Motor_Info[Ammo].TargetAngle+=8192;

	for(uint8_t i=frict_L;i<=frict_R;i++)
 8008212:	2304      	movs	r3, #4
 8008214:	71fb      	strb	r3, [r7, #7]
 8008216:	e010      	b.n	800823a <Shooter_UpData+0xa2>
	{
		IncrPID(&IncrPID_Info[i], &Motor_Info[i]);
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	015b      	lsls	r3, r3, #5
 800821c:	4a0f      	ldr	r2, [pc, #60]	; (800825c <Shooter_UpData+0xc4>)
 800821e:	1898      	adds	r0, r3, r2
 8008220:	79fa      	ldrb	r2, [r7, #7]
 8008222:	4613      	mov	r3, r2
 8008224:	005b      	lsls	r3, r3, #1
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4a0b      	ldr	r2, [pc, #44]	; (8008258 <Shooter_UpData+0xc0>)
 800822c:	4413      	add	r3, r2
 800822e:	4619      	mov	r1, r3
 8008230:	f000 fd8e 	bl	8008d50 <IncrPID>
	for(uint8_t i=frict_L;i<=frict_R;i++)
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	3301      	adds	r3, #1
 8008238:	71fb      	strb	r3, [r7, #7]
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	2b05      	cmp	r3, #5
 800823e:	d9eb      	bls.n	8008218 <Shooter_UpData+0x80>
	}

	Posi_IncrPID(&PosiPID_Info[Ammo], &IncrPID_Info[Ammo], &Motor_Info[Ammo]);
 8008240:	4a07      	ldr	r2, [pc, #28]	; (8008260 <Shooter_UpData+0xc8>)
 8008242:	4908      	ldr	r1, [pc, #32]	; (8008264 <Shooter_UpData+0xcc>)
 8008244:	4808      	ldr	r0, [pc, #32]	; (8008268 <Shooter_UpData+0xd0>)
 8008246:	f000 fde9 	bl	8008e1c <Posi_IncrPID>
}
 800824a:	bf00      	nop
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000a8c 	.word	0x20000a8c
 8008258:	20000710 	.word	0x20000710
 800825c:	20000938 	.word	0x20000938
 8008260:	20000758 	.word	0x20000758
 8008264:	200009f8 	.word	0x200009f8
 8008268:	200008a8 	.word	0x200008a8

0800826c <Gyro_WriteByte>:

ImuData_t ImuData;


void Gyro_WriteByte(uint8_t addr,uint8_t data)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	460a      	mov	r2, r1
 8008276:	71fb      	strb	r3, [r7, #7]
 8008278:	4613      	mov	r3, r2
 800827a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CS1_Gyro_GPIO_Port, CS1_Gyro_Pin, GPIO_PIN_RESET);
 800827c:	2200      	movs	r2, #0
 800827e:	2101      	movs	r1, #1
 8008280:	4818      	ldr	r0, [pc, #96]	; (80082e4 <Gyro_WriteByte+0x78>)
 8008282:	f7fb fd9d 	bl	8003dc0 <HAL_GPIO_WritePin>
	uint8_t TxAddr= (addr & 0x7f);
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800828c:	b2db      	uxtb	r3, r3
 800828e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &TxAddr, 1, 1000);
 8008290:	f107 010f 	add.w	r1, r7, #15
 8008294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008298:	2201      	movs	r2, #1
 800829a:	4813      	ldr	r0, [pc, #76]	; (80082e8 <Gyro_WriteByte+0x7c>)
 800829c:	f7fc faa5 	bl	80047ea <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
 80082a0:	bf00      	nop
 80082a2:	4811      	ldr	r0, [pc, #68]	; (80082e8 <Gyro_WriteByte+0x7c>)
 80082a4:	f7fc ff9a 	bl	80051dc <HAL_SPI_GetState>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d0f9      	beq.n	80082a2 <Gyro_WriteByte+0x36>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80082ae:	1db9      	adds	r1, r7, #6
 80082b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082b4:	2201      	movs	r2, #1
 80082b6:	480c      	ldr	r0, [pc, #48]	; (80082e8 <Gyro_WriteByte+0x7c>)
 80082b8:	f7fc fa97 	bl	80047ea <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
 80082bc:	bf00      	nop
 80082be:	480a      	ldr	r0, [pc, #40]	; (80082e8 <Gyro_WriteByte+0x7c>)
 80082c0:	f7fc ff8c 	bl	80051dc <HAL_SPI_GetState>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d0f9      	beq.n	80082be <Gyro_WriteByte+0x52>
	HAL_Delay(1);
 80082ca:	2001      	movs	r0, #1
 80082cc:	f7fa f842 	bl	8002354 <HAL_Delay>
	HAL_GPIO_WritePin(CS1_Gyro_GPIO_Port, CS1_Gyro_Pin, GPIO_PIN_SET);
 80082d0:	2201      	movs	r2, #1
 80082d2:	2101      	movs	r1, #1
 80082d4:	4803      	ldr	r0, [pc, #12]	; (80082e4 <Gyro_WriteByte+0x78>)
 80082d6:	f7fb fd73 	bl	8003dc0 <HAL_GPIO_WritePin>
}
 80082da:	bf00      	nop
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	40020400 	.word	0x40020400
 80082e8:	200003e8 	.word	0x200003e8

080082ec <Gyro_ReadBytes>:

void Gyro_ReadBytes(uint8_t addr,uint8_t *pbuff,uint8_t len)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	4603      	mov	r3, r0
 80082f4:	6039      	str	r1, [r7, #0]
 80082f6:	71fb      	strb	r3, [r7, #7]
 80082f8:	4613      	mov	r3, r2
 80082fa:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CS1_Gyro_GPIO_Port, CS1_Gyro_Pin, GPIO_PIN_RESET);
 80082fc:	2200      	movs	r2, #0
 80082fe:	2101      	movs	r1, #1
 8008300:	481e      	ldr	r0, [pc, #120]	; (800837c <Gyro_ReadBytes+0x90>)
 8008302:	f7fb fd5d 	bl	8003dc0 <HAL_GPIO_WritePin>
	uint8_t temp = (addr | 0x80);
 8008306:	79fb      	ldrb	r3, [r7, #7]
 8008308:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800830c:	b2db      	uxtb	r3, r3
 800830e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, &temp, 1, 1000);
 8008310:	f107 010e 	add.w	r1, r7, #14
 8008314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008318:	2201      	movs	r2, #1
 800831a:	4819      	ldr	r0, [pc, #100]	; (8008380 <Gyro_ReadBytes+0x94>)
 800831c:	f7fc fa65 	bl	80047ea <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1)== HAL_SPI_STATE_BUSY_RX);
 8008320:	bf00      	nop
 8008322:	4817      	ldr	r0, [pc, #92]	; (8008380 <Gyro_ReadBytes+0x94>)
 8008324:	f7fc ff5a 	bl	80051dc <HAL_SPI_GetState>
 8008328:	4603      	mov	r3, r0
 800832a:	2b04      	cmp	r3, #4
 800832c:	d0f9      	beq.n	8008322 <Gyro_ReadBytes+0x36>
	for(uint8_t i=0;i<len;i++)
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]
 8008332:	e016      	b.n	8008362 <Gyro_ReadBytes+0x76>
	{
		HAL_SPI_Receive(&hspi1, &temp, 1, 1000);
 8008334:	f107 010e 	add.w	r1, r7, #14
 8008338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800833c:	2201      	movs	r2, #1
 800833e:	4810      	ldr	r0, [pc, #64]	; (8008380 <Gyro_ReadBytes+0x94>)
 8008340:	f7fc fb8f 	bl	8004a62 <HAL_SPI_Receive>
		while(HAL_SPI_GetState(&hspi1)== HAL_SPI_STATE_BUSY_RX);
 8008344:	bf00      	nop
 8008346:	480e      	ldr	r0, [pc, #56]	; (8008380 <Gyro_ReadBytes+0x94>)
 8008348:	f7fc ff48 	bl	80051dc <HAL_SPI_GetState>
 800834c:	4603      	mov	r3, r0
 800834e:	2b04      	cmp	r3, #4
 8008350:	d0f9      	beq.n	8008346 <Gyro_ReadBytes+0x5a>
		pbuff[i]=temp;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	4413      	add	r3, r2
 8008358:	7bba      	ldrb	r2, [r7, #14]
 800835a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<len;i++)
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	3301      	adds	r3, #1
 8008360:	73fb      	strb	r3, [r7, #15]
 8008362:	7bfa      	ldrb	r2, [r7, #15]
 8008364:	79bb      	ldrb	r3, [r7, #6]
 8008366:	429a      	cmp	r2, r3
 8008368:	d3e4      	bcc.n	8008334 <Gyro_ReadBytes+0x48>
	}
	HAL_GPIO_WritePin(CS1_Gyro_GPIO_Port, CS1_Gyro_Pin, GPIO_PIN_SET);
 800836a:	2201      	movs	r2, #1
 800836c:	2101      	movs	r1, #1
 800836e:	4803      	ldr	r0, [pc, #12]	; (800837c <Gyro_ReadBytes+0x90>)
 8008370:	f7fb fd26 	bl	8003dc0 <HAL_GPIO_WritePin>
}
 8008374:	bf00      	nop
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	40020400 	.word	0x40020400
 8008380:	200003e8 	.word	0x200003e8

08008384 <Accel_WriteByte>:

void Accel_WriteByte(uint8_t addr,uint8_t data)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	460a      	mov	r2, r1
 800838e:	71fb      	strb	r3, [r7, #7]
 8008390:	4613      	mov	r3, r2
 8008392:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CS1_Accel_GPIO_Port, CS1_Accel_Pin, GPIO_PIN_RESET);
 8008394:	2200      	movs	r2, #0
 8008396:	2110      	movs	r1, #16
 8008398:	4818      	ldr	r0, [pc, #96]	; (80083fc <Accel_WriteByte+0x78>)
 800839a:	f7fb fd11 	bl	8003dc0 <HAL_GPIO_WritePin>
	uint8_t TxData = (addr & 0x7f) ;
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &TxData, 1, 1000);
 80083a8:	f107 010f 	add.w	r1, r7, #15
 80083ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083b0:	2201      	movs	r2, #1
 80083b2:	4813      	ldr	r0, [pc, #76]	; (8008400 <Accel_WriteByte+0x7c>)
 80083b4:	f7fc fa19 	bl	80047ea <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
 80083b8:	bf00      	nop
 80083ba:	4811      	ldr	r0, [pc, #68]	; (8008400 <Accel_WriteByte+0x7c>)
 80083bc:	f7fc ff0e 	bl	80051dc <HAL_SPI_GetState>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d0f9      	beq.n	80083ba <Accel_WriteByte+0x36>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80083c6:	1db9      	adds	r1, r7, #6
 80083c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083cc:	2201      	movs	r2, #1
 80083ce:	480c      	ldr	r0, [pc, #48]	; (8008400 <Accel_WriteByte+0x7c>)
 80083d0:	f7fc fa0b 	bl	80047ea <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
 80083d4:	bf00      	nop
 80083d6:	480a      	ldr	r0, [pc, #40]	; (8008400 <Accel_WriteByte+0x7c>)
 80083d8:	f7fc ff00 	bl	80051dc <HAL_SPI_GetState>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d0f9      	beq.n	80083d6 <Accel_WriteByte+0x52>
	HAL_Delay(1);
 80083e2:	2001      	movs	r0, #1
 80083e4:	f7f9 ffb6 	bl	8002354 <HAL_Delay>
	HAL_GPIO_WritePin(CS1_Accel_GPIO_Port, CS1_Accel_Pin, GPIO_PIN_SET);
 80083e8:	2201      	movs	r2, #1
 80083ea:	2110      	movs	r1, #16
 80083ec:	4803      	ldr	r0, [pc, #12]	; (80083fc <Accel_WriteByte+0x78>)
 80083ee:	f7fb fce7 	bl	8003dc0 <HAL_GPIO_WritePin>
}
 80083f2:	bf00      	nop
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	40020000 	.word	0x40020000
 8008400:	200003e8 	.word	0x200003e8

08008404 <Accel_ReadBytes>:

void Accel_ReadBytes(uint8_t addr,uint8_t *pbuff,uint8_t len)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	6039      	str	r1, [r7, #0]
 800840e:	71fb      	strb	r3, [r7, #7]
 8008410:	4613      	mov	r3, r2
 8008412:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CS1_Accel_GPIO_Port, CS1_Accel_Pin, GPIO_PIN_RESET);
 8008414:	2200      	movs	r2, #0
 8008416:	2110      	movs	r1, #16
 8008418:	4826      	ldr	r0, [pc, #152]	; (80084b4 <Accel_ReadBytes+0xb0>)
 800841a:	f7fb fcd1 	bl	8003dc0 <HAL_GPIO_WritePin>
	uint8_t temp= (addr | 0x80);
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008424:	b2db      	uxtb	r3, r3
 8008426:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, &temp, 1, 1000);
 8008428:	f107 010e 	add.w	r1, r7, #14
 800842c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008430:	2201      	movs	r2, #1
 8008432:	4821      	ldr	r0, [pc, #132]	; (80084b8 <Accel_ReadBytes+0xb4>)
 8008434:	f7fc f9d9 	bl	80047ea <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1)== HAL_SPI_STATE_BUSY_RX);
 8008438:	bf00      	nop
 800843a:	481f      	ldr	r0, [pc, #124]	; (80084b8 <Accel_ReadBytes+0xb4>)
 800843c:	f7fc fece 	bl	80051dc <HAL_SPI_GetState>
 8008440:	4603      	mov	r3, r0
 8008442:	2b04      	cmp	r3, #4
 8008444:	d0f9      	beq.n	800843a <Accel_ReadBytes+0x36>
	HAL_SPI_Receive(&hspi1, &temp, 1, 1000);
 8008446:	f107 010e 	add.w	r1, r7, #14
 800844a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800844e:	2201      	movs	r2, #1
 8008450:	4819      	ldr	r0, [pc, #100]	; (80084b8 <Accel_ReadBytes+0xb4>)
 8008452:	f7fc fb06 	bl	8004a62 <HAL_SPI_Receive>
	while(HAL_SPI_GetState(&hspi1)== HAL_SPI_STATE_BUSY_RX);
 8008456:	bf00      	nop
 8008458:	4817      	ldr	r0, [pc, #92]	; (80084b8 <Accel_ReadBytes+0xb4>)
 800845a:	f7fc febf 	bl	80051dc <HAL_SPI_GetState>
 800845e:	4603      	mov	r3, r0
 8008460:	2b04      	cmp	r3, #4
 8008462:	d0f9      	beq.n	8008458 <Accel_ReadBytes+0x54>
	for(uint8_t i=0;i<len;i++)
 8008464:	2300      	movs	r3, #0
 8008466:	73fb      	strb	r3, [r7, #15]
 8008468:	e016      	b.n	8008498 <Accel_ReadBytes+0x94>
	{
		HAL_SPI_Receive(&hspi1, &temp, 1, 1000);
 800846a:	f107 010e 	add.w	r1, r7, #14
 800846e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008472:	2201      	movs	r2, #1
 8008474:	4810      	ldr	r0, [pc, #64]	; (80084b8 <Accel_ReadBytes+0xb4>)
 8008476:	f7fc faf4 	bl	8004a62 <HAL_SPI_Receive>
		while(HAL_SPI_GetState(&hspi1)== HAL_SPI_STATE_BUSY_RX);
 800847a:	bf00      	nop
 800847c:	480e      	ldr	r0, [pc, #56]	; (80084b8 <Accel_ReadBytes+0xb4>)
 800847e:	f7fc fead 	bl	80051dc <HAL_SPI_GetState>
 8008482:	4603      	mov	r3, r0
 8008484:	2b04      	cmp	r3, #4
 8008486:	d0f9      	beq.n	800847c <Accel_ReadBytes+0x78>
		pbuff[i]=temp;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	4413      	add	r3, r2
 800848e:	7bba      	ldrb	r2, [r7, #14]
 8008490:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<len;i++)
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	3301      	adds	r3, #1
 8008496:	73fb      	strb	r3, [r7, #15]
 8008498:	7bfa      	ldrb	r2, [r7, #15]
 800849a:	79bb      	ldrb	r3, [r7, #6]
 800849c:	429a      	cmp	r2, r3
 800849e:	d3e4      	bcc.n	800846a <Accel_ReadBytes+0x66>
	}
	HAL_GPIO_WritePin(CS1_Accel_GPIO_Port, CS1_Accel_Pin, GPIO_PIN_SET);
 80084a0:	2201      	movs	r2, #1
 80084a2:	2110      	movs	r1, #16
 80084a4:	4803      	ldr	r0, [pc, #12]	; (80084b4 <Accel_ReadBytes+0xb0>)
 80084a6:	f7fb fc8b 	bl	8003dc0 <HAL_GPIO_WritePin>
}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	40020000 	.word	0x40020000
 80084b8:	200003e8 	.word	0x200003e8

080084bc <BMI088_Init>:
void BMI088_Init(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
	Accel_WriteByte(ACC_SOFTRESET_ADDR, ACC_SOFTRESET_VAL);//软重启
 80084c0:	21b6      	movs	r1, #182	; 0xb6
 80084c2:	207e      	movs	r0, #126	; 0x7e
 80084c4:	f7ff ff5e 	bl	8008384 <Accel_WriteByte>
	HAL_Delay(50);
 80084c8:	2032      	movs	r0, #50	; 0x32
 80084ca:	f7f9 ff43 	bl	8002354 <HAL_Delay>
	Accel_WriteByte(ACC_PWR_CTRL_ADDR, ACC_PWR_CTRL_ON); //打开加速度计电源
 80084ce:	2104      	movs	r1, #4
 80084d0:	207d      	movs	r0, #125	; 0x7d
 80084d2:	f7ff ff57 	bl	8008384 <Accel_WriteByte>
	Accel_WriteByte(ACC_RANGE_ADDR, ACC_RANGE_3G);
 80084d6:	2100      	movs	r1, #0
 80084d8:	2041      	movs	r0, #65	; 0x41
 80084da:	f7ff ff53 	bl	8008384 <Accel_WriteByte>
	Accel_WriteByte(ACC_CONF_ADDR,ACC_CONF_RESERVED<<7 |ACC_CONF_BWP_OSR4<<6 |ACC_CONF_ODR_200_Hz );
 80084de:	2189      	movs	r1, #137	; 0x89
 80084e0:	2040      	movs	r0, #64	; 0x40
 80084e2:	f7ff ff4f 	bl	8008384 <Accel_WriteByte>

	Gyro_WriteByte(GYRO_SOFTRESET_ADDR, GYRO_SOFTRESET_VAL);//软重启
 80084e6:	21b6      	movs	r1, #182	; 0xb6
 80084e8:	2014      	movs	r0, #20
 80084ea:	f7ff febf 	bl	800826c <Gyro_WriteByte>
	HAL_Delay(50);
 80084ee:	2032      	movs	r0, #50	; 0x32
 80084f0:	f7f9 ff30 	bl	8002354 <HAL_Delay>
	Gyro_WriteByte(GYRO_LPM1_ADDR, GYRO_LPM1_NOR);//陀螺仪变成正常模式
 80084f4:	2100      	movs	r1, #0
 80084f6:	2011      	movs	r0, #17
 80084f8:	f7ff feb8 	bl	800826c <Gyro_WriteByte>
	Gyro_WriteByte(GYRO_RANGE_ADDR, GYRO_RANGE_500_DEG_S);
 80084fc:	2102      	movs	r1, #2
 80084fe:	200f      	movs	r0, #15
 8008500:	f7ff feb4 	bl	800826c <Gyro_WriteByte>
	Gyro_WriteByte(GYRO_BANDWIDTH_ADDR, GYRO_ODR_200Hz_BANDWIDTH_64Hz);
 8008504:	2106      	movs	r1, #6
 8008506:	2010      	movs	r0, #16
 8008508:	f7ff feb0 	bl	800826c <Gyro_WriteByte>

	ImuData.angle_q[0]=1;
 800850c:	4b02      	ldr	r3, [pc, #8]	; (8008518 <BMI088_Init+0x5c>)
 800850e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008512:	619a      	str	r2, [r3, #24]
}
 8008514:	bf00      	nop
 8008516:	bd80      	pop	{r7, pc}
 8008518:	200006d8 	.word	0x200006d8

0800851c <Get_ImuData>:

void Get_ImuData(ImuData_t *data)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08c      	sub	sp, #48	; 0x30
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	uint8_t buff_acc[ACC_XYZ_LEN],buff_gyro[GYRO_XYZ_LEN],buff_temp[TEMP_LEN];


	int16_t Accel[3],Gyro[3];

	Accel_ReadBytes(ACC_X_LSB_ADDR,buff_acc ,ACC_XYZ_LEN );
 8008524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008528:	2206      	movs	r2, #6
 800852a:	4619      	mov	r1, r3
 800852c:	2012      	movs	r0, #18
 800852e:	f7ff ff69 	bl	8008404 <Accel_ReadBytes>
	Accel[0]=((int16_t)buff_acc[1] << 8) + (int16_t)buff_acc[0];
 8008532:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008536:	b29b      	uxth	r3, r3
 8008538:	021b      	lsls	r3, r3, #8
 800853a:	b29a      	uxth	r2, r3
 800853c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008540:	b29b      	uxth	r3, r3
 8008542:	4413      	add	r3, r2
 8008544:	b29b      	uxth	r3, r3
 8008546:	b21b      	sxth	r3, r3
 8008548:	823b      	strh	r3, [r7, #16]
	Accel[1]=((int16_t)buff_acc[3] << 8) + (int16_t)buff_acc[2];
 800854a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800854e:	b29b      	uxth	r3, r3
 8008550:	021b      	lsls	r3, r3, #8
 8008552:	b29a      	uxth	r2, r3
 8008554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008558:	b29b      	uxth	r3, r3
 800855a:	4413      	add	r3, r2
 800855c:	b29b      	uxth	r3, r3
 800855e:	b21b      	sxth	r3, r3
 8008560:	827b      	strh	r3, [r7, #18]
	Accel[2]=((int16_t)buff_acc[5] << 8) + (int16_t)buff_acc[4];
 8008562:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008566:	b29b      	uxth	r3, r3
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	b29a      	uxth	r2, r3
 800856c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008570:	b29b      	uxth	r3, r3
 8008572:	4413      	add	r3, r2
 8008574:	b29b      	uxth	r3, r3
 8008576:	b21b      	sxth	r3, r3
 8008578:	82bb      	strh	r3, [r7, #20]
	data->Accel[0]=(float)Accel[0]*BMI088_ACCEL_3G_SEN;
 800857a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800857e:	ee07 3a90 	vmov	s15, r3
 8008582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008586:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8008848 <Get_ImuData+0x32c>
 800858a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	edc3 7a00 	vstr	s15, [r3]
	data->Accel[1]=(float)Accel[1]*BMI088_ACCEL_3G_SEN;
 8008594:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085a0:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8008848 <Get_ImuData+0x32c>
 80085a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	edc3 7a01 	vstr	s15, [r3, #4]
	data->Accel[2]=(float)Accel[2]*BMI088_ACCEL_3G_SEN;
 80085ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80085b2:	ee07 3a90 	vmov	s15, r3
 80085b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085ba:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8008848 <Get_ImuData+0x32c>
 80085be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	edc3 7a02 	vstr	s15, [r3, #8]


	Gyro_ReadBytes(GYRO_RATE_X_LSB_ADDR, buff_gyro, GYRO_XYZ_LEN);
 80085c8:	f107 031c 	add.w	r3, r7, #28
 80085cc:	2206      	movs	r2, #6
 80085ce:	4619      	mov	r1, r3
 80085d0:	2002      	movs	r0, #2
 80085d2:	f7ff fe8b 	bl	80082ec <Gyro_ReadBytes>
	Gyro[0]=((int16_t)buff_gyro[1] << 8) + (int16_t)buff_gyro[0];
 80085d6:	7f7b      	ldrb	r3, [r7, #29]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	021b      	lsls	r3, r3, #8
 80085dc:	b29a      	uxth	r2, r3
 80085de:	7f3b      	ldrb	r3, [r7, #28]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	4413      	add	r3, r2
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	b21b      	sxth	r3, r3
 80085e8:	813b      	strh	r3, [r7, #8]
	Gyro[1]=((int16_t)buff_gyro[3] << 8) + (int16_t)buff_gyro[2];
 80085ea:	7ffb      	ldrb	r3, [r7, #31]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	021b      	lsls	r3, r3, #8
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	7fbb      	ldrb	r3, [r7, #30]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	4413      	add	r3, r2
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	b21b      	sxth	r3, r3
 80085fc:	817b      	strh	r3, [r7, #10]
	Gyro[2]=((int16_t)buff_gyro[5] << 8) + (int16_t)buff_gyro[4];
 80085fe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008602:	b29b      	uxth	r3, r3
 8008604:	021b      	lsls	r3, r3, #8
 8008606:	b29a      	uxth	r2, r3
 8008608:	f897 3020 	ldrb.w	r3, [r7, #32]
 800860c:	b29b      	uxth	r3, r3
 800860e:	4413      	add	r3, r2
 8008610:	b29b      	uxth	r3, r3
 8008612:	b21b      	sxth	r3, r3
 8008614:	81bb      	strh	r3, [r7, #12]
	data->Gyro[0]=(float)Gyro[0] / 65.536f * DEG2SEC;
 8008616:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800861a:	ee07 3a90 	vmov	s15, r3
 800861e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008622:	eddf 6a8a 	vldr	s13, [pc, #552]	; 800884c <Get_ImuData+0x330>
 8008626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800862a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8008850 <Get_ImuData+0x334>
 800862e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	edc3 7a03 	vstr	s15, [r3, #12]
	data->Gyro[1]=(float)Gyro[1] / 65.536f * DEG2SEC;
 8008638:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800863c:	ee07 3a90 	vmov	s15, r3
 8008640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008644:	eddf 6a81 	vldr	s13, [pc, #516]	; 800884c <Get_ImuData+0x330>
 8008648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800864c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8008850 <Get_ImuData+0x334>
 8008650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	edc3 7a04 	vstr	s15, [r3, #16]
	data->Gyro[2]=(float)Gyro[2] / 65.536f * DEG2SEC;
 800865a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008666:	eddf 6a79 	vldr	s13, [pc, #484]	; 800884c <Get_ImuData+0x330>
 800866a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800866e:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8008850 <Get_ImuData+0x334>
 8008672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	edc3 7a05 	vstr	s15, [r3, #20]


	Accel_ReadBytes(TEMP_MSB_ADDR, buff_temp, TEMP_LEN);
 800867c:	f107 0318 	add.w	r3, r7, #24
 8008680:	2202      	movs	r2, #2
 8008682:	4619      	mov	r1, r3
 8008684:	2022      	movs	r0, #34	; 0x22
 8008686:	f7ff febd 	bl	8008404 <Accel_ReadBytes>
	uint16_t Temp=(buff_temp[0]<<3) +(buff_temp[1]>>5);
 800868a:	7e3b      	ldrb	r3, [r7, #24]
 800868c:	b29b      	uxth	r3, r3
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	b29a      	uxth	r2, r3
 8008692:	7e7b      	ldrb	r3, [r7, #25]
 8008694:	095b      	lsrs	r3, r3, #5
 8008696:	b2db      	uxtb	r3, r3
 8008698:	b29b      	uxth	r3, r3
 800869a:	4413      	add	r3, r2
 800869c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	int16_t Tempr=0;
 800869e:	2300      	movs	r3, #0
 80086a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if(Temp >1023)
 80086a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80086a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a8:	d305      	bcc.n	80086b6 <Get_ImuData+0x19a>
		Tempr = (int16_t)Temp -2048;
 80086aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80086ac:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80086b4:	e001      	b.n	80086ba <Get_ImuData+0x19e>
	else
		Tempr = (int16_t)Temp;
 80086b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80086b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	data->temperature = Tempr * TEMP_UNIT +TEMP_BIAS;
 80086ba:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086c6:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80086ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086ce:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80086d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34



	MahonyAHRSupdateIMU(data->angle_q, data->Gyro[0], data->Gyro[1], data->Gyro[2], data->Accel[0], data->Accel[1], data->Accel[2]);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f103 0218 	add.w	r2, r3, #24
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	edd3 6a05 	vldr	s13, [r3, #20]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	ed93 6a00 	vldr	s12, [r3]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	edd3 5a01 	vldr	s11, [r3, #4]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	ed93 5a02 	vldr	s10, [r3, #8]
 8008706:	eef0 2a45 	vmov.f32	s5, s10
 800870a:	eeb0 2a65 	vmov.f32	s4, s11
 800870e:	eef0 1a46 	vmov.f32	s3, s12
 8008712:	eeb0 1a66 	vmov.f32	s2, s13
 8008716:	eef0 0a47 	vmov.f32	s1, s14
 800871a:	eeb0 0a67 	vmov.f32	s0, s15
 800871e:	4610      	mov	r0, r2
 8008720:	f7ff fa72 	bl	8007c08 <MahonyAHRSupdateIMU>
	data->angle[0] = atan2f(2.0f*(data->angle_q[0]*data->angle_q[3]+data->angle_q[1]*data->angle_q[2]), 2.0f*(data->angle_q[0]*data->angle_q[0]+data->angle_q[1]*data->angle_q[1])-1.0f);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	ed93 7a06 	vldr	s14, [r3, #24]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	edd3 6a07 	vldr	s13, [r3, #28]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	edd3 7a08 	vldr	s15, [r3, #32]
 8008740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008748:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	ed93 7a06 	vldr	s14, [r3, #24]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	edd3 7a06 	vldr	s15, [r3, #24]
 8008758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	edd3 6a07 	vldr	s13, [r3, #28]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	edd3 7a07 	vldr	s15, [r3, #28]
 8008768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800876c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008770:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008774:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800877c:	eef0 0a67 	vmov.f32	s1, s15
 8008780:	eeb0 0a46 	vmov.f32	s0, s12
 8008784:	f005 fc18 	bl	800dfb8 <atan2f>
 8008788:	eef0 7a40 	vmov.f32	s15, s0
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	data->angle[1] = asinf(-2.0f*(data->angle_q[1]*data->angle_q[3]-data->angle_q[0]*data->angle_q[2]));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	ed93 7a07 	vldr	s14, [r3, #28]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800879e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	edd3 6a06 	vldr	s13, [r3, #24]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80087ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087b6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80087ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087be:	eeb0 0a67 	vmov.f32	s0, s15
 80087c2:	f005 fbcd 	bl	800df60 <asinf>
 80087c6:	eef0 7a40 	vmov.f32	s15, s0
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	data->angle[2] = atan2f(2.0f*(data->angle_q[0]*data->angle_q[1]+data->angle_q[2]*data->angle_q[3]),2.0f*(data->angle_q[0]*data->angle_q[0]+data->angle_q[3]*data->angle_q[3])-1.0f);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	ed93 7a06 	vldr	s14, [r3, #24]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	edd3 7a07 	vldr	s15, [r3, #28]
 80087dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	edd3 6a08 	vldr	s13, [r3, #32]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80087ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087f4:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	ed93 7a06 	vldr	s14, [r3, #24]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	edd3 7a06 	vldr	s15, [r3, #24]
 8008804:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800881c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008824:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008828:	eef0 0a67 	vmov.f32	s1, s15
 800882c:	eeb0 0a46 	vmov.f32	s0, s12
 8008830:	f005 fbc2 	bl	800dfb8 <atan2f>
 8008834:	eef0 7a40 	vmov.f32	s15, s0
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800883e:	bf00      	nop
 8008840:	3730      	adds	r7, #48	; 0x30
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	3a6b41e7 	.word	0x3a6b41e7
 800884c:	4283126f 	.word	0x4283126f
 8008850:	3c8efa35 	.word	0x3c8efa35

08008854 <CanConfig_Init>:
//CAN_RxHeaderTypeDef Motor_RXHeader[3];



void CanConfig_Init(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b08a      	sub	sp, #40	; 0x28
 8008858:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterBank=0;
 800885a:	2300      	movs	r3, #0
 800885c:	617b      	str	r3, [r7, #20]
	can_filter.FilterActivation=ENABLE;
 800885e:	2301      	movs	r3, #1
 8008860:	623b      	str	r3, [r7, #32]
	can_filter.FilterMode=CAN_FILTERMODE_IDMASK;
 8008862:	2300      	movs	r3, #0
 8008864:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8008866:	2301      	movs	r3, #1
 8008868:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh=0x0000;
 800886a:	2300      	movs	r3, #0
 800886c:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow=0x0000;
 800886e:	2300      	movs	r3, #0
 8008870:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh=0x0000;
 8008872:	2300      	movs	r3, #0
 8008874:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow=0x0000;
 8008876:	2300      	movs	r3, #0
 8008878:	60fb      	str	r3, [r7, #12]
	can_filter.FilterFIFOAssignment=CAN_RX_FIFO0;
 800887a:	2300      	movs	r3, #0
 800887c:	613b      	str	r3, [r7, #16]
	HAL_CAN_ConfigFilter(&hcan1, &can_filter);
 800887e:	463b      	mov	r3, r7
 8008880:	4619      	mov	r1, r3
 8008882:	4806      	ldr	r0, [pc, #24]	; (800889c <CanConfig_Init+0x48>)
 8008884:	f7f9 fe86 	bl	8002594 <HAL_CAN_ConfigFilter>
	HAL_CAN_ConfigFilter(&hcan2, &can_filter);
 8008888:	463b      	mov	r3, r7
 800888a:	4619      	mov	r1, r3
 800888c:	4804      	ldr	r0, [pc, #16]	; (80088a0 <CanConfig_Init+0x4c>)
 800888e:	f7f9 fe81 	bl	8002594 <HAL_CAN_ConfigFilter>
}
 8008892:	bf00      	nop
 8008894:	3728      	adds	r7, #40	; 0x28
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	20000390 	.word	0x20000390
 80088a0:	200003b8 	.word	0x200003b8

080088a4 <MotorInfo_Init>:

void MotorInfo_Init(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<3; i++)
 80088aa:	2300      	movs	r3, #0
 80088ac:	71fb      	strb	r3, [r7, #7]
 80088ae:	e02a      	b.n	8008906 <MotorInfo_Init+0x62>
	{
		Motor_TXHeader[i].ExtId = 0x00;
 80088b0:	79fa      	ldrb	r2, [r7, #7]
 80088b2:	491f      	ldr	r1, [pc, #124]	; (8008930 <MotorInfo_Init+0x8c>)
 80088b4:	4613      	mov	r3, r2
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	4413      	add	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	440b      	add	r3, r1
 80088be:	3304      	adds	r3, #4
 80088c0:	2200      	movs	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]
		Motor_TXHeader[i].IDE = CAN_ID_STD;
 80088c4:	79fa      	ldrb	r2, [r7, #7]
 80088c6:	491a      	ldr	r1, [pc, #104]	; (8008930 <MotorInfo_Init+0x8c>)
 80088c8:	4613      	mov	r3, r2
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	4413      	add	r3, r2
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	440b      	add	r3, r1
 80088d2:	3308      	adds	r3, #8
 80088d4:	2200      	movs	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]
		Motor_TXHeader[i].RTR = CAN_RTR_DATA;
 80088d8:	79fa      	ldrb	r2, [r7, #7]
 80088da:	4915      	ldr	r1, [pc, #84]	; (8008930 <MotorInfo_Init+0x8c>)
 80088dc:	4613      	mov	r3, r2
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	4413      	add	r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	440b      	add	r3, r1
 80088e6:	330c      	adds	r3, #12
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]
		Motor_TXHeader[i].DLC = 8;
 80088ec:	79fa      	ldrb	r2, [r7, #7]
 80088ee:	4910      	ldr	r1, [pc, #64]	; (8008930 <MotorInfo_Init+0x8c>)
 80088f0:	4613      	mov	r3, r2
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	4413      	add	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	440b      	add	r3, r1
 80088fa:	3310      	adds	r3, #16
 80088fc:	2208      	movs	r2, #8
 80088fe:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<3; i++)
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	3301      	adds	r3, #1
 8008904:	71fb      	strb	r3, [r7, #7]
 8008906:	79fb      	ldrb	r3, [r7, #7]
 8008908:	2b02      	cmp	r3, #2
 800890a:	d9d1      	bls.n	80088b0 <MotorInfo_Init+0xc>
//		Motor_RXHeader[i].ExtId = 0x00;
//		Motor_RXHeader[i].IDE = CAN_ID_STD;
//		Motor_RXHeader[i].RTR = CAN_RTR_DATA;
//		Motor_RXHeader[i].DLC = 8;
	}
	Motor_TXHeader[Chassis].StdId=Chassiss_TXID;
 800890c:	4b08      	ldr	r3, [pc, #32]	; (8008930 <MotorInfo_Init+0x8c>)
 800890e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008912:	601a      	str	r2, [r3, #0]
	Motor_TXHeader[Gimbal].StdId=Gimbal_TXID;
 8008914:	4b06      	ldr	r3, [pc, #24]	; (8008930 <MotorInfo_Init+0x8c>)
 8008916:	f240 22ff 	movw	r2, #767	; 0x2ff
 800891a:	619a      	str	r2, [r3, #24]
	Motor_TXHeader[Frict].StdId=Frict_TXID;
 800891c:	4b04      	ldr	r3, [pc, #16]	; (8008930 <MotorInfo_Init+0x8c>)
 800891e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008922:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	20000788 	.word	0x20000788

08008934 <MotorInit>:

void MotorInit(void)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	af00      	add	r7, sp, #0
	CanConfig_Init();
 8008938:	f7ff ff8c 	bl	8008854 <CanConfig_Init>
	MotorInfo_Init();
 800893c:	f7ff ffb2 	bl	80088a4 <MotorInfo_Init>
	HAL_CAN_Start(&hcan1);
 8008940:	4807      	ldr	r0, [pc, #28]	; (8008960 <MotorInit+0x2c>)
 8008942:	f7f9 ff07 	bl	8002754 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8008946:	2102      	movs	r1, #2
 8008948:	4805      	ldr	r0, [pc, #20]	; (8008960 <MotorInit+0x2c>)
 800894a:	f7fa f934 	bl	8002bb6 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan2);
 800894e:	4805      	ldr	r0, [pc, #20]	; (8008964 <MotorInit+0x30>)
 8008950:	f7f9 ff00 	bl	8002754 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8008954:	2110      	movs	r1, #16
 8008956:	4803      	ldr	r0, [pc, #12]	; (8008964 <MotorInit+0x30>)
 8008958:	f7fa f92d 	bl	8002bb6 <HAL_CAN_ActivateNotification>
}
 800895c:	bf00      	nop
 800895e:	bd80      	pop	{r7, pc}
 8008960:	20000390 	.word	0x20000390
 8008964:	200003b8 	.word	0x200003b8

08008968 <Set_ChasissConf>:

//-16384 ~ 16384
void Set_ChasissConf(int16_t Chasiss1,int16_t Chasiss2,int16_t Chasiss3,int16_t Chasiss4)
{
 8008968:	b590      	push	{r4, r7, lr}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	4604      	mov	r4, r0
 8008970:	4608      	mov	r0, r1
 8008972:	4611      	mov	r1, r2
 8008974:	461a      	mov	r2, r3
 8008976:	4623      	mov	r3, r4
 8008978:	80fb      	strh	r3, [r7, #6]
 800897a:	4603      	mov	r3, r0
 800897c:	80bb      	strh	r3, [r7, #4]
 800897e:	460b      	mov	r3, r1
 8008980:	807b      	strh	r3, [r7, #2]
 8008982:	4613      	mov	r3, r2
 8008984:	803b      	strh	r3, [r7, #0]
	uint8_t Data[8]={0};
 8008986:	2300      	movs	r3, #0
 8008988:	60bb      	str	r3, [r7, #8]
 800898a:	2300      	movs	r3, #0
 800898c:	60fb      	str	r3, [r7, #12]
	Data[0]=Chasiss1>>8;
 800898e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008992:	121b      	asrs	r3, r3, #8
 8008994:	b21b      	sxth	r3, r3
 8008996:	b2db      	uxtb	r3, r3
 8008998:	723b      	strb	r3, [r7, #8]
	Data[1]=Chasiss1;
 800899a:	88fb      	ldrh	r3, [r7, #6]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	727b      	strb	r3, [r7, #9]
	Data[2]=Chasiss2>>8;
 80089a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80089a4:	121b      	asrs	r3, r3, #8
 80089a6:	b21b      	sxth	r3, r3
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	72bb      	strb	r3, [r7, #10]
	Data[3]=Chasiss2;
 80089ac:	88bb      	ldrh	r3, [r7, #4]
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	72fb      	strb	r3, [r7, #11]
	Data[4]=Chasiss3>>8;
 80089b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089b6:	121b      	asrs	r3, r3, #8
 80089b8:	b21b      	sxth	r3, r3
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	733b      	strb	r3, [r7, #12]
	Data[5]=Chasiss3;
 80089be:	887b      	ldrh	r3, [r7, #2]
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	737b      	strb	r3, [r7, #13]
	Data[6]=Chasiss4>>8;
 80089c4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80089c8:	121b      	asrs	r3, r3, #8
 80089ca:	b21b      	sxth	r3, r3
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	73bb      	strb	r3, [r7, #14]
	Data[7]=Chasiss4;
 80089d0:	883b      	ldrh	r3, [r7, #0]
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	73fb      	strb	r3, [r7, #15]
	HAL_CAN_AddTxMessage(&hcan1, &Motor_TXHeader[Chassis], Data, (uint32_t *)CAN_TX_MAILBOX0);
 80089d6:	f107 0208 	add.w	r2, r7, #8
 80089da:	2301      	movs	r3, #1
 80089dc:	4903      	ldr	r1, [pc, #12]	; (80089ec <Set_ChasissConf+0x84>)
 80089de:	4804      	ldr	r0, [pc, #16]	; (80089f0 <Set_ChasissConf+0x88>)
 80089e0:	f7f9 fefc 	bl	80027dc <HAL_CAN_AddTxMessage>
}
 80089e4:	bf00      	nop
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd90      	pop	{r4, r7, pc}
 80089ec:	20000788 	.word	0x20000788
 80089f0:	20000390 	.word	0x20000390

080089f4 <Set_GimbalConf>:

//-30000 ~ 30000
void Set_GimbalConf(int16_t Yaw,int16_t Pitch)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	4603      	mov	r3, r0
 80089fc:	460a      	mov	r2, r1
 80089fe:	80fb      	strh	r3, [r7, #6]
 8008a00:	4613      	mov	r3, r2
 8008a02:	80bb      	strh	r3, [r7, #4]
	uint8_t Data[8]={0};
 8008a04:	2300      	movs	r3, #0
 8008a06:	60bb      	str	r3, [r7, #8]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
	Data[0]=Yaw>>8;
 8008a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a10:	121b      	asrs	r3, r3, #8
 8008a12:	b21b      	sxth	r3, r3
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	723b      	strb	r3, [r7, #8]
	Data[1]=Yaw;
 8008a18:	88fb      	ldrh	r3, [r7, #6]
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	727b      	strb	r3, [r7, #9]
	Data[2]=Pitch>>8;
 8008a1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008a22:	121b      	asrs	r3, r3, #8
 8008a24:	b21b      	sxth	r3, r3
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	72bb      	strb	r3, [r7, #10]
	Data[3]=Pitch;
 8008a2a:	88bb      	ldrh	r3, [r7, #4]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	72fb      	strb	r3, [r7, #11]
	HAL_CAN_AddTxMessage(&hcan2, &Motor_TXHeader[Gimbal], Data, (uint32_t *)CAN_TX_MAILBOX0);
 8008a30:	f107 0208 	add.w	r2, r7, #8
 8008a34:	2301      	movs	r3, #1
 8008a36:	4904      	ldr	r1, [pc, #16]	; (8008a48 <Set_GimbalConf+0x54>)
 8008a38:	4804      	ldr	r0, [pc, #16]	; (8008a4c <Set_GimbalConf+0x58>)
 8008a3a:	f7f9 fecf 	bl	80027dc <HAL_CAN_AddTxMessage>
}
 8008a3e:	bf00      	nop
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	200007a0 	.word	0x200007a0
 8008a4c:	200003b8 	.word	0x200003b8

08008a50 <Set_AmmoSpeed>:

void Set_AmmoSpeed(int16_t Frict_L,int16_t Frict_R,int16_t Ammo)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	4603      	mov	r3, r0
 8008a58:	80fb      	strh	r3, [r7, #6]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	80bb      	strh	r3, [r7, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	807b      	strh	r3, [r7, #2]
	uint8_t Data[8]={0};
 8008a62:	2300      	movs	r3, #0
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]
	Data[0]=Frict_L>>8;
 8008a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a6e:	121b      	asrs	r3, r3, #8
 8008a70:	b21b      	sxth	r3, r3
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	723b      	strb	r3, [r7, #8]
	Data[1]=Frict_L;
 8008a76:	88fb      	ldrh	r3, [r7, #6]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	727b      	strb	r3, [r7, #9]
	Data[2]=Frict_R>>8;
 8008a7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008a80:	121b      	asrs	r3, r3, #8
 8008a82:	b21b      	sxth	r3, r3
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	72bb      	strb	r3, [r7, #10]
	Data[3]=Frict_R;
 8008a88:	88bb      	ldrh	r3, [r7, #4]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	72fb      	strb	r3, [r7, #11]
	Data[4]=Ammo>>8;
 8008a8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008a92:	121b      	asrs	r3, r3, #8
 8008a94:	b21b      	sxth	r3, r3
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	733b      	strb	r3, [r7, #12]
	Data[5]=Ammo;
 8008a9a:	887b      	ldrh	r3, [r7, #2]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	737b      	strb	r3, [r7, #13]
	HAL_CAN_AddTxMessage(&hcan2, &Motor_TXHeader[Frict], Data, (uint32_t *)CAN_TX_MAILBOX0);
 8008aa0:	f107 0208 	add.w	r2, r7, #8
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	4904      	ldr	r1, [pc, #16]	; (8008ab8 <Set_AmmoSpeed+0x68>)
 8008aa8:	4804      	ldr	r0, [pc, #16]	; (8008abc <Set_AmmoSpeed+0x6c>)
 8008aaa:	f7f9 fe97 	bl	80027dc <HAL_CAN_AddTxMessage>
}
 8008aae:	bf00      	nop
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	200007b8 	.word	0x200007b8
 8008abc:	200003b8 	.word	0x200003b8

08008ac0 <Motor_RecieveData>:


void Motor_RecieveData(sMotor_Info *motor_info,uint8_t *Data)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
	motor_info->Angle = (Data[0]<<8)|Data[1];
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	021b      	lsls	r3, r3, #8
 8008ad0:	b21a      	sxth	r2, r3
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	b21b      	sxth	r3, r3
 8008ada:	4313      	orrs	r3, r2
 8008adc:	b21b      	sxth	r3, r3
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	805a      	strh	r2, [r3, #2]
	motor_info->Speed = (Data[2]<<8)|Data[3];
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	3302      	adds	r3, #2
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	021b      	lsls	r3, r3, #8
 8008aec:	b21a      	sxth	r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	3303      	adds	r3, #3
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	b21b      	sxth	r3, r3
 8008af6:	4313      	orrs	r3, r2
 8008af8:	b21a      	sxth	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	80da      	strh	r2, [r3, #6]
	motor_info->Current = (Data[4]<<8)|Data[5];
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	3304      	adds	r3, #4
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	021b      	lsls	r3, r3, #8
 8008b06:	b21a      	sxth	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	3305      	adds	r3, #5
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	b21b      	sxth	r3, r3
 8008b10:	4313      	orrs	r3, r2
 8008b12:	b21a      	sxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	811a      	strh	r2, [r3, #8]
	motor_info->temperature =Data[6];
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	799a      	ldrb	r2, [r3, #6]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	729a      	strb	r2, [r3, #10]
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <PIDInfo_Limit>:
			{0.15f,1.5f,0,28000,0},	//yaw
			{0}}
};

float PIDInfo_Limit(float Value,float MaxValue)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	ed87 0a01 	vstr	s0, [r7, #4]
 8008b36:	edc7 0a00 	vstr	s1, [r7]
	if(fabs(Value) > MaxValue)
 8008b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8008b3e:	eef0 7ae7 	vabs.f32	s15, s15
 8008b42:	ed97 7a00 	vldr	s14, [r7]
 8008b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b4e:	d50f      	bpl.n	8008b70 <PIDInfo_Limit+0x44>
	{
		if(Value > 0)
 8008b50:	edd7 7a01 	vldr	s15, [r7, #4]
 8008b54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5c:	dd02      	ble.n	8008b64 <PIDInfo_Limit+0x38>
			Value = MaxValue;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	607b      	str	r3, [r7, #4]
 8008b62:	e005      	b.n	8008b70 <PIDInfo_Limit+0x44>
		else
			Value = -MaxValue;
 8008b64:	edd7 7a00 	vldr	s15, [r7]
 8008b68:	eef1 7a67 	vneg.f32	s15, s15
 8008b6c:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	return Value;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	ee07 3a90 	vmov	s15, r3
}
 8008b76:	eeb0 0a67 	vmov.f32	s0, s15
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <PID_Init>:

void PID_Init(void)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<8;i++)
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	71fb      	strb	r3, [r7, #7]
 8008b8e:	e0ce      	b.n	8008d2e <PID_Init+0x1aa>
	{
		PosiPID_Info[i].Kp		=PidInfo[0][i][0];
 8008b90:	79f9      	ldrb	r1, [r7, #7]
 8008b92:	79fa      	ldrb	r2, [r7, #7]
 8008b94:	486b      	ldr	r0, [pc, #428]	; (8008d44 <PID_Init+0x1c0>)
 8008b96:	460b      	mov	r3, r1
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	440b      	add	r3, r1
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4403      	add	r3, r0
 8008ba0:	6819      	ldr	r1, [r3, #0]
 8008ba2:	4869      	ldr	r0, [pc, #420]	; (8008d48 <PID_Init+0x1c4>)
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4403      	add	r3, r0
 8008bae:	6019      	str	r1, [r3, #0]
		PosiPID_Info[i].Ki		=PidInfo[0][i][1];
 8008bb0:	79f9      	ldrb	r1, [r7, #7]
 8008bb2:	79fa      	ldrb	r2, [r7, #7]
 8008bb4:	4863      	ldr	r0, [pc, #396]	; (8008d44 <PID_Init+0x1c0>)
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	440b      	add	r3, r1
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4403      	add	r3, r0
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	6819      	ldr	r1, [r3, #0]
 8008bc4:	4860      	ldr	r0, [pc, #384]	; (8008d48 <PID_Init+0x1c4>)
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	00db      	lsls	r3, r3, #3
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4403      	add	r3, r0
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	6019      	str	r1, [r3, #0]
		PosiPID_Info[i].Kd		=PidInfo[0][i][2];
 8008bd4:	79f9      	ldrb	r1, [r7, #7]
 8008bd6:	79fa      	ldrb	r2, [r7, #7]
 8008bd8:	485a      	ldr	r0, [pc, #360]	; (8008d44 <PID_Init+0x1c0>)
 8008bda:	460b      	mov	r3, r1
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	440b      	add	r3, r1
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4403      	add	r3, r0
 8008be4:	3308      	adds	r3, #8
 8008be6:	6819      	ldr	r1, [r3, #0]
 8008be8:	4857      	ldr	r0, [pc, #348]	; (8008d48 <PID_Init+0x1c4>)
 8008bea:	4613      	mov	r3, r2
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4403      	add	r3, r0
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	6019      	str	r1, [r3, #0]
		PosiPID_Info[i].MaxSum	=PidInfo[0][i][3];
 8008bf8:	79f9      	ldrb	r1, [r7, #7]
 8008bfa:	79fa      	ldrb	r2, [r7, #7]
 8008bfc:	4851      	ldr	r0, [pc, #324]	; (8008d44 <PID_Init+0x1c0>)
 8008bfe:	460b      	mov	r3, r1
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	440b      	add	r3, r1
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4403      	add	r3, r0
 8008c08:	330c      	adds	r3, #12
 8008c0a:	6819      	ldr	r1, [r3, #0]
 8008c0c:	484e      	ldr	r0, [pc, #312]	; (8008d48 <PID_Init+0x1c4>)
 8008c0e:	4613      	mov	r3, r2
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4403      	add	r3, r0
 8008c18:	3318      	adds	r3, #24
 8008c1a:	6019      	str	r1, [r3, #0]
		PosiPID_Info[i].MaxOutput=PidInfo[0][i][4];
 8008c1c:	79f9      	ldrb	r1, [r7, #7]
 8008c1e:	79fa      	ldrb	r2, [r7, #7]
 8008c20:	4848      	ldr	r0, [pc, #288]	; (8008d44 <PID_Init+0x1c0>)
 8008c22:	460b      	mov	r3, r1
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	440b      	add	r3, r1
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4403      	add	r3, r0
 8008c2c:	3310      	adds	r3, #16
 8008c2e:	6819      	ldr	r1, [r3, #0]
 8008c30:	4845      	ldr	r0, [pc, #276]	; (8008d48 <PID_Init+0x1c4>)
 8008c32:	4613      	mov	r3, r2
 8008c34:	00db      	lsls	r3, r3, #3
 8008c36:	4413      	add	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4403      	add	r3, r0
 8008c3c:	3320      	adds	r3, #32
 8008c3e:	6019      	str	r1, [r3, #0]
		PosiPID_Info[i].Err		=0;
 8008c40:	79fa      	ldrb	r2, [r7, #7]
 8008c42:	4941      	ldr	r1, [pc, #260]	; (8008d48 <PID_Init+0x1c4>)
 8008c44:	4613      	mov	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	330c      	adds	r3, #12
 8008c50:	f04f 0200 	mov.w	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]
		PosiPID_Info[i].Sum  	=0;
 8008c56:	79fa      	ldrb	r2, [r7, #7]
 8008c58:	493b      	ldr	r1, [pc, #236]	; (8008d48 <PID_Init+0x1c4>)
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	440b      	add	r3, r1
 8008c64:	3314      	adds	r3, #20
 8008c66:	f04f 0200 	mov.w	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]
		PosiPID_Info[i].Output	=0;
 8008c6c:	79fa      	ldrb	r2, [r7, #7]
 8008c6e:	4936      	ldr	r1, [pc, #216]	; (8008d48 <PID_Init+0x1c4>)
 8008c70:	4613      	mov	r3, r2
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	440b      	add	r3, r1
 8008c7a:	331c      	adds	r3, #28
 8008c7c:	f04f 0200 	mov.w	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]

		IncrPID_Info[i].Kp		=PidInfo[1][i][0];
 8008c82:	79fa      	ldrb	r2, [r7, #7]
 8008c84:	79f9      	ldrb	r1, [r7, #7]
 8008c86:	482f      	ldr	r0, [pc, #188]	; (8008d44 <PID_Init+0x1c0>)
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4403      	add	r3, r0
 8008c92:	33c8      	adds	r3, #200	; 0xc8
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	482d      	ldr	r0, [pc, #180]	; (8008d4c <PID_Init+0x1c8>)
 8008c98:	014b      	lsls	r3, r1, #5
 8008c9a:	4403      	add	r3, r0
 8008c9c:	601a      	str	r2, [r3, #0]
		IncrPID_Info[i].Ki		=PidInfo[1][i][1];
 8008c9e:	79fa      	ldrb	r2, [r7, #7]
 8008ca0:	79f9      	ldrb	r1, [r7, #7]
 8008ca2:	4828      	ldr	r0, [pc, #160]	; (8008d44 <PID_Init+0x1c0>)
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4403      	add	r3, r0
 8008cae:	33cc      	adds	r3, #204	; 0xcc
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4826      	ldr	r0, [pc, #152]	; (8008d4c <PID_Init+0x1c8>)
 8008cb4:	014b      	lsls	r3, r1, #5
 8008cb6:	4403      	add	r3, r0
 8008cb8:	3304      	adds	r3, #4
 8008cba:	601a      	str	r2, [r3, #0]
		IncrPID_Info[i].Kd		=PidInfo[1][i][2];
 8008cbc:	79fa      	ldrb	r2, [r7, #7]
 8008cbe:	79f9      	ldrb	r1, [r7, #7]
 8008cc0:	4820      	ldr	r0, [pc, #128]	; (8008d44 <PID_Init+0x1c0>)
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4403      	add	r3, r0
 8008ccc:	33d0      	adds	r3, #208	; 0xd0
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	481e      	ldr	r0, [pc, #120]	; (8008d4c <PID_Init+0x1c8>)
 8008cd2:	014b      	lsls	r3, r1, #5
 8008cd4:	4403      	add	r3, r0
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	601a      	str	r2, [r3, #0]
		IncrPID_Info[i].MaxOutput=PidInfo[1][i][3];
 8008cda:	79fa      	ldrb	r2, [r7, #7]
 8008cdc:	79f9      	ldrb	r1, [r7, #7]
 8008cde:	4819      	ldr	r0, [pc, #100]	; (8008d44 <PID_Init+0x1c0>)
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4403      	add	r3, r0
 8008cea:	33d4      	adds	r3, #212	; 0xd4
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	4817      	ldr	r0, [pc, #92]	; (8008d4c <PID_Init+0x1c8>)
 8008cf0:	014b      	lsls	r3, r1, #5
 8008cf2:	4403      	add	r3, r0
 8008cf4:	331c      	adds	r3, #28
 8008cf6:	601a      	str	r2, [r3, #0]
		IncrPID_Info[i].Err		=0;
 8008cf8:	79fb      	ldrb	r3, [r7, #7]
 8008cfa:	4a14      	ldr	r2, [pc, #80]	; (8008d4c <PID_Init+0x1c8>)
 8008cfc:	015b      	lsls	r3, r3, #5
 8008cfe:	4413      	add	r3, r2
 8008d00:	330c      	adds	r3, #12
 8008d02:	f04f 0200 	mov.w	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
		IncrPID_Info[i].LastErr	=0;
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	4a10      	ldr	r2, [pc, #64]	; (8008d4c <PID_Init+0x1c8>)
 8008d0c:	015b      	lsls	r3, r3, #5
 8008d0e:	4413      	add	r3, r2
 8008d10:	3310      	adds	r3, #16
 8008d12:	f04f 0200 	mov.w	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
		IncrPID_Info[i].Output	=0;
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	4a0c      	ldr	r2, [pc, #48]	; (8008d4c <PID_Init+0x1c8>)
 8008d1c:	015b      	lsls	r3, r3, #5
 8008d1e:	4413      	add	r3, r2
 8008d20:	3318      	adds	r3, #24
 8008d22:	f04f 0200 	mov.w	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0;i<8;i++)
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	71fb      	strb	r3, [r7, #7]
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	2b07      	cmp	r3, #7
 8008d32:	f67f af2d 	bls.w	8008b90 <PID_Init+0xc>
	}
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	20000010 	.word	0x20000010
 8008d48:	200007d0 	.word	0x200007d0
 8008d4c:	20000938 	.word	0x20000938

08008d50 <IncrPID>:
					+PosiPID->Kd *	(PosiPID->Err -PosiPID->LastErr);
	PosiPID->Output =PIDInfo_Limit(PosiPID->Output, PosiPID->MaxOutput);
}

void IncrPID(sIncrPID_Info *IncrPID,sMotor_Info *MotorInfo)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
	IncrPID->LastLastErr =IncrPID->LastErr ;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	691a      	ldr	r2, [r3, #16]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	615a      	str	r2, [r3, #20]
	IncrPID->LastErr =IncrPID ->Err;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	611a      	str	r2, [r3, #16]
	IncrPID->Err =MotorInfo->TargetSpeed -MotorInfo ->Speed;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008d70:	461a      	mov	r2, r3
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	edc3 7a03 	vstr	s15, [r3, #12]
	IncrPID->Output +=IncrPID->Kp *IncrPID->Err -IncrPID ->LastErr
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	ed93 7a06 	vldr	s14, [r3, #24]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	edd3 6a00 	vldr	s13, [r3]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	edd3 7a03 	vldr	s15, [r3, #12]
 8008d9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	edd3 7a04 	vldr	s15, [r3, #16]
 8008da4:	ee76 6ae7 	vsub.f32	s13, s13, s15
					 +IncrPID->Ki *IncrPID->Err
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	ed93 6a01 	vldr	s12, [r3, #4]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	edd3 7a03 	vldr	s15, [r3, #12]
 8008db4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008db8:	ee76 6aa7 	vadd.f32	s13, s13, s15
					 +IncrPID->Kd *(IncrPID->Err -2 * IncrPID->LastErr +IncrPID->LastLastErr);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	ed93 6a02 	vldr	s12, [r3, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	edd3 5a03 	vldr	s11, [r3, #12]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	edd3 7a04 	vldr	s15, [r3, #16]
 8008dce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008dd2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	edd3 7a05 	vldr	s15, [r3, #20]
 8008ddc:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8008de0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
	IncrPID->Output +=IncrPID->Kp *IncrPID->Err -IncrPID ->LastErr
 8008de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	edc3 7a06 	vstr	s15, [r3, #24]
	IncrPID->Output =PIDInfo_Limit(IncrPID->Output, IncrPID->MaxOutput);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	edd3 7a06 	vldr	s15, [r3, #24]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	ed93 7a07 	vldr	s14, [r3, #28]
 8008dfe:	eef0 0a47 	vmov.f32	s1, s14
 8008e02:	eeb0 0a67 	vmov.f32	s0, s15
 8008e06:	f7ff fe91 	bl	8008b2c <PIDInfo_Limit>
 8008e0a:	eef0 7a40 	vmov.f32	s15, s0
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <Posi_IncrPID>:

void Posi_IncrPID(sPosiPID_Info *PosiPID,sIncrPID_Info *IncrPID,sMotor_Info *MotorInfo)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
	PosiPID->LastErr=PosiPID->Err;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	611a      	str	r2, [r3, #16]
	PosiPID->Err=MotorInfo->TargetAngle -MotorInfo->Angle;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	885b      	ldrh	r3, [r3, #2]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	ee07 3a90 	vmov	s15, r3
 8008e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	edc3 7a03 	vstr	s15, [r3, #12]
	if(PosiPID->Err > 4096)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e50:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8009000 <Posi_IncrPID+0x1e4>
 8008e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5c:	dd0a      	ble.n	8008e74 <Posi_IncrPID+0x58>
		PosiPID->Err -= 8192;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e64:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009004 <Posi_IncrPID+0x1e8>
 8008e68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	edc3 7a03 	vstr	s15, [r3, #12]
 8008e72:	e013      	b.n	8008e9c <Posi_IncrPID+0x80>
	else if(PosiPID->Err < -4096)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e7a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8009008 <Posi_IncrPID+0x1ec>
 8008e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e86:	d509      	bpl.n	8008e9c <Posi_IncrPID+0x80>
		PosiPID->Err += 8192;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e8e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8009004 <Posi_IncrPID+0x1e8>
 8008e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	edc3 7a03 	vstr	s15, [r3, #12]
	PosiPID->Sum +=PosiPID->Err;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	edd3 7a03 	vldr	s15, [r3, #12]
 8008ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	edc3 7a05 	vstr	s15, [r3, #20]
	PosiPID->Sum =PIDInfo_Limit(PosiPID->Sum, PosiPID->MaxSum);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	edd3 7a05 	vldr	s15, [r3, #20]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	ed93 7a06 	vldr	s14, [r3, #24]
 8008ebe:	eef0 0a47 	vmov.f32	s1, s14
 8008ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ec6:	f7ff fe31 	bl	8008b2c <PIDInfo_Limit>
 8008eca:	eef0 7a40 	vmov.f32	s15, s0
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	edc3 7a05 	vstr	s15, [r3, #20]
	PosiPID->Output =PosiPID->Kp *	PosiPID->Err
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	ed93 7a00 	vldr	s14, [r3]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	edd3 7a03 	vldr	s15, [r3, #12]
 8008ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+PosiPID->Ki *	PosiPID->Sum
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	edd3 6a01 	vldr	s13, [r3, #4]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	edd3 7a05 	vldr	s15, [r3, #20]
 8008ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
					+PosiPID->Kd *	(PosiPID->Err -PosiPID->LastErr);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	edd3 6a02 	vldr	s13, [r3, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	ed93 6a03 	vldr	s12, [r3, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	edd3 7a04 	vldr	s15, [r3, #16]
 8008f0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f12:	ee77 7a27 	vadd.f32	s15, s14, s15
	PosiPID->Output =PosiPID->Kp *	PosiPID->Err
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	edc3 7a07 	vstr	s15, [r3, #28]
	PosiPID->Output =PIDInfo_Limit(PosiPID->Output, PosiPID->MaxOutput);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	ed93 7a08 	vldr	s14, [r3, #32]
 8008f28:	eef0 0a47 	vmov.f32	s1, s14
 8008f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8008f30:	f7ff fdfc 	bl	8008b2c <PIDInfo_Limit>
 8008f34:	eef0 7a40 	vmov.f32	s15, s0
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	edc3 7a07 	vstr	s15, [r3, #28]

	IncrPID->LastLastErr =IncrPID->LastErr ;
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	691a      	ldr	r2, [r3, #16]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	615a      	str	r2, [r3, #20]
	IncrPID->LastErr =IncrPID ->Err;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	611a      	str	r2, [r3, #16]
	IncrPID->Err =PosiPID->Output -MotorInfo ->Speed;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	ed93 7a07 	vldr	s14, [r3, #28]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	edc3 7a03 	vstr	s15, [r3, #12]
	IncrPID->Output +=IncrPID->Kp *IncrPID->Err -IncrPID ->LastErr
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	ed93 7a06 	vldr	s14, [r3, #24]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	edd3 6a00 	vldr	s13, [r3]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8008f7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	edd3 7a04 	vldr	s15, [r3, #16]
 8008f88:	ee76 6ae7 	vsub.f32	s13, s13, s15
					 +IncrPID->Ki *IncrPID->Err
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	ed93 6a01 	vldr	s12, [r3, #4]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	edd3 7a03 	vldr	s15, [r3, #12]
 8008f98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008f9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
					 +IncrPID->Kd *(IncrPID->Err -2.0f * IncrPID->LastErr +IncrPID->LastLastErr);
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	ed93 6a02 	vldr	s12, [r3, #8]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	edd3 5a03 	vldr	s11, [r3, #12]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	edd3 7a04 	vldr	s15, [r3, #16]
 8008fb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008fb6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	edd3 7a05 	vldr	s15, [r3, #20]
 8008fc0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8008fc4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
	IncrPID->Output +=IncrPID->Kp *IncrPID->Err -IncrPID ->LastErr
 8008fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	edc3 7a06 	vstr	s15, [r3, #24]
	IncrPID->Output =PIDInfo_Limit(IncrPID->Output, IncrPID->MaxOutput);
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	edd3 7a06 	vldr	s15, [r3, #24]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	ed93 7a07 	vldr	s14, [r3, #28]
 8008fe2:	eef0 0a47 	vmov.f32	s1, s14
 8008fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8008fea:	f7ff fd9f 	bl	8008b2c <PIDInfo_Limit>
 8008fee:	eef0 7a40 	vmov.f32	s15, s0
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8008ff8:	bf00      	nop
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	45800000 	.word	0x45800000
 8009004:	46000000 	.word	0x46000000
 8009008:	c5800000 	.word	0xc5800000

0800900c <RemoteInit>:

uint8_t RecieveDate[18]={0};
RemoteData_t RemoteData={0};

void RemoteInit(void)
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
	RemoteData.RemoteOrBoard=Remote;
 8009010:	4b03      	ldr	r3, [pc, #12]	; (8009020 <RemoteInit+0x14>)
 8009012:	2200      	movs	r2, #0
 8009014:	73da      	strb	r2, [r3, #15]

}
 8009016:	bf00      	nop
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	20000a8c 	.word	0x20000a8c

08009024 <RemoteData_Unpack>:

void RemoteData_Unpack(void)
{
 8009024:	b480      	push	{r7}
 8009026:	b089      	sub	sp, #36	; 0x24
 8009028:	af00      	add	r7, sp, #0
	Remote_t Temp={0};
 800902a:	463b      	mov	r3, r7
 800902c:	2200      	movs	r2, #0
 800902e:	601a      	str	r2, [r3, #0]
 8009030:	605a      	str	r2, [r3, #4]
 8009032:	609a      	str	r2, [r3, #8]
 8009034:	60da      	str	r2, [r3, #12]
 8009036:	611a      	str	r2, [r3, #16]
 8009038:	615a      	str	r2, [r3, #20]
 800903a:	619a      	str	r2, [r3, #24]
	Temp. ch0 = ((RecieveDate[1]<<8)|RecieveDate[0])&0x7ff;
 800903c:	4b95      	ldr	r3, [pc, #596]	; (8009294 <RemoteData_Unpack+0x270>)
 800903e:	785b      	ldrb	r3, [r3, #1]
 8009040:	021b      	lsls	r3, r3, #8
 8009042:	b21a      	sxth	r2, r3
 8009044:	4b93      	ldr	r3, [pc, #588]	; (8009294 <RemoteData_Unpack+0x270>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	b21b      	sxth	r3, r3
 800904a:	4313      	orrs	r3, r2
 800904c:	b21b      	sxth	r3, r3
 800904e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009052:	b21b      	sxth	r3, r3
 8009054:	803b      	strh	r3, [r7, #0]
	Temp. ch0 -=1024;
 8009056:	f9b7 3000 	ldrsh.w	r3, [r7]
 800905a:	b29b      	uxth	r3, r3
 800905c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009060:	b29b      	uxth	r3, r3
 8009062:	b21b      	sxth	r3, r3
 8009064:	803b      	strh	r3, [r7, #0]
	Temp. ch1 = ((RecieveDate[2]<<5)|(RecieveDate[1]>>3))&0x7ff;
 8009066:	4b8b      	ldr	r3, [pc, #556]	; (8009294 <RemoteData_Unpack+0x270>)
 8009068:	789b      	ldrb	r3, [r3, #2]
 800906a:	015b      	lsls	r3, r3, #5
 800906c:	b21a      	sxth	r2, r3
 800906e:	4b89      	ldr	r3, [pc, #548]	; (8009294 <RemoteData_Unpack+0x270>)
 8009070:	785b      	ldrb	r3, [r3, #1]
 8009072:	08db      	lsrs	r3, r3, #3
 8009074:	b2db      	uxtb	r3, r3
 8009076:	b21b      	sxth	r3, r3
 8009078:	4313      	orrs	r3, r2
 800907a:	b21b      	sxth	r3, r3
 800907c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009080:	b21b      	sxth	r3, r3
 8009082:	807b      	strh	r3, [r7, #2]
	Temp. ch1 -=1024;
 8009084:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009088:	b29b      	uxth	r3, r3
 800908a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800908e:	b29b      	uxth	r3, r3
 8009090:	b21b      	sxth	r3, r3
 8009092:	807b      	strh	r3, [r7, #2]
	Temp. ch2 = ((RecieveDate[4]<<10)|(RecieveDate[3]<<2)|(RecieveDate[2]>>6))&0x7ff;
 8009094:	4b7f      	ldr	r3, [pc, #508]	; (8009294 <RemoteData_Unpack+0x270>)
 8009096:	791b      	ldrb	r3, [r3, #4]
 8009098:	029b      	lsls	r3, r3, #10
 800909a:	b21a      	sxth	r2, r3
 800909c:	4b7d      	ldr	r3, [pc, #500]	; (8009294 <RemoteData_Unpack+0x270>)
 800909e:	78db      	ldrb	r3, [r3, #3]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	b21b      	sxth	r3, r3
 80090a4:	4313      	orrs	r3, r2
 80090a6:	b21a      	sxth	r2, r3
 80090a8:	4b7a      	ldr	r3, [pc, #488]	; (8009294 <RemoteData_Unpack+0x270>)
 80090aa:	789b      	ldrb	r3, [r3, #2]
 80090ac:	099b      	lsrs	r3, r3, #6
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	b21b      	sxth	r3, r3
 80090b2:	4313      	orrs	r3, r2
 80090b4:	b21b      	sxth	r3, r3
 80090b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090ba:	b21b      	sxth	r3, r3
 80090bc:	80bb      	strh	r3, [r7, #4]
	Temp. ch2 -=1024;
 80090be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	b21b      	sxth	r3, r3
 80090cc:	80bb      	strh	r3, [r7, #4]
	Temp. ch3 = ((RecieveDate[5]<<7)|(RecieveDate[4]>>1))&0x7ff;
 80090ce:	4b71      	ldr	r3, [pc, #452]	; (8009294 <RemoteData_Unpack+0x270>)
 80090d0:	795b      	ldrb	r3, [r3, #5]
 80090d2:	01db      	lsls	r3, r3, #7
 80090d4:	b21a      	sxth	r2, r3
 80090d6:	4b6f      	ldr	r3, [pc, #444]	; (8009294 <RemoteData_Unpack+0x270>)
 80090d8:	791b      	ldrb	r3, [r3, #4]
 80090da:	085b      	lsrs	r3, r3, #1
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	b21b      	sxth	r3, r3
 80090e0:	4313      	orrs	r3, r2
 80090e2:	b21b      	sxth	r3, r3
 80090e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090e8:	b21b      	sxth	r3, r3
 80090ea:	80fb      	strh	r3, [r7, #6]
	Temp. ch3 -=1024;
 80090ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	b21b      	sxth	r3, r3
 80090fa:	80fb      	strh	r3, [r7, #6]
	Temp. wheel =(RecieveDate[17]<<8)|(RecieveDate[16]);
 80090fc:	4b65      	ldr	r3, [pc, #404]	; (8009294 <RemoteData_Unpack+0x270>)
 80090fe:	7c5b      	ldrb	r3, [r3, #17]
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	b21a      	sxth	r2, r3
 8009104:	4b63      	ldr	r3, [pc, #396]	; (8009294 <RemoteData_Unpack+0x270>)
 8009106:	7c1b      	ldrb	r3, [r3, #16]
 8009108:	b21b      	sxth	r3, r3
 800910a:	4313      	orrs	r3, r2
 800910c:	b21b      	sxth	r3, r3
 800910e:	817b      	strh	r3, [r7, #10]
	Temp. wheel -=1024;
 8009110:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009114:	b29b      	uxth	r3, r3
 8009116:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800911a:	b29b      	uxth	r3, r3
 800911c:	b21b      	sxth	r3, r3
 800911e:	817b      	strh	r3, [r7, #10]

	Temp. s1 =(RecieveDate[5]>>4)&0x0003;
 8009120:	4b5c      	ldr	r3, [pc, #368]	; (8009294 <RemoteData_Unpack+0x270>)
 8009122:	795b      	ldrb	r3, [r3, #5]
 8009124:	091b      	lsrs	r3, r3, #4
 8009126:	b2db      	uxtb	r3, r3
 8009128:	f003 0303 	and.w	r3, r3, #3
 800912c:	b2db      	uxtb	r3, r3
 800912e:	723b      	strb	r3, [r7, #8]
	Temp. s2 =((RecieveDate[5]>>4)&0x000c)>>2;
 8009130:	4b58      	ldr	r3, [pc, #352]	; (8009294 <RemoteData_Unpack+0x270>)
 8009132:	795b      	ldrb	r3, [r3, #5]
 8009134:	091b      	lsrs	r3, r3, #4
 8009136:	b2db      	uxtb	r3, r3
 8009138:	109b      	asrs	r3, r3, #2
 800913a:	b2db      	uxtb	r3, r3
 800913c:	f003 0303 	and.w	r3, r3, #3
 8009140:	b2db      	uxtb	r3, r3
 8009142:	727b      	strb	r3, [r7, #9]

	Temp. X = (RecieveDate[7]<<8)|RecieveDate[6];
 8009144:	4b53      	ldr	r3, [pc, #332]	; (8009294 <RemoteData_Unpack+0x270>)
 8009146:	79db      	ldrb	r3, [r3, #7]
 8009148:	021b      	lsls	r3, r3, #8
 800914a:	b21a      	sxth	r2, r3
 800914c:	4b51      	ldr	r3, [pc, #324]	; (8009294 <RemoteData_Unpack+0x270>)
 800914e:	799b      	ldrb	r3, [r3, #6]
 8009150:	b21b      	sxth	r3, r3
 8009152:	4313      	orrs	r3, r2
 8009154:	b21b      	sxth	r3, r3
 8009156:	81bb      	strh	r3, [r7, #12]
	Temp. Y = (RecieveDate[9]<<8)|RecieveDate[8];
 8009158:	4b4e      	ldr	r3, [pc, #312]	; (8009294 <RemoteData_Unpack+0x270>)
 800915a:	7a5b      	ldrb	r3, [r3, #9]
 800915c:	021b      	lsls	r3, r3, #8
 800915e:	b21a      	sxth	r2, r3
 8009160:	4b4c      	ldr	r3, [pc, #304]	; (8009294 <RemoteData_Unpack+0x270>)
 8009162:	7a1b      	ldrb	r3, [r3, #8]
 8009164:	b21b      	sxth	r3, r3
 8009166:	4313      	orrs	r3, r2
 8009168:	b21b      	sxth	r3, r3
 800916a:	81fb      	strh	r3, [r7, #14]
	Temp. Z = (RecieveDate[11]<<8)|RecieveDate[10];
 800916c:	4b49      	ldr	r3, [pc, #292]	; (8009294 <RemoteData_Unpack+0x270>)
 800916e:	7adb      	ldrb	r3, [r3, #11]
 8009170:	021b      	lsls	r3, r3, #8
 8009172:	b21a      	sxth	r2, r3
 8009174:	4b47      	ldr	r3, [pc, #284]	; (8009294 <RemoteData_Unpack+0x270>)
 8009176:	7a9b      	ldrb	r3, [r3, #10]
 8009178:	b21b      	sxth	r3, r3
 800917a:	4313      	orrs	r3, r2
 800917c:	b21b      	sxth	r3, r3
 800917e:	823b      	strh	r3, [r7, #16]
	Temp. L = RecieveDate[12];
 8009180:	4b44      	ldr	r3, [pc, #272]	; (8009294 <RemoteData_Unpack+0x270>)
 8009182:	7b1b      	ldrb	r3, [r3, #12]
 8009184:	74bb      	strb	r3, [r7, #18]
	Temp. R = RecieveDate[13];
 8009186:	4b43      	ldr	r3, [pc, #268]	; (8009294 <RemoteData_Unpack+0x270>)
 8009188:	7b5b      	ldrb	r3, [r3, #13]
 800918a:	74fb      	strb	r3, [r7, #19]

	uint16_t button = (RecieveDate[15]<<8)|RecieveDate[14];
 800918c:	4b41      	ldr	r3, [pc, #260]	; (8009294 <RemoteData_Unpack+0x270>)
 800918e:	7bdb      	ldrb	r3, [r3, #15]
 8009190:	021b      	lsls	r3, r3, #8
 8009192:	b21a      	sxth	r2, r3
 8009194:	4b3f      	ldr	r3, [pc, #252]	; (8009294 <RemoteData_Unpack+0x270>)
 8009196:	7b9b      	ldrb	r3, [r3, #14]
 8009198:	b21b      	sxth	r3, r3
 800919a:	4313      	orrs	r3, r2
 800919c:	b21b      	sxth	r3, r3
 800919e:	83fb      	strh	r3, [r7, #30]
	Temp. W = button & 0x80;
 80091a0:	8bfb      	ldrh	r3, [r7, #30]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	753b      	strb	r3, [r7, #20]
	Temp. S = button & 0x40;
 80091ac:	8bfb      	ldrh	r3, [r7, #30]
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	757b      	strb	r3, [r7, #21]
	Temp. A = button & 0x20;
 80091b8:	8bfb      	ldrh	r3, [r7, #30]
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	f003 0320 	and.w	r3, r3, #32
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	75bb      	strb	r3, [r7, #22]
	Temp. D = button & 0x10;
 80091c4:	8bfb      	ldrh	r3, [r7, #30]
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	f003 0310 	and.w	r3, r3, #16
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	75fb      	strb	r3, [r7, #23]
	Temp. Q = button & 0x08;
 80091d0:	8bfb      	ldrh	r3, [r7, #30]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f003 0308 	and.w	r3, r3, #8
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	763b      	strb	r3, [r7, #24]
	Temp. E = button & 0x84;
 80091dc:	8bfb      	ldrh	r3, [r7, #30]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	767b      	strb	r3, [r7, #25]
	Temp. Shirt = button & 0x02;
 80091e8:	8bfb      	ldrh	r3, [r7, #30]
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	f003 0302 	and.w	r3, r3, #2
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	76bb      	strb	r3, [r7, #26]
	Temp. Ctrl = button & 0x01;
 80091f4:	8bfb      	ldrh	r3, [r7, #30]
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	76fb      	strb	r3, [r7, #27]


	if(RemoteData.RemoteOrBoard== Remote)
 8009200:	4b25      	ldr	r3, [pc, #148]	; (8009298 <RemoteData_Unpack+0x274>)
 8009202:	7bdb      	ldrb	r3, [r3, #15]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d14b      	bne.n	80092a0 <RemoteData_Unpack+0x27c>
	{
		RemoteData.TargetSpeedX =Temp.ch3 * ChassisSpeed_RemoteChange;
 8009208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800920c:	ee07 3a90 	vmov	s15, r3
 8009210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009214:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800929c <RemoteData_Unpack+0x278>
 8009218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800921c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009220:	ee17 3a90 	vmov	r3, s15
 8009224:	b21a      	sxth	r2, r3
 8009226:	4b1c      	ldr	r3, [pc, #112]	; (8009298 <RemoteData_Unpack+0x274>)
 8009228:	801a      	strh	r2, [r3, #0]
		RemoteData.TargetSpeedY =Temp.ch2 * ChassisSpeed_RemoteChange;
 800922a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800922e:	ee07 3a90 	vmov	s15, r3
 8009232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009236:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800929c <RemoteData_Unpack+0x278>
 800923a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800923e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009242:	ee17 3a90 	vmov	r3, s15
 8009246:	b21a      	sxth	r2, r3
 8009248:	4b13      	ldr	r3, [pc, #76]	; (8009298 <RemoteData_Unpack+0x274>)
 800924a:	805a      	strh	r2, [r3, #2]
		RemoteData.TargetSpeedYaw=Temp.ch0 * YawSpeed_RemoteChange;
 800924c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009250:	ee07 3a90 	vmov	s15, r3
 8009254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009258:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800929c <RemoteData_Unpack+0x278>
 800925c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009264:	ee17 3a90 	vmov	r3, s15
 8009268:	b21a      	sxth	r2, r3
 800926a:	4b0b      	ldr	r3, [pc, #44]	; (8009298 <RemoteData_Unpack+0x274>)
 800926c:	80da      	strh	r2, [r3, #6]
		RemoteData.TargetSpeedPitch=Temp.ch1 *PitchSpeed_RemoteChange;
 800926e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009272:	ee07 3a90 	vmov	s15, r3
 8009276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800927a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800929c <RemoteData_Unpack+0x278>
 800927e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009286:	ee17 3a90 	vmov	r3, s15
 800928a:	b21a      	sxth	r2, r3
 800928c:	4b02      	ldr	r3, [pc, #8]	; (8009298 <RemoteData_Unpack+0x274>)
 800928e:	811a      	strh	r2, [r3, #8]
 8009290:	e05e      	b.n	8009350 <RemoteData_Unpack+0x32c>
 8009292:	bf00      	nop
 8009294:	20000a78 	.word	0x20000a78
 8009298:	20000a8c 	.word	0x20000a8c
 800929c:	3f19999a 	.word	0x3f19999a
	}
	else if(RemoteData.RemoteOrBoard==Board)
 80092a0:	4b37      	ldr	r3, [pc, #220]	; (8009380 <RemoteData_Unpack+0x35c>)
 80092a2:	7bdb      	ldrb	r3, [r3, #15]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d153      	bne.n	8009350 <RemoteData_Unpack+0x32c>
	{
		RemoteData.TargetSpeedX =(Temp.W -Temp.S) * ChassisSpeed_BoardChange;
 80092a8:	7d3b      	ldrb	r3, [r7, #20]
 80092aa:	461a      	mov	r2, r3
 80092ac:	7d7b      	ldrb	r3, [r7, #21]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	ee07 3a90 	vmov	s15, r3
 80092b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092b8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009384 <RemoteData_Unpack+0x360>
 80092bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092c4:	ee17 3a90 	vmov	r3, s15
 80092c8:	b21a      	sxth	r2, r3
 80092ca:	4b2d      	ldr	r3, [pc, #180]	; (8009380 <RemoteData_Unpack+0x35c>)
 80092cc:	801a      	strh	r2, [r3, #0]
		RemoteData.TargetSpeedY =(Temp.A -Temp.D) * ChassisSpeed_BoardChange;
 80092ce:	7dbb      	ldrb	r3, [r7, #22]
 80092d0:	461a      	mov	r2, r3
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	ee07 3a90 	vmov	s15, r3
 80092da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092de:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8009384 <RemoteData_Unpack+0x360>
 80092e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092ea:	ee17 3a90 	vmov	r3, s15
 80092ee:	b21a      	sxth	r2, r3
 80092f0:	4b23      	ldr	r3, [pc, #140]	; (8009380 <RemoteData_Unpack+0x35c>)
 80092f2:	805a      	strh	r2, [r3, #2]
		if(Temp.L)
 80092f4:	7cbb      	ldrb	r3, [r7, #18]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d024      	beq.n	8009344 <RemoteData_Unpack+0x320>
		{
			RemoteData.TargetSpeedYaw=Temp.X * -1 * YawSpeed_BoardChange;
 80092fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80092fe:	425b      	negs	r3, r3
 8009300:	ee07 3a90 	vmov	s15, r3
 8009304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009308:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009384 <RemoteData_Unpack+0x360>
 800930c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009314:	ee17 3a90 	vmov	r3, s15
 8009318:	b21a      	sxth	r2, r3
 800931a:	4b19      	ldr	r3, [pc, #100]	; (8009380 <RemoteData_Unpack+0x35c>)
 800931c:	80da      	strh	r2, [r3, #6]
			RemoteData.TargetSpeedPitch=Temp.Y * -1 * PitchSpeed_BoardChange;
 800931e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009322:	425b      	negs	r3, r3
 8009324:	ee07 3a90 	vmov	s15, r3
 8009328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800932c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8009384 <RemoteData_Unpack+0x360>
 8009330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009338:	ee17 3a90 	vmov	r3, s15
 800933c:	b21a      	sxth	r2, r3
 800933e:	4b10      	ldr	r3, [pc, #64]	; (8009380 <RemoteData_Unpack+0x35c>)
 8009340:	811a      	strh	r2, [r3, #8]
 8009342:	e005      	b.n	8009350 <RemoteData_Unpack+0x32c>
		}
		else
		{
			RemoteData.TargetSpeedYaw=0;
 8009344:	4b0e      	ldr	r3, [pc, #56]	; (8009380 <RemoteData_Unpack+0x35c>)
 8009346:	2200      	movs	r2, #0
 8009348:	80da      	strh	r2, [r3, #6]
			RemoteData.TargetSpeedPitch=0;
 800934a:	4b0d      	ldr	r3, [pc, #52]	; (8009380 <RemoteData_Unpack+0x35c>)
 800934c:	2200      	movs	r2, #0
 800934e:	811a      	strh	r2, [r3, #8]
		}
	}
	RemoteData.ChassisStatus=Temp.s1;
 8009350:	7a3a      	ldrb	r2, [r7, #8]
 8009352:	4b0b      	ldr	r3, [pc, #44]	; (8009380 <RemoteData_Unpack+0x35c>)
 8009354:	731a      	strb	r2, [r3, #12]

	RemoteData.FireType=Temp.s2;
 8009356:	7a7a      	ldrb	r2, [r7, #9]
 8009358:	4b09      	ldr	r3, [pc, #36]	; (8009380 <RemoteData_Unpack+0x35c>)
 800935a:	735a      	strb	r2, [r3, #13]

	if(Temp.wheel>660)
 800935c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009360:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8009364:	dd03      	ble.n	800936e <RemoteData_Unpack+0x34a>
		RemoteData.ShootStrategy=MultiShoot;
 8009366:	4b06      	ldr	r3, [pc, #24]	; (8009380 <RemoteData_Unpack+0x35c>)
 8009368:	2202      	movs	r2, #2
 800936a:	739a      	strb	r2, [r3, #14]
	else
		RemoteData.ShootStrategy=SingleShoot;

}
 800936c:	e002      	b.n	8009374 <RemoteData_Unpack+0x350>
		RemoteData.ShootStrategy=SingleShoot;
 800936e:	4b04      	ldr	r3, [pc, #16]	; (8009380 <RemoteData_Unpack+0x35c>)
 8009370:	2201      	movs	r2, #1
 8009372:	739a      	strb	r2, [r3, #14]
}
 8009374:	bf00      	nop
 8009376:	3724      	adds	r7, #36	; 0x24
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	20000a8c 	.word	0x20000a8c
 8009384:	3f19999a 	.word	0x3f19999a

08009388 <__errno>:
 8009388:	4b01      	ldr	r3, [pc, #4]	; (8009390 <__errno+0x8>)
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	200001a0 	.word	0x200001a0

08009394 <__libc_init_array>:
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	4d0d      	ldr	r5, [pc, #52]	; (80093cc <__libc_init_array+0x38>)
 8009398:	4c0d      	ldr	r4, [pc, #52]	; (80093d0 <__libc_init_array+0x3c>)
 800939a:	1b64      	subs	r4, r4, r5
 800939c:	10a4      	asrs	r4, r4, #2
 800939e:	2600      	movs	r6, #0
 80093a0:	42a6      	cmp	r6, r4
 80093a2:	d109      	bne.n	80093b8 <__libc_init_array+0x24>
 80093a4:	4d0b      	ldr	r5, [pc, #44]	; (80093d4 <__libc_init_array+0x40>)
 80093a6:	4c0c      	ldr	r4, [pc, #48]	; (80093d8 <__libc_init_array+0x44>)
 80093a8:	f005 fd8e 	bl	800eec8 <_init>
 80093ac:	1b64      	subs	r4, r4, r5
 80093ae:	10a4      	asrs	r4, r4, #2
 80093b0:	2600      	movs	r6, #0
 80093b2:	42a6      	cmp	r6, r4
 80093b4:	d105      	bne.n	80093c2 <__libc_init_array+0x2e>
 80093b6:	bd70      	pop	{r4, r5, r6, pc}
 80093b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093bc:	4798      	blx	r3
 80093be:	3601      	adds	r6, #1
 80093c0:	e7ee      	b.n	80093a0 <__libc_init_array+0xc>
 80093c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093c6:	4798      	blx	r3
 80093c8:	3601      	adds	r6, #1
 80093ca:	e7f2      	b.n	80093b2 <__libc_init_array+0x1e>
 80093cc:	0800f7bc 	.word	0x0800f7bc
 80093d0:	0800f7bc 	.word	0x0800f7bc
 80093d4:	0800f7bc 	.word	0x0800f7bc
 80093d8:	0800f7c0 	.word	0x0800f7c0

080093dc <memset>:
 80093dc:	4402      	add	r2, r0
 80093de:	4603      	mov	r3, r0
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d100      	bne.n	80093e6 <memset+0xa>
 80093e4:	4770      	bx	lr
 80093e6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ea:	e7f9      	b.n	80093e0 <memset+0x4>

080093ec <__cvt>:
 80093ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093f0:	ec55 4b10 	vmov	r4, r5, d0
 80093f4:	2d00      	cmp	r5, #0
 80093f6:	460e      	mov	r6, r1
 80093f8:	4619      	mov	r1, r3
 80093fa:	462b      	mov	r3, r5
 80093fc:	bfbb      	ittet	lt
 80093fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009402:	461d      	movlt	r5, r3
 8009404:	2300      	movge	r3, #0
 8009406:	232d      	movlt	r3, #45	; 0x2d
 8009408:	700b      	strb	r3, [r1, #0]
 800940a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800940c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009410:	4691      	mov	r9, r2
 8009412:	f023 0820 	bic.w	r8, r3, #32
 8009416:	bfbc      	itt	lt
 8009418:	4622      	movlt	r2, r4
 800941a:	4614      	movlt	r4, r2
 800941c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009420:	d005      	beq.n	800942e <__cvt+0x42>
 8009422:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009426:	d100      	bne.n	800942a <__cvt+0x3e>
 8009428:	3601      	adds	r6, #1
 800942a:	2102      	movs	r1, #2
 800942c:	e000      	b.n	8009430 <__cvt+0x44>
 800942e:	2103      	movs	r1, #3
 8009430:	ab03      	add	r3, sp, #12
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	ab02      	add	r3, sp, #8
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	ec45 4b10 	vmov	d0, r4, r5
 800943c:	4653      	mov	r3, sl
 800943e:	4632      	mov	r2, r6
 8009440:	f001 fe72 	bl	800b128 <_dtoa_r>
 8009444:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009448:	4607      	mov	r7, r0
 800944a:	d102      	bne.n	8009452 <__cvt+0x66>
 800944c:	f019 0f01 	tst.w	r9, #1
 8009450:	d022      	beq.n	8009498 <__cvt+0xac>
 8009452:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009456:	eb07 0906 	add.w	r9, r7, r6
 800945a:	d110      	bne.n	800947e <__cvt+0x92>
 800945c:	783b      	ldrb	r3, [r7, #0]
 800945e:	2b30      	cmp	r3, #48	; 0x30
 8009460:	d10a      	bne.n	8009478 <__cvt+0x8c>
 8009462:	2200      	movs	r2, #0
 8009464:	2300      	movs	r3, #0
 8009466:	4620      	mov	r0, r4
 8009468:	4629      	mov	r1, r5
 800946a:	f7f7 fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800946e:	b918      	cbnz	r0, 8009478 <__cvt+0x8c>
 8009470:	f1c6 0601 	rsb	r6, r6, #1
 8009474:	f8ca 6000 	str.w	r6, [sl]
 8009478:	f8da 3000 	ldr.w	r3, [sl]
 800947c:	4499      	add	r9, r3
 800947e:	2200      	movs	r2, #0
 8009480:	2300      	movs	r3, #0
 8009482:	4620      	mov	r0, r4
 8009484:	4629      	mov	r1, r5
 8009486:	f7f7 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800948a:	b108      	cbz	r0, 8009490 <__cvt+0xa4>
 800948c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009490:	2230      	movs	r2, #48	; 0x30
 8009492:	9b03      	ldr	r3, [sp, #12]
 8009494:	454b      	cmp	r3, r9
 8009496:	d307      	bcc.n	80094a8 <__cvt+0xbc>
 8009498:	9b03      	ldr	r3, [sp, #12]
 800949a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800949c:	1bdb      	subs	r3, r3, r7
 800949e:	4638      	mov	r0, r7
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	b004      	add	sp, #16
 80094a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a8:	1c59      	adds	r1, r3, #1
 80094aa:	9103      	str	r1, [sp, #12]
 80094ac:	701a      	strb	r2, [r3, #0]
 80094ae:	e7f0      	b.n	8009492 <__cvt+0xa6>

080094b0 <__exponent>:
 80094b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094b2:	4603      	mov	r3, r0
 80094b4:	2900      	cmp	r1, #0
 80094b6:	bfb8      	it	lt
 80094b8:	4249      	neglt	r1, r1
 80094ba:	f803 2b02 	strb.w	r2, [r3], #2
 80094be:	bfb4      	ite	lt
 80094c0:	222d      	movlt	r2, #45	; 0x2d
 80094c2:	222b      	movge	r2, #43	; 0x2b
 80094c4:	2909      	cmp	r1, #9
 80094c6:	7042      	strb	r2, [r0, #1]
 80094c8:	dd2a      	ble.n	8009520 <__exponent+0x70>
 80094ca:	f10d 0407 	add.w	r4, sp, #7
 80094ce:	46a4      	mov	ip, r4
 80094d0:	270a      	movs	r7, #10
 80094d2:	46a6      	mov	lr, r4
 80094d4:	460a      	mov	r2, r1
 80094d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80094da:	fb07 1516 	mls	r5, r7, r6, r1
 80094de:	3530      	adds	r5, #48	; 0x30
 80094e0:	2a63      	cmp	r2, #99	; 0x63
 80094e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80094e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80094ea:	4631      	mov	r1, r6
 80094ec:	dcf1      	bgt.n	80094d2 <__exponent+0x22>
 80094ee:	3130      	adds	r1, #48	; 0x30
 80094f0:	f1ae 0502 	sub.w	r5, lr, #2
 80094f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80094f8:	1c44      	adds	r4, r0, #1
 80094fa:	4629      	mov	r1, r5
 80094fc:	4561      	cmp	r1, ip
 80094fe:	d30a      	bcc.n	8009516 <__exponent+0x66>
 8009500:	f10d 0209 	add.w	r2, sp, #9
 8009504:	eba2 020e 	sub.w	r2, r2, lr
 8009508:	4565      	cmp	r5, ip
 800950a:	bf88      	it	hi
 800950c:	2200      	movhi	r2, #0
 800950e:	4413      	add	r3, r2
 8009510:	1a18      	subs	r0, r3, r0
 8009512:	b003      	add	sp, #12
 8009514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800951a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800951e:	e7ed      	b.n	80094fc <__exponent+0x4c>
 8009520:	2330      	movs	r3, #48	; 0x30
 8009522:	3130      	adds	r1, #48	; 0x30
 8009524:	7083      	strb	r3, [r0, #2]
 8009526:	70c1      	strb	r1, [r0, #3]
 8009528:	1d03      	adds	r3, r0, #4
 800952a:	e7f1      	b.n	8009510 <__exponent+0x60>

0800952c <_printf_float>:
 800952c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009530:	ed2d 8b02 	vpush	{d8}
 8009534:	b08d      	sub	sp, #52	; 0x34
 8009536:	460c      	mov	r4, r1
 8009538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800953c:	4616      	mov	r6, r2
 800953e:	461f      	mov	r7, r3
 8009540:	4605      	mov	r5, r0
 8009542:	f003 f905 	bl	800c750 <_localeconv_r>
 8009546:	f8d0 a000 	ldr.w	sl, [r0]
 800954a:	4650      	mov	r0, sl
 800954c:	f7f6 fe40 	bl	80001d0 <strlen>
 8009550:	2300      	movs	r3, #0
 8009552:	930a      	str	r3, [sp, #40]	; 0x28
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	9305      	str	r3, [sp, #20]
 8009558:	f8d8 3000 	ldr.w	r3, [r8]
 800955c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009560:	3307      	adds	r3, #7
 8009562:	f023 0307 	bic.w	r3, r3, #7
 8009566:	f103 0208 	add.w	r2, r3, #8
 800956a:	f8c8 2000 	str.w	r2, [r8]
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009576:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800957a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800957e:	9307      	str	r3, [sp, #28]
 8009580:	f8cd 8018 	str.w	r8, [sp, #24]
 8009584:	ee08 0a10 	vmov	s16, r0
 8009588:	4b9f      	ldr	r3, [pc, #636]	; (8009808 <_printf_float+0x2dc>)
 800958a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800958e:	f04f 32ff 	mov.w	r2, #4294967295
 8009592:	f7f7 facb 	bl	8000b2c <__aeabi_dcmpun>
 8009596:	bb88      	cbnz	r0, 80095fc <_printf_float+0xd0>
 8009598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800959c:	4b9a      	ldr	r3, [pc, #616]	; (8009808 <_printf_float+0x2dc>)
 800959e:	f04f 32ff 	mov.w	r2, #4294967295
 80095a2:	f7f7 faa5 	bl	8000af0 <__aeabi_dcmple>
 80095a6:	bb48      	cbnz	r0, 80095fc <_printf_float+0xd0>
 80095a8:	2200      	movs	r2, #0
 80095aa:	2300      	movs	r3, #0
 80095ac:	4640      	mov	r0, r8
 80095ae:	4649      	mov	r1, r9
 80095b0:	f7f7 fa94 	bl	8000adc <__aeabi_dcmplt>
 80095b4:	b110      	cbz	r0, 80095bc <_printf_float+0x90>
 80095b6:	232d      	movs	r3, #45	; 0x2d
 80095b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095bc:	4b93      	ldr	r3, [pc, #588]	; (800980c <_printf_float+0x2e0>)
 80095be:	4894      	ldr	r0, [pc, #592]	; (8009810 <_printf_float+0x2e4>)
 80095c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80095c4:	bf94      	ite	ls
 80095c6:	4698      	movls	r8, r3
 80095c8:	4680      	movhi	r8, r0
 80095ca:	2303      	movs	r3, #3
 80095cc:	6123      	str	r3, [r4, #16]
 80095ce:	9b05      	ldr	r3, [sp, #20]
 80095d0:	f023 0204 	bic.w	r2, r3, #4
 80095d4:	6022      	str	r2, [r4, #0]
 80095d6:	f04f 0900 	mov.w	r9, #0
 80095da:	9700      	str	r7, [sp, #0]
 80095dc:	4633      	mov	r3, r6
 80095de:	aa0b      	add	r2, sp, #44	; 0x2c
 80095e0:	4621      	mov	r1, r4
 80095e2:	4628      	mov	r0, r5
 80095e4:	f000 f9d8 	bl	8009998 <_printf_common>
 80095e8:	3001      	adds	r0, #1
 80095ea:	f040 8090 	bne.w	800970e <_printf_float+0x1e2>
 80095ee:	f04f 30ff 	mov.w	r0, #4294967295
 80095f2:	b00d      	add	sp, #52	; 0x34
 80095f4:	ecbd 8b02 	vpop	{d8}
 80095f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fc:	4642      	mov	r2, r8
 80095fe:	464b      	mov	r3, r9
 8009600:	4640      	mov	r0, r8
 8009602:	4649      	mov	r1, r9
 8009604:	f7f7 fa92 	bl	8000b2c <__aeabi_dcmpun>
 8009608:	b140      	cbz	r0, 800961c <_printf_float+0xf0>
 800960a:	464b      	mov	r3, r9
 800960c:	2b00      	cmp	r3, #0
 800960e:	bfbc      	itt	lt
 8009610:	232d      	movlt	r3, #45	; 0x2d
 8009612:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009616:	487f      	ldr	r0, [pc, #508]	; (8009814 <_printf_float+0x2e8>)
 8009618:	4b7f      	ldr	r3, [pc, #508]	; (8009818 <_printf_float+0x2ec>)
 800961a:	e7d1      	b.n	80095c0 <_printf_float+0x94>
 800961c:	6863      	ldr	r3, [r4, #4]
 800961e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009622:	9206      	str	r2, [sp, #24]
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	d13f      	bne.n	80096a8 <_printf_float+0x17c>
 8009628:	2306      	movs	r3, #6
 800962a:	6063      	str	r3, [r4, #4]
 800962c:	9b05      	ldr	r3, [sp, #20]
 800962e:	6861      	ldr	r1, [r4, #4]
 8009630:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009634:	2300      	movs	r3, #0
 8009636:	9303      	str	r3, [sp, #12]
 8009638:	ab0a      	add	r3, sp, #40	; 0x28
 800963a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800963e:	ab09      	add	r3, sp, #36	; 0x24
 8009640:	ec49 8b10 	vmov	d0, r8, r9
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	6022      	str	r2, [r4, #0]
 8009648:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800964c:	4628      	mov	r0, r5
 800964e:	f7ff fecd 	bl	80093ec <__cvt>
 8009652:	9b06      	ldr	r3, [sp, #24]
 8009654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009656:	2b47      	cmp	r3, #71	; 0x47
 8009658:	4680      	mov	r8, r0
 800965a:	d108      	bne.n	800966e <_printf_float+0x142>
 800965c:	1cc8      	adds	r0, r1, #3
 800965e:	db02      	blt.n	8009666 <_printf_float+0x13a>
 8009660:	6863      	ldr	r3, [r4, #4]
 8009662:	4299      	cmp	r1, r3
 8009664:	dd41      	ble.n	80096ea <_printf_float+0x1be>
 8009666:	f1ab 0b02 	sub.w	fp, fp, #2
 800966a:	fa5f fb8b 	uxtb.w	fp, fp
 800966e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009672:	d820      	bhi.n	80096b6 <_printf_float+0x18a>
 8009674:	3901      	subs	r1, #1
 8009676:	465a      	mov	r2, fp
 8009678:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800967c:	9109      	str	r1, [sp, #36]	; 0x24
 800967e:	f7ff ff17 	bl	80094b0 <__exponent>
 8009682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009684:	1813      	adds	r3, r2, r0
 8009686:	2a01      	cmp	r2, #1
 8009688:	4681      	mov	r9, r0
 800968a:	6123      	str	r3, [r4, #16]
 800968c:	dc02      	bgt.n	8009694 <_printf_float+0x168>
 800968e:	6822      	ldr	r2, [r4, #0]
 8009690:	07d2      	lsls	r2, r2, #31
 8009692:	d501      	bpl.n	8009698 <_printf_float+0x16c>
 8009694:	3301      	adds	r3, #1
 8009696:	6123      	str	r3, [r4, #16]
 8009698:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800969c:	2b00      	cmp	r3, #0
 800969e:	d09c      	beq.n	80095da <_printf_float+0xae>
 80096a0:	232d      	movs	r3, #45	; 0x2d
 80096a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a6:	e798      	b.n	80095da <_printf_float+0xae>
 80096a8:	9a06      	ldr	r2, [sp, #24]
 80096aa:	2a47      	cmp	r2, #71	; 0x47
 80096ac:	d1be      	bne.n	800962c <_printf_float+0x100>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1bc      	bne.n	800962c <_printf_float+0x100>
 80096b2:	2301      	movs	r3, #1
 80096b4:	e7b9      	b.n	800962a <_printf_float+0xfe>
 80096b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80096ba:	d118      	bne.n	80096ee <_printf_float+0x1c2>
 80096bc:	2900      	cmp	r1, #0
 80096be:	6863      	ldr	r3, [r4, #4]
 80096c0:	dd0b      	ble.n	80096da <_printf_float+0x1ae>
 80096c2:	6121      	str	r1, [r4, #16]
 80096c4:	b913      	cbnz	r3, 80096cc <_printf_float+0x1a0>
 80096c6:	6822      	ldr	r2, [r4, #0]
 80096c8:	07d0      	lsls	r0, r2, #31
 80096ca:	d502      	bpl.n	80096d2 <_printf_float+0x1a6>
 80096cc:	3301      	adds	r3, #1
 80096ce:	440b      	add	r3, r1
 80096d0:	6123      	str	r3, [r4, #16]
 80096d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80096d4:	f04f 0900 	mov.w	r9, #0
 80096d8:	e7de      	b.n	8009698 <_printf_float+0x16c>
 80096da:	b913      	cbnz	r3, 80096e2 <_printf_float+0x1b6>
 80096dc:	6822      	ldr	r2, [r4, #0]
 80096de:	07d2      	lsls	r2, r2, #31
 80096e0:	d501      	bpl.n	80096e6 <_printf_float+0x1ba>
 80096e2:	3302      	adds	r3, #2
 80096e4:	e7f4      	b.n	80096d0 <_printf_float+0x1a4>
 80096e6:	2301      	movs	r3, #1
 80096e8:	e7f2      	b.n	80096d0 <_printf_float+0x1a4>
 80096ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80096ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f0:	4299      	cmp	r1, r3
 80096f2:	db05      	blt.n	8009700 <_printf_float+0x1d4>
 80096f4:	6823      	ldr	r3, [r4, #0]
 80096f6:	6121      	str	r1, [r4, #16]
 80096f8:	07d8      	lsls	r0, r3, #31
 80096fa:	d5ea      	bpl.n	80096d2 <_printf_float+0x1a6>
 80096fc:	1c4b      	adds	r3, r1, #1
 80096fe:	e7e7      	b.n	80096d0 <_printf_float+0x1a4>
 8009700:	2900      	cmp	r1, #0
 8009702:	bfd4      	ite	le
 8009704:	f1c1 0202 	rsble	r2, r1, #2
 8009708:	2201      	movgt	r2, #1
 800970a:	4413      	add	r3, r2
 800970c:	e7e0      	b.n	80096d0 <_printf_float+0x1a4>
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	055a      	lsls	r2, r3, #21
 8009712:	d407      	bmi.n	8009724 <_printf_float+0x1f8>
 8009714:	6923      	ldr	r3, [r4, #16]
 8009716:	4642      	mov	r2, r8
 8009718:	4631      	mov	r1, r6
 800971a:	4628      	mov	r0, r5
 800971c:	47b8      	blx	r7
 800971e:	3001      	adds	r0, #1
 8009720:	d12c      	bne.n	800977c <_printf_float+0x250>
 8009722:	e764      	b.n	80095ee <_printf_float+0xc2>
 8009724:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009728:	f240 80e0 	bls.w	80098ec <_printf_float+0x3c0>
 800972c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009730:	2200      	movs	r2, #0
 8009732:	2300      	movs	r3, #0
 8009734:	f7f7 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009738:	2800      	cmp	r0, #0
 800973a:	d034      	beq.n	80097a6 <_printf_float+0x27a>
 800973c:	4a37      	ldr	r2, [pc, #220]	; (800981c <_printf_float+0x2f0>)
 800973e:	2301      	movs	r3, #1
 8009740:	4631      	mov	r1, r6
 8009742:	4628      	mov	r0, r5
 8009744:	47b8      	blx	r7
 8009746:	3001      	adds	r0, #1
 8009748:	f43f af51 	beq.w	80095ee <_printf_float+0xc2>
 800974c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009750:	429a      	cmp	r2, r3
 8009752:	db02      	blt.n	800975a <_printf_float+0x22e>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	07d8      	lsls	r0, r3, #31
 8009758:	d510      	bpl.n	800977c <_printf_float+0x250>
 800975a:	ee18 3a10 	vmov	r3, s16
 800975e:	4652      	mov	r2, sl
 8009760:	4631      	mov	r1, r6
 8009762:	4628      	mov	r0, r5
 8009764:	47b8      	blx	r7
 8009766:	3001      	adds	r0, #1
 8009768:	f43f af41 	beq.w	80095ee <_printf_float+0xc2>
 800976c:	f04f 0800 	mov.w	r8, #0
 8009770:	f104 091a 	add.w	r9, r4, #26
 8009774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009776:	3b01      	subs	r3, #1
 8009778:	4543      	cmp	r3, r8
 800977a:	dc09      	bgt.n	8009790 <_printf_float+0x264>
 800977c:	6823      	ldr	r3, [r4, #0]
 800977e:	079b      	lsls	r3, r3, #30
 8009780:	f100 8105 	bmi.w	800998e <_printf_float+0x462>
 8009784:	68e0      	ldr	r0, [r4, #12]
 8009786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009788:	4298      	cmp	r0, r3
 800978a:	bfb8      	it	lt
 800978c:	4618      	movlt	r0, r3
 800978e:	e730      	b.n	80095f2 <_printf_float+0xc6>
 8009790:	2301      	movs	r3, #1
 8009792:	464a      	mov	r2, r9
 8009794:	4631      	mov	r1, r6
 8009796:	4628      	mov	r0, r5
 8009798:	47b8      	blx	r7
 800979a:	3001      	adds	r0, #1
 800979c:	f43f af27 	beq.w	80095ee <_printf_float+0xc2>
 80097a0:	f108 0801 	add.w	r8, r8, #1
 80097a4:	e7e6      	b.n	8009774 <_printf_float+0x248>
 80097a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	dc39      	bgt.n	8009820 <_printf_float+0x2f4>
 80097ac:	4a1b      	ldr	r2, [pc, #108]	; (800981c <_printf_float+0x2f0>)
 80097ae:	2301      	movs	r3, #1
 80097b0:	4631      	mov	r1, r6
 80097b2:	4628      	mov	r0, r5
 80097b4:	47b8      	blx	r7
 80097b6:	3001      	adds	r0, #1
 80097b8:	f43f af19 	beq.w	80095ee <_printf_float+0xc2>
 80097bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097c0:	4313      	orrs	r3, r2
 80097c2:	d102      	bne.n	80097ca <_printf_float+0x29e>
 80097c4:	6823      	ldr	r3, [r4, #0]
 80097c6:	07d9      	lsls	r1, r3, #31
 80097c8:	d5d8      	bpl.n	800977c <_printf_float+0x250>
 80097ca:	ee18 3a10 	vmov	r3, s16
 80097ce:	4652      	mov	r2, sl
 80097d0:	4631      	mov	r1, r6
 80097d2:	4628      	mov	r0, r5
 80097d4:	47b8      	blx	r7
 80097d6:	3001      	adds	r0, #1
 80097d8:	f43f af09 	beq.w	80095ee <_printf_float+0xc2>
 80097dc:	f04f 0900 	mov.w	r9, #0
 80097e0:	f104 0a1a 	add.w	sl, r4, #26
 80097e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e6:	425b      	negs	r3, r3
 80097e8:	454b      	cmp	r3, r9
 80097ea:	dc01      	bgt.n	80097f0 <_printf_float+0x2c4>
 80097ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ee:	e792      	b.n	8009716 <_printf_float+0x1ea>
 80097f0:	2301      	movs	r3, #1
 80097f2:	4652      	mov	r2, sl
 80097f4:	4631      	mov	r1, r6
 80097f6:	4628      	mov	r0, r5
 80097f8:	47b8      	blx	r7
 80097fa:	3001      	adds	r0, #1
 80097fc:	f43f aef7 	beq.w	80095ee <_printf_float+0xc2>
 8009800:	f109 0901 	add.w	r9, r9, #1
 8009804:	e7ee      	b.n	80097e4 <_printf_float+0x2b8>
 8009806:	bf00      	nop
 8009808:	7fefffff 	.word	0x7fefffff
 800980c:	0800ef04 	.word	0x0800ef04
 8009810:	0800ef08 	.word	0x0800ef08
 8009814:	0800ef10 	.word	0x0800ef10
 8009818:	0800ef0c 	.word	0x0800ef0c
 800981c:	0800ef14 	.word	0x0800ef14
 8009820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009824:	429a      	cmp	r2, r3
 8009826:	bfa8      	it	ge
 8009828:	461a      	movge	r2, r3
 800982a:	2a00      	cmp	r2, #0
 800982c:	4691      	mov	r9, r2
 800982e:	dc37      	bgt.n	80098a0 <_printf_float+0x374>
 8009830:	f04f 0b00 	mov.w	fp, #0
 8009834:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009838:	f104 021a 	add.w	r2, r4, #26
 800983c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800983e:	9305      	str	r3, [sp, #20]
 8009840:	eba3 0309 	sub.w	r3, r3, r9
 8009844:	455b      	cmp	r3, fp
 8009846:	dc33      	bgt.n	80098b0 <_printf_float+0x384>
 8009848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800984c:	429a      	cmp	r2, r3
 800984e:	db3b      	blt.n	80098c8 <_printf_float+0x39c>
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	07da      	lsls	r2, r3, #31
 8009854:	d438      	bmi.n	80098c8 <_printf_float+0x39c>
 8009856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009858:	9a05      	ldr	r2, [sp, #20]
 800985a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800985c:	1a9a      	subs	r2, r3, r2
 800985e:	eba3 0901 	sub.w	r9, r3, r1
 8009862:	4591      	cmp	r9, r2
 8009864:	bfa8      	it	ge
 8009866:	4691      	movge	r9, r2
 8009868:	f1b9 0f00 	cmp.w	r9, #0
 800986c:	dc35      	bgt.n	80098da <_printf_float+0x3ae>
 800986e:	f04f 0800 	mov.w	r8, #0
 8009872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009876:	f104 0a1a 	add.w	sl, r4, #26
 800987a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800987e:	1a9b      	subs	r3, r3, r2
 8009880:	eba3 0309 	sub.w	r3, r3, r9
 8009884:	4543      	cmp	r3, r8
 8009886:	f77f af79 	ble.w	800977c <_printf_float+0x250>
 800988a:	2301      	movs	r3, #1
 800988c:	4652      	mov	r2, sl
 800988e:	4631      	mov	r1, r6
 8009890:	4628      	mov	r0, r5
 8009892:	47b8      	blx	r7
 8009894:	3001      	adds	r0, #1
 8009896:	f43f aeaa 	beq.w	80095ee <_printf_float+0xc2>
 800989a:	f108 0801 	add.w	r8, r8, #1
 800989e:	e7ec      	b.n	800987a <_printf_float+0x34e>
 80098a0:	4613      	mov	r3, r2
 80098a2:	4631      	mov	r1, r6
 80098a4:	4642      	mov	r2, r8
 80098a6:	4628      	mov	r0, r5
 80098a8:	47b8      	blx	r7
 80098aa:	3001      	adds	r0, #1
 80098ac:	d1c0      	bne.n	8009830 <_printf_float+0x304>
 80098ae:	e69e      	b.n	80095ee <_printf_float+0xc2>
 80098b0:	2301      	movs	r3, #1
 80098b2:	4631      	mov	r1, r6
 80098b4:	4628      	mov	r0, r5
 80098b6:	9205      	str	r2, [sp, #20]
 80098b8:	47b8      	blx	r7
 80098ba:	3001      	adds	r0, #1
 80098bc:	f43f ae97 	beq.w	80095ee <_printf_float+0xc2>
 80098c0:	9a05      	ldr	r2, [sp, #20]
 80098c2:	f10b 0b01 	add.w	fp, fp, #1
 80098c6:	e7b9      	b.n	800983c <_printf_float+0x310>
 80098c8:	ee18 3a10 	vmov	r3, s16
 80098cc:	4652      	mov	r2, sl
 80098ce:	4631      	mov	r1, r6
 80098d0:	4628      	mov	r0, r5
 80098d2:	47b8      	blx	r7
 80098d4:	3001      	adds	r0, #1
 80098d6:	d1be      	bne.n	8009856 <_printf_float+0x32a>
 80098d8:	e689      	b.n	80095ee <_printf_float+0xc2>
 80098da:	9a05      	ldr	r2, [sp, #20]
 80098dc:	464b      	mov	r3, r9
 80098de:	4442      	add	r2, r8
 80098e0:	4631      	mov	r1, r6
 80098e2:	4628      	mov	r0, r5
 80098e4:	47b8      	blx	r7
 80098e6:	3001      	adds	r0, #1
 80098e8:	d1c1      	bne.n	800986e <_printf_float+0x342>
 80098ea:	e680      	b.n	80095ee <_printf_float+0xc2>
 80098ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ee:	2a01      	cmp	r2, #1
 80098f0:	dc01      	bgt.n	80098f6 <_printf_float+0x3ca>
 80098f2:	07db      	lsls	r3, r3, #31
 80098f4:	d538      	bpl.n	8009968 <_printf_float+0x43c>
 80098f6:	2301      	movs	r3, #1
 80098f8:	4642      	mov	r2, r8
 80098fa:	4631      	mov	r1, r6
 80098fc:	4628      	mov	r0, r5
 80098fe:	47b8      	blx	r7
 8009900:	3001      	adds	r0, #1
 8009902:	f43f ae74 	beq.w	80095ee <_printf_float+0xc2>
 8009906:	ee18 3a10 	vmov	r3, s16
 800990a:	4652      	mov	r2, sl
 800990c:	4631      	mov	r1, r6
 800990e:	4628      	mov	r0, r5
 8009910:	47b8      	blx	r7
 8009912:	3001      	adds	r0, #1
 8009914:	f43f ae6b 	beq.w	80095ee <_printf_float+0xc2>
 8009918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800991c:	2200      	movs	r2, #0
 800991e:	2300      	movs	r3, #0
 8009920:	f7f7 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009924:	b9d8      	cbnz	r0, 800995e <_printf_float+0x432>
 8009926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009928:	f108 0201 	add.w	r2, r8, #1
 800992c:	3b01      	subs	r3, #1
 800992e:	4631      	mov	r1, r6
 8009930:	4628      	mov	r0, r5
 8009932:	47b8      	blx	r7
 8009934:	3001      	adds	r0, #1
 8009936:	d10e      	bne.n	8009956 <_printf_float+0x42a>
 8009938:	e659      	b.n	80095ee <_printf_float+0xc2>
 800993a:	2301      	movs	r3, #1
 800993c:	4652      	mov	r2, sl
 800993e:	4631      	mov	r1, r6
 8009940:	4628      	mov	r0, r5
 8009942:	47b8      	blx	r7
 8009944:	3001      	adds	r0, #1
 8009946:	f43f ae52 	beq.w	80095ee <_printf_float+0xc2>
 800994a:	f108 0801 	add.w	r8, r8, #1
 800994e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009950:	3b01      	subs	r3, #1
 8009952:	4543      	cmp	r3, r8
 8009954:	dcf1      	bgt.n	800993a <_printf_float+0x40e>
 8009956:	464b      	mov	r3, r9
 8009958:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800995c:	e6dc      	b.n	8009718 <_printf_float+0x1ec>
 800995e:	f04f 0800 	mov.w	r8, #0
 8009962:	f104 0a1a 	add.w	sl, r4, #26
 8009966:	e7f2      	b.n	800994e <_printf_float+0x422>
 8009968:	2301      	movs	r3, #1
 800996a:	4642      	mov	r2, r8
 800996c:	e7df      	b.n	800992e <_printf_float+0x402>
 800996e:	2301      	movs	r3, #1
 8009970:	464a      	mov	r2, r9
 8009972:	4631      	mov	r1, r6
 8009974:	4628      	mov	r0, r5
 8009976:	47b8      	blx	r7
 8009978:	3001      	adds	r0, #1
 800997a:	f43f ae38 	beq.w	80095ee <_printf_float+0xc2>
 800997e:	f108 0801 	add.w	r8, r8, #1
 8009982:	68e3      	ldr	r3, [r4, #12]
 8009984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009986:	1a5b      	subs	r3, r3, r1
 8009988:	4543      	cmp	r3, r8
 800998a:	dcf0      	bgt.n	800996e <_printf_float+0x442>
 800998c:	e6fa      	b.n	8009784 <_printf_float+0x258>
 800998e:	f04f 0800 	mov.w	r8, #0
 8009992:	f104 0919 	add.w	r9, r4, #25
 8009996:	e7f4      	b.n	8009982 <_printf_float+0x456>

08009998 <_printf_common>:
 8009998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	4616      	mov	r6, r2
 800999e:	4699      	mov	r9, r3
 80099a0:	688a      	ldr	r2, [r1, #8]
 80099a2:	690b      	ldr	r3, [r1, #16]
 80099a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099a8:	4293      	cmp	r3, r2
 80099aa:	bfb8      	it	lt
 80099ac:	4613      	movlt	r3, r2
 80099ae:	6033      	str	r3, [r6, #0]
 80099b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099b4:	4607      	mov	r7, r0
 80099b6:	460c      	mov	r4, r1
 80099b8:	b10a      	cbz	r2, 80099be <_printf_common+0x26>
 80099ba:	3301      	adds	r3, #1
 80099bc:	6033      	str	r3, [r6, #0]
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	0699      	lsls	r1, r3, #26
 80099c2:	bf42      	ittt	mi
 80099c4:	6833      	ldrmi	r3, [r6, #0]
 80099c6:	3302      	addmi	r3, #2
 80099c8:	6033      	strmi	r3, [r6, #0]
 80099ca:	6825      	ldr	r5, [r4, #0]
 80099cc:	f015 0506 	ands.w	r5, r5, #6
 80099d0:	d106      	bne.n	80099e0 <_printf_common+0x48>
 80099d2:	f104 0a19 	add.w	sl, r4, #25
 80099d6:	68e3      	ldr	r3, [r4, #12]
 80099d8:	6832      	ldr	r2, [r6, #0]
 80099da:	1a9b      	subs	r3, r3, r2
 80099dc:	42ab      	cmp	r3, r5
 80099de:	dc26      	bgt.n	8009a2e <_printf_common+0x96>
 80099e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099e4:	1e13      	subs	r3, r2, #0
 80099e6:	6822      	ldr	r2, [r4, #0]
 80099e8:	bf18      	it	ne
 80099ea:	2301      	movne	r3, #1
 80099ec:	0692      	lsls	r2, r2, #26
 80099ee:	d42b      	bmi.n	8009a48 <_printf_common+0xb0>
 80099f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099f4:	4649      	mov	r1, r9
 80099f6:	4638      	mov	r0, r7
 80099f8:	47c0      	blx	r8
 80099fa:	3001      	adds	r0, #1
 80099fc:	d01e      	beq.n	8009a3c <_printf_common+0xa4>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	68e5      	ldr	r5, [r4, #12]
 8009a02:	6832      	ldr	r2, [r6, #0]
 8009a04:	f003 0306 	and.w	r3, r3, #6
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	bf08      	it	eq
 8009a0c:	1aad      	subeq	r5, r5, r2
 8009a0e:	68a3      	ldr	r3, [r4, #8]
 8009a10:	6922      	ldr	r2, [r4, #16]
 8009a12:	bf0c      	ite	eq
 8009a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a18:	2500      	movne	r5, #0
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	bfc4      	itt	gt
 8009a1e:	1a9b      	subgt	r3, r3, r2
 8009a20:	18ed      	addgt	r5, r5, r3
 8009a22:	2600      	movs	r6, #0
 8009a24:	341a      	adds	r4, #26
 8009a26:	42b5      	cmp	r5, r6
 8009a28:	d11a      	bne.n	8009a60 <_printf_common+0xc8>
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	e008      	b.n	8009a40 <_printf_common+0xa8>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	4652      	mov	r2, sl
 8009a32:	4649      	mov	r1, r9
 8009a34:	4638      	mov	r0, r7
 8009a36:	47c0      	blx	r8
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d103      	bne.n	8009a44 <_printf_common+0xac>
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a44:	3501      	adds	r5, #1
 8009a46:	e7c6      	b.n	80099d6 <_printf_common+0x3e>
 8009a48:	18e1      	adds	r1, r4, r3
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	2030      	movs	r0, #48	; 0x30
 8009a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a52:	4422      	add	r2, r4
 8009a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	e7c7      	b.n	80099f0 <_printf_common+0x58>
 8009a60:	2301      	movs	r3, #1
 8009a62:	4622      	mov	r2, r4
 8009a64:	4649      	mov	r1, r9
 8009a66:	4638      	mov	r0, r7
 8009a68:	47c0      	blx	r8
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	d0e6      	beq.n	8009a3c <_printf_common+0xa4>
 8009a6e:	3601      	adds	r6, #1
 8009a70:	e7d9      	b.n	8009a26 <_printf_common+0x8e>
	...

08009a74 <_printf_i>:
 8009a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	7e0f      	ldrb	r7, [r1, #24]
 8009a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a7c:	2f78      	cmp	r7, #120	; 0x78
 8009a7e:	4691      	mov	r9, r2
 8009a80:	4680      	mov	r8, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	469a      	mov	sl, r3
 8009a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a8a:	d807      	bhi.n	8009a9c <_printf_i+0x28>
 8009a8c:	2f62      	cmp	r7, #98	; 0x62
 8009a8e:	d80a      	bhi.n	8009aa6 <_printf_i+0x32>
 8009a90:	2f00      	cmp	r7, #0
 8009a92:	f000 80d8 	beq.w	8009c46 <_printf_i+0x1d2>
 8009a96:	2f58      	cmp	r7, #88	; 0x58
 8009a98:	f000 80a3 	beq.w	8009be2 <_printf_i+0x16e>
 8009a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009aa4:	e03a      	b.n	8009b1c <_printf_i+0xa8>
 8009aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009aaa:	2b15      	cmp	r3, #21
 8009aac:	d8f6      	bhi.n	8009a9c <_printf_i+0x28>
 8009aae:	a101      	add	r1, pc, #4	; (adr r1, 8009ab4 <_printf_i+0x40>)
 8009ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ab4:	08009b0d 	.word	0x08009b0d
 8009ab8:	08009b21 	.word	0x08009b21
 8009abc:	08009a9d 	.word	0x08009a9d
 8009ac0:	08009a9d 	.word	0x08009a9d
 8009ac4:	08009a9d 	.word	0x08009a9d
 8009ac8:	08009a9d 	.word	0x08009a9d
 8009acc:	08009b21 	.word	0x08009b21
 8009ad0:	08009a9d 	.word	0x08009a9d
 8009ad4:	08009a9d 	.word	0x08009a9d
 8009ad8:	08009a9d 	.word	0x08009a9d
 8009adc:	08009a9d 	.word	0x08009a9d
 8009ae0:	08009c2d 	.word	0x08009c2d
 8009ae4:	08009b51 	.word	0x08009b51
 8009ae8:	08009c0f 	.word	0x08009c0f
 8009aec:	08009a9d 	.word	0x08009a9d
 8009af0:	08009a9d 	.word	0x08009a9d
 8009af4:	08009c4f 	.word	0x08009c4f
 8009af8:	08009a9d 	.word	0x08009a9d
 8009afc:	08009b51 	.word	0x08009b51
 8009b00:	08009a9d 	.word	0x08009a9d
 8009b04:	08009a9d 	.word	0x08009a9d
 8009b08:	08009c17 	.word	0x08009c17
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	1d1a      	adds	r2, r3, #4
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	602a      	str	r2, [r5, #0]
 8009b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e0a3      	b.n	8009c68 <_printf_i+0x1f4>
 8009b20:	6820      	ldr	r0, [r4, #0]
 8009b22:	6829      	ldr	r1, [r5, #0]
 8009b24:	0606      	lsls	r6, r0, #24
 8009b26:	f101 0304 	add.w	r3, r1, #4
 8009b2a:	d50a      	bpl.n	8009b42 <_printf_i+0xce>
 8009b2c:	680e      	ldr	r6, [r1, #0]
 8009b2e:	602b      	str	r3, [r5, #0]
 8009b30:	2e00      	cmp	r6, #0
 8009b32:	da03      	bge.n	8009b3c <_printf_i+0xc8>
 8009b34:	232d      	movs	r3, #45	; 0x2d
 8009b36:	4276      	negs	r6, r6
 8009b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b3c:	485e      	ldr	r0, [pc, #376]	; (8009cb8 <_printf_i+0x244>)
 8009b3e:	230a      	movs	r3, #10
 8009b40:	e019      	b.n	8009b76 <_printf_i+0x102>
 8009b42:	680e      	ldr	r6, [r1, #0]
 8009b44:	602b      	str	r3, [r5, #0]
 8009b46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b4a:	bf18      	it	ne
 8009b4c:	b236      	sxthne	r6, r6
 8009b4e:	e7ef      	b.n	8009b30 <_printf_i+0xbc>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	6820      	ldr	r0, [r4, #0]
 8009b54:	1d19      	adds	r1, r3, #4
 8009b56:	6029      	str	r1, [r5, #0]
 8009b58:	0601      	lsls	r1, r0, #24
 8009b5a:	d501      	bpl.n	8009b60 <_printf_i+0xec>
 8009b5c:	681e      	ldr	r6, [r3, #0]
 8009b5e:	e002      	b.n	8009b66 <_printf_i+0xf2>
 8009b60:	0646      	lsls	r6, r0, #25
 8009b62:	d5fb      	bpl.n	8009b5c <_printf_i+0xe8>
 8009b64:	881e      	ldrh	r6, [r3, #0]
 8009b66:	4854      	ldr	r0, [pc, #336]	; (8009cb8 <_printf_i+0x244>)
 8009b68:	2f6f      	cmp	r7, #111	; 0x6f
 8009b6a:	bf0c      	ite	eq
 8009b6c:	2308      	moveq	r3, #8
 8009b6e:	230a      	movne	r3, #10
 8009b70:	2100      	movs	r1, #0
 8009b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b76:	6865      	ldr	r5, [r4, #4]
 8009b78:	60a5      	str	r5, [r4, #8]
 8009b7a:	2d00      	cmp	r5, #0
 8009b7c:	bfa2      	ittt	ge
 8009b7e:	6821      	ldrge	r1, [r4, #0]
 8009b80:	f021 0104 	bicge.w	r1, r1, #4
 8009b84:	6021      	strge	r1, [r4, #0]
 8009b86:	b90e      	cbnz	r6, 8009b8c <_printf_i+0x118>
 8009b88:	2d00      	cmp	r5, #0
 8009b8a:	d04d      	beq.n	8009c28 <_printf_i+0x1b4>
 8009b8c:	4615      	mov	r5, r2
 8009b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b92:	fb03 6711 	mls	r7, r3, r1, r6
 8009b96:	5dc7      	ldrb	r7, [r0, r7]
 8009b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b9c:	4637      	mov	r7, r6
 8009b9e:	42bb      	cmp	r3, r7
 8009ba0:	460e      	mov	r6, r1
 8009ba2:	d9f4      	bls.n	8009b8e <_printf_i+0x11a>
 8009ba4:	2b08      	cmp	r3, #8
 8009ba6:	d10b      	bne.n	8009bc0 <_printf_i+0x14c>
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	07de      	lsls	r6, r3, #31
 8009bac:	d508      	bpl.n	8009bc0 <_printf_i+0x14c>
 8009bae:	6923      	ldr	r3, [r4, #16]
 8009bb0:	6861      	ldr	r1, [r4, #4]
 8009bb2:	4299      	cmp	r1, r3
 8009bb4:	bfde      	ittt	le
 8009bb6:	2330      	movle	r3, #48	; 0x30
 8009bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bc0:	1b52      	subs	r2, r2, r5
 8009bc2:	6122      	str	r2, [r4, #16]
 8009bc4:	f8cd a000 	str.w	sl, [sp]
 8009bc8:	464b      	mov	r3, r9
 8009bca:	aa03      	add	r2, sp, #12
 8009bcc:	4621      	mov	r1, r4
 8009bce:	4640      	mov	r0, r8
 8009bd0:	f7ff fee2 	bl	8009998 <_printf_common>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	d14c      	bne.n	8009c72 <_printf_i+0x1fe>
 8009bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bdc:	b004      	add	sp, #16
 8009bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be2:	4835      	ldr	r0, [pc, #212]	; (8009cb8 <_printf_i+0x244>)
 8009be4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009be8:	6829      	ldr	r1, [r5, #0]
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bf0:	6029      	str	r1, [r5, #0]
 8009bf2:	061d      	lsls	r5, r3, #24
 8009bf4:	d514      	bpl.n	8009c20 <_printf_i+0x1ac>
 8009bf6:	07df      	lsls	r7, r3, #31
 8009bf8:	bf44      	itt	mi
 8009bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8009bfe:	6023      	strmi	r3, [r4, #0]
 8009c00:	b91e      	cbnz	r6, 8009c0a <_printf_i+0x196>
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	f023 0320 	bic.w	r3, r3, #32
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	2310      	movs	r3, #16
 8009c0c:	e7b0      	b.n	8009b70 <_printf_i+0xfc>
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	f043 0320 	orr.w	r3, r3, #32
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	2378      	movs	r3, #120	; 0x78
 8009c18:	4828      	ldr	r0, [pc, #160]	; (8009cbc <_printf_i+0x248>)
 8009c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c1e:	e7e3      	b.n	8009be8 <_printf_i+0x174>
 8009c20:	0659      	lsls	r1, r3, #25
 8009c22:	bf48      	it	mi
 8009c24:	b2b6      	uxthmi	r6, r6
 8009c26:	e7e6      	b.n	8009bf6 <_printf_i+0x182>
 8009c28:	4615      	mov	r5, r2
 8009c2a:	e7bb      	b.n	8009ba4 <_printf_i+0x130>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	6826      	ldr	r6, [r4, #0]
 8009c30:	6961      	ldr	r1, [r4, #20]
 8009c32:	1d18      	adds	r0, r3, #4
 8009c34:	6028      	str	r0, [r5, #0]
 8009c36:	0635      	lsls	r5, r6, #24
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	d501      	bpl.n	8009c40 <_printf_i+0x1cc>
 8009c3c:	6019      	str	r1, [r3, #0]
 8009c3e:	e002      	b.n	8009c46 <_printf_i+0x1d2>
 8009c40:	0670      	lsls	r0, r6, #25
 8009c42:	d5fb      	bpl.n	8009c3c <_printf_i+0x1c8>
 8009c44:	8019      	strh	r1, [r3, #0]
 8009c46:	2300      	movs	r3, #0
 8009c48:	6123      	str	r3, [r4, #16]
 8009c4a:	4615      	mov	r5, r2
 8009c4c:	e7ba      	b.n	8009bc4 <_printf_i+0x150>
 8009c4e:	682b      	ldr	r3, [r5, #0]
 8009c50:	1d1a      	adds	r2, r3, #4
 8009c52:	602a      	str	r2, [r5, #0]
 8009c54:	681d      	ldr	r5, [r3, #0]
 8009c56:	6862      	ldr	r2, [r4, #4]
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f7f6 fac0 	bl	80001e0 <memchr>
 8009c60:	b108      	cbz	r0, 8009c66 <_printf_i+0x1f2>
 8009c62:	1b40      	subs	r0, r0, r5
 8009c64:	6060      	str	r0, [r4, #4]
 8009c66:	6863      	ldr	r3, [r4, #4]
 8009c68:	6123      	str	r3, [r4, #16]
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c70:	e7a8      	b.n	8009bc4 <_printf_i+0x150>
 8009c72:	6923      	ldr	r3, [r4, #16]
 8009c74:	462a      	mov	r2, r5
 8009c76:	4649      	mov	r1, r9
 8009c78:	4640      	mov	r0, r8
 8009c7a:	47d0      	blx	sl
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	d0ab      	beq.n	8009bd8 <_printf_i+0x164>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	079b      	lsls	r3, r3, #30
 8009c84:	d413      	bmi.n	8009cae <_printf_i+0x23a>
 8009c86:	68e0      	ldr	r0, [r4, #12]
 8009c88:	9b03      	ldr	r3, [sp, #12]
 8009c8a:	4298      	cmp	r0, r3
 8009c8c:	bfb8      	it	lt
 8009c8e:	4618      	movlt	r0, r3
 8009c90:	e7a4      	b.n	8009bdc <_printf_i+0x168>
 8009c92:	2301      	movs	r3, #1
 8009c94:	4632      	mov	r2, r6
 8009c96:	4649      	mov	r1, r9
 8009c98:	4640      	mov	r0, r8
 8009c9a:	47d0      	blx	sl
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	d09b      	beq.n	8009bd8 <_printf_i+0x164>
 8009ca0:	3501      	adds	r5, #1
 8009ca2:	68e3      	ldr	r3, [r4, #12]
 8009ca4:	9903      	ldr	r1, [sp, #12]
 8009ca6:	1a5b      	subs	r3, r3, r1
 8009ca8:	42ab      	cmp	r3, r5
 8009caa:	dcf2      	bgt.n	8009c92 <_printf_i+0x21e>
 8009cac:	e7eb      	b.n	8009c86 <_printf_i+0x212>
 8009cae:	2500      	movs	r5, #0
 8009cb0:	f104 0619 	add.w	r6, r4, #25
 8009cb4:	e7f5      	b.n	8009ca2 <_printf_i+0x22e>
 8009cb6:	bf00      	nop
 8009cb8:	0800ef16 	.word	0x0800ef16
 8009cbc:	0800ef27 	.word	0x0800ef27

08009cc0 <_scanf_float>:
 8009cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc4:	b087      	sub	sp, #28
 8009cc6:	4617      	mov	r7, r2
 8009cc8:	9303      	str	r3, [sp, #12]
 8009cca:	688b      	ldr	r3, [r1, #8]
 8009ccc:	1e5a      	subs	r2, r3, #1
 8009cce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009cd2:	bf83      	ittte	hi
 8009cd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009cd8:	195b      	addhi	r3, r3, r5
 8009cda:	9302      	strhi	r3, [sp, #8]
 8009cdc:	2300      	movls	r3, #0
 8009cde:	bf86      	itte	hi
 8009ce0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009ce4:	608b      	strhi	r3, [r1, #8]
 8009ce6:	9302      	strls	r3, [sp, #8]
 8009ce8:	680b      	ldr	r3, [r1, #0]
 8009cea:	468b      	mov	fp, r1
 8009cec:	2500      	movs	r5, #0
 8009cee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009cf2:	f84b 3b1c 	str.w	r3, [fp], #28
 8009cf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009cfa:	4680      	mov	r8, r0
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	465e      	mov	r6, fp
 8009d00:	46aa      	mov	sl, r5
 8009d02:	46a9      	mov	r9, r5
 8009d04:	9501      	str	r5, [sp, #4]
 8009d06:	68a2      	ldr	r2, [r4, #8]
 8009d08:	b152      	cbz	r2, 8009d20 <_scanf_float+0x60>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b4e      	cmp	r3, #78	; 0x4e
 8009d10:	d864      	bhi.n	8009ddc <_scanf_float+0x11c>
 8009d12:	2b40      	cmp	r3, #64	; 0x40
 8009d14:	d83c      	bhi.n	8009d90 <_scanf_float+0xd0>
 8009d16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009d1a:	b2c8      	uxtb	r0, r1
 8009d1c:	280e      	cmp	r0, #14
 8009d1e:	d93a      	bls.n	8009d96 <_scanf_float+0xd6>
 8009d20:	f1b9 0f00 	cmp.w	r9, #0
 8009d24:	d003      	beq.n	8009d2e <_scanf_float+0x6e>
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d32:	f1ba 0f01 	cmp.w	sl, #1
 8009d36:	f200 8113 	bhi.w	8009f60 <_scanf_float+0x2a0>
 8009d3a:	455e      	cmp	r6, fp
 8009d3c:	f200 8105 	bhi.w	8009f4a <_scanf_float+0x28a>
 8009d40:	2501      	movs	r5, #1
 8009d42:	4628      	mov	r0, r5
 8009d44:	b007      	add	sp, #28
 8009d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009d4e:	2a0d      	cmp	r2, #13
 8009d50:	d8e6      	bhi.n	8009d20 <_scanf_float+0x60>
 8009d52:	a101      	add	r1, pc, #4	; (adr r1, 8009d58 <_scanf_float+0x98>)
 8009d54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d58:	08009e97 	.word	0x08009e97
 8009d5c:	08009d21 	.word	0x08009d21
 8009d60:	08009d21 	.word	0x08009d21
 8009d64:	08009d21 	.word	0x08009d21
 8009d68:	08009ef7 	.word	0x08009ef7
 8009d6c:	08009ecf 	.word	0x08009ecf
 8009d70:	08009d21 	.word	0x08009d21
 8009d74:	08009d21 	.word	0x08009d21
 8009d78:	08009ea5 	.word	0x08009ea5
 8009d7c:	08009d21 	.word	0x08009d21
 8009d80:	08009d21 	.word	0x08009d21
 8009d84:	08009d21 	.word	0x08009d21
 8009d88:	08009d21 	.word	0x08009d21
 8009d8c:	08009e5d 	.word	0x08009e5d
 8009d90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009d94:	e7db      	b.n	8009d4e <_scanf_float+0x8e>
 8009d96:	290e      	cmp	r1, #14
 8009d98:	d8c2      	bhi.n	8009d20 <_scanf_float+0x60>
 8009d9a:	a001      	add	r0, pc, #4	; (adr r0, 8009da0 <_scanf_float+0xe0>)
 8009d9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009da0:	08009e4f 	.word	0x08009e4f
 8009da4:	08009d21 	.word	0x08009d21
 8009da8:	08009e4f 	.word	0x08009e4f
 8009dac:	08009ee3 	.word	0x08009ee3
 8009db0:	08009d21 	.word	0x08009d21
 8009db4:	08009dfd 	.word	0x08009dfd
 8009db8:	08009e39 	.word	0x08009e39
 8009dbc:	08009e39 	.word	0x08009e39
 8009dc0:	08009e39 	.word	0x08009e39
 8009dc4:	08009e39 	.word	0x08009e39
 8009dc8:	08009e39 	.word	0x08009e39
 8009dcc:	08009e39 	.word	0x08009e39
 8009dd0:	08009e39 	.word	0x08009e39
 8009dd4:	08009e39 	.word	0x08009e39
 8009dd8:	08009e39 	.word	0x08009e39
 8009ddc:	2b6e      	cmp	r3, #110	; 0x6e
 8009dde:	d809      	bhi.n	8009df4 <_scanf_float+0x134>
 8009de0:	2b60      	cmp	r3, #96	; 0x60
 8009de2:	d8b2      	bhi.n	8009d4a <_scanf_float+0x8a>
 8009de4:	2b54      	cmp	r3, #84	; 0x54
 8009de6:	d077      	beq.n	8009ed8 <_scanf_float+0x218>
 8009de8:	2b59      	cmp	r3, #89	; 0x59
 8009dea:	d199      	bne.n	8009d20 <_scanf_float+0x60>
 8009dec:	2d07      	cmp	r5, #7
 8009dee:	d197      	bne.n	8009d20 <_scanf_float+0x60>
 8009df0:	2508      	movs	r5, #8
 8009df2:	e029      	b.n	8009e48 <_scanf_float+0x188>
 8009df4:	2b74      	cmp	r3, #116	; 0x74
 8009df6:	d06f      	beq.n	8009ed8 <_scanf_float+0x218>
 8009df8:	2b79      	cmp	r3, #121	; 0x79
 8009dfa:	e7f6      	b.n	8009dea <_scanf_float+0x12a>
 8009dfc:	6821      	ldr	r1, [r4, #0]
 8009dfe:	05c8      	lsls	r0, r1, #23
 8009e00:	d51a      	bpl.n	8009e38 <_scanf_float+0x178>
 8009e02:	9b02      	ldr	r3, [sp, #8]
 8009e04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009e08:	6021      	str	r1, [r4, #0]
 8009e0a:	f109 0901 	add.w	r9, r9, #1
 8009e0e:	b11b      	cbz	r3, 8009e18 <_scanf_float+0x158>
 8009e10:	3b01      	subs	r3, #1
 8009e12:	3201      	adds	r2, #1
 8009e14:	9302      	str	r3, [sp, #8]
 8009e16:	60a2      	str	r2, [r4, #8]
 8009e18:	68a3      	ldr	r3, [r4, #8]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	60a3      	str	r3, [r4, #8]
 8009e1e:	6923      	ldr	r3, [r4, #16]
 8009e20:	3301      	adds	r3, #1
 8009e22:	6123      	str	r3, [r4, #16]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	607b      	str	r3, [r7, #4]
 8009e2c:	f340 8084 	ble.w	8009f38 <_scanf_float+0x278>
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	3301      	adds	r3, #1
 8009e34:	603b      	str	r3, [r7, #0]
 8009e36:	e766      	b.n	8009d06 <_scanf_float+0x46>
 8009e38:	eb1a 0f05 	cmn.w	sl, r5
 8009e3c:	f47f af70 	bne.w	8009d20 <_scanf_float+0x60>
 8009e40:	6822      	ldr	r2, [r4, #0]
 8009e42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009e46:	6022      	str	r2, [r4, #0]
 8009e48:	f806 3b01 	strb.w	r3, [r6], #1
 8009e4c:	e7e4      	b.n	8009e18 <_scanf_float+0x158>
 8009e4e:	6822      	ldr	r2, [r4, #0]
 8009e50:	0610      	lsls	r0, r2, #24
 8009e52:	f57f af65 	bpl.w	8009d20 <_scanf_float+0x60>
 8009e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e5a:	e7f4      	b.n	8009e46 <_scanf_float+0x186>
 8009e5c:	f1ba 0f00 	cmp.w	sl, #0
 8009e60:	d10e      	bne.n	8009e80 <_scanf_float+0x1c0>
 8009e62:	f1b9 0f00 	cmp.w	r9, #0
 8009e66:	d10e      	bne.n	8009e86 <_scanf_float+0x1c6>
 8009e68:	6822      	ldr	r2, [r4, #0]
 8009e6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009e6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009e72:	d108      	bne.n	8009e86 <_scanf_float+0x1c6>
 8009e74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e78:	6022      	str	r2, [r4, #0]
 8009e7a:	f04f 0a01 	mov.w	sl, #1
 8009e7e:	e7e3      	b.n	8009e48 <_scanf_float+0x188>
 8009e80:	f1ba 0f02 	cmp.w	sl, #2
 8009e84:	d055      	beq.n	8009f32 <_scanf_float+0x272>
 8009e86:	2d01      	cmp	r5, #1
 8009e88:	d002      	beq.n	8009e90 <_scanf_float+0x1d0>
 8009e8a:	2d04      	cmp	r5, #4
 8009e8c:	f47f af48 	bne.w	8009d20 <_scanf_float+0x60>
 8009e90:	3501      	adds	r5, #1
 8009e92:	b2ed      	uxtb	r5, r5
 8009e94:	e7d8      	b.n	8009e48 <_scanf_float+0x188>
 8009e96:	f1ba 0f01 	cmp.w	sl, #1
 8009e9a:	f47f af41 	bne.w	8009d20 <_scanf_float+0x60>
 8009e9e:	f04f 0a02 	mov.w	sl, #2
 8009ea2:	e7d1      	b.n	8009e48 <_scanf_float+0x188>
 8009ea4:	b97d      	cbnz	r5, 8009ec6 <_scanf_float+0x206>
 8009ea6:	f1b9 0f00 	cmp.w	r9, #0
 8009eaa:	f47f af3c 	bne.w	8009d26 <_scanf_float+0x66>
 8009eae:	6822      	ldr	r2, [r4, #0]
 8009eb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009eb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009eb8:	f47f af39 	bne.w	8009d2e <_scanf_float+0x6e>
 8009ebc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ec0:	6022      	str	r2, [r4, #0]
 8009ec2:	2501      	movs	r5, #1
 8009ec4:	e7c0      	b.n	8009e48 <_scanf_float+0x188>
 8009ec6:	2d03      	cmp	r5, #3
 8009ec8:	d0e2      	beq.n	8009e90 <_scanf_float+0x1d0>
 8009eca:	2d05      	cmp	r5, #5
 8009ecc:	e7de      	b.n	8009e8c <_scanf_float+0x1cc>
 8009ece:	2d02      	cmp	r5, #2
 8009ed0:	f47f af26 	bne.w	8009d20 <_scanf_float+0x60>
 8009ed4:	2503      	movs	r5, #3
 8009ed6:	e7b7      	b.n	8009e48 <_scanf_float+0x188>
 8009ed8:	2d06      	cmp	r5, #6
 8009eda:	f47f af21 	bne.w	8009d20 <_scanf_float+0x60>
 8009ede:	2507      	movs	r5, #7
 8009ee0:	e7b2      	b.n	8009e48 <_scanf_float+0x188>
 8009ee2:	6822      	ldr	r2, [r4, #0]
 8009ee4:	0591      	lsls	r1, r2, #22
 8009ee6:	f57f af1b 	bpl.w	8009d20 <_scanf_float+0x60>
 8009eea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009eee:	6022      	str	r2, [r4, #0]
 8009ef0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ef4:	e7a8      	b.n	8009e48 <_scanf_float+0x188>
 8009ef6:	6822      	ldr	r2, [r4, #0]
 8009ef8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009efc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009f00:	d006      	beq.n	8009f10 <_scanf_float+0x250>
 8009f02:	0550      	lsls	r0, r2, #21
 8009f04:	f57f af0c 	bpl.w	8009d20 <_scanf_float+0x60>
 8009f08:	f1b9 0f00 	cmp.w	r9, #0
 8009f0c:	f43f af0f 	beq.w	8009d2e <_scanf_float+0x6e>
 8009f10:	0591      	lsls	r1, r2, #22
 8009f12:	bf58      	it	pl
 8009f14:	9901      	ldrpl	r1, [sp, #4]
 8009f16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f1a:	bf58      	it	pl
 8009f1c:	eba9 0101 	subpl.w	r1, r9, r1
 8009f20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009f24:	bf58      	it	pl
 8009f26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009f2a:	6022      	str	r2, [r4, #0]
 8009f2c:	f04f 0900 	mov.w	r9, #0
 8009f30:	e78a      	b.n	8009e48 <_scanf_float+0x188>
 8009f32:	f04f 0a03 	mov.w	sl, #3
 8009f36:	e787      	b.n	8009e48 <_scanf_float+0x188>
 8009f38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009f3c:	4639      	mov	r1, r7
 8009f3e:	4640      	mov	r0, r8
 8009f40:	4798      	blx	r3
 8009f42:	2800      	cmp	r0, #0
 8009f44:	f43f aedf 	beq.w	8009d06 <_scanf_float+0x46>
 8009f48:	e6ea      	b.n	8009d20 <_scanf_float+0x60>
 8009f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f52:	463a      	mov	r2, r7
 8009f54:	4640      	mov	r0, r8
 8009f56:	4798      	blx	r3
 8009f58:	6923      	ldr	r3, [r4, #16]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	6123      	str	r3, [r4, #16]
 8009f5e:	e6ec      	b.n	8009d3a <_scanf_float+0x7a>
 8009f60:	1e6b      	subs	r3, r5, #1
 8009f62:	2b06      	cmp	r3, #6
 8009f64:	d825      	bhi.n	8009fb2 <_scanf_float+0x2f2>
 8009f66:	2d02      	cmp	r5, #2
 8009f68:	d836      	bhi.n	8009fd8 <_scanf_float+0x318>
 8009f6a:	455e      	cmp	r6, fp
 8009f6c:	f67f aee8 	bls.w	8009d40 <_scanf_float+0x80>
 8009f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f78:	463a      	mov	r2, r7
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	4798      	blx	r3
 8009f7e:	6923      	ldr	r3, [r4, #16]
 8009f80:	3b01      	subs	r3, #1
 8009f82:	6123      	str	r3, [r4, #16]
 8009f84:	e7f1      	b.n	8009f6a <_scanf_float+0x2aa>
 8009f86:	9802      	ldr	r0, [sp, #8]
 8009f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009f90:	9002      	str	r0, [sp, #8]
 8009f92:	463a      	mov	r2, r7
 8009f94:	4640      	mov	r0, r8
 8009f96:	4798      	blx	r3
 8009f98:	6923      	ldr	r3, [r4, #16]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	6123      	str	r3, [r4, #16]
 8009f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fa2:	fa5f fa8a 	uxtb.w	sl, sl
 8009fa6:	f1ba 0f02 	cmp.w	sl, #2
 8009faa:	d1ec      	bne.n	8009f86 <_scanf_float+0x2c6>
 8009fac:	3d03      	subs	r5, #3
 8009fae:	b2ed      	uxtb	r5, r5
 8009fb0:	1b76      	subs	r6, r6, r5
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	05da      	lsls	r2, r3, #23
 8009fb6:	d52f      	bpl.n	800a018 <_scanf_float+0x358>
 8009fb8:	055b      	lsls	r3, r3, #21
 8009fba:	d510      	bpl.n	8009fde <_scanf_float+0x31e>
 8009fbc:	455e      	cmp	r6, fp
 8009fbe:	f67f aebf 	bls.w	8009d40 <_scanf_float+0x80>
 8009fc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009fca:	463a      	mov	r2, r7
 8009fcc:	4640      	mov	r0, r8
 8009fce:	4798      	blx	r3
 8009fd0:	6923      	ldr	r3, [r4, #16]
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	6123      	str	r3, [r4, #16]
 8009fd6:	e7f1      	b.n	8009fbc <_scanf_float+0x2fc>
 8009fd8:	46aa      	mov	sl, r5
 8009fda:	9602      	str	r6, [sp, #8]
 8009fdc:	e7df      	b.n	8009f9e <_scanf_float+0x2de>
 8009fde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009fe2:	6923      	ldr	r3, [r4, #16]
 8009fe4:	2965      	cmp	r1, #101	; 0x65
 8009fe6:	f103 33ff 	add.w	r3, r3, #4294967295
 8009fea:	f106 35ff 	add.w	r5, r6, #4294967295
 8009fee:	6123      	str	r3, [r4, #16]
 8009ff0:	d00c      	beq.n	800a00c <_scanf_float+0x34c>
 8009ff2:	2945      	cmp	r1, #69	; 0x45
 8009ff4:	d00a      	beq.n	800a00c <_scanf_float+0x34c>
 8009ff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ffa:	463a      	mov	r2, r7
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	4798      	blx	r3
 800a000:	6923      	ldr	r3, [r4, #16]
 800a002:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a006:	3b01      	subs	r3, #1
 800a008:	1eb5      	subs	r5, r6, #2
 800a00a:	6123      	str	r3, [r4, #16]
 800a00c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a010:	463a      	mov	r2, r7
 800a012:	4640      	mov	r0, r8
 800a014:	4798      	blx	r3
 800a016:	462e      	mov	r6, r5
 800a018:	6825      	ldr	r5, [r4, #0]
 800a01a:	f015 0510 	ands.w	r5, r5, #16
 800a01e:	d159      	bne.n	800a0d4 <_scanf_float+0x414>
 800a020:	7035      	strb	r5, [r6, #0]
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a02c:	d11b      	bne.n	800a066 <_scanf_float+0x3a6>
 800a02e:	9b01      	ldr	r3, [sp, #4]
 800a030:	454b      	cmp	r3, r9
 800a032:	eba3 0209 	sub.w	r2, r3, r9
 800a036:	d123      	bne.n	800a080 <_scanf_float+0x3c0>
 800a038:	2200      	movs	r2, #0
 800a03a:	4659      	mov	r1, fp
 800a03c:	4640      	mov	r0, r8
 800a03e:	f000 ff5d 	bl	800aefc <_strtod_r>
 800a042:	6822      	ldr	r2, [r4, #0]
 800a044:	9b03      	ldr	r3, [sp, #12]
 800a046:	f012 0f02 	tst.w	r2, #2
 800a04a:	ec57 6b10 	vmov	r6, r7, d0
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	d021      	beq.n	800a096 <_scanf_float+0x3d6>
 800a052:	9903      	ldr	r1, [sp, #12]
 800a054:	1d1a      	adds	r2, r3, #4
 800a056:	600a      	str	r2, [r1, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	e9c3 6700 	strd	r6, r7, [r3]
 800a05e:	68e3      	ldr	r3, [r4, #12]
 800a060:	3301      	adds	r3, #1
 800a062:	60e3      	str	r3, [r4, #12]
 800a064:	e66d      	b.n	8009d42 <_scanf_float+0x82>
 800a066:	9b04      	ldr	r3, [sp, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0e5      	beq.n	800a038 <_scanf_float+0x378>
 800a06c:	9905      	ldr	r1, [sp, #20]
 800a06e:	230a      	movs	r3, #10
 800a070:	462a      	mov	r2, r5
 800a072:	3101      	adds	r1, #1
 800a074:	4640      	mov	r0, r8
 800a076:	f000 ffc9 	bl	800b00c <_strtol_r>
 800a07a:	9b04      	ldr	r3, [sp, #16]
 800a07c:	9e05      	ldr	r6, [sp, #20]
 800a07e:	1ac2      	subs	r2, r0, r3
 800a080:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a084:	429e      	cmp	r6, r3
 800a086:	bf28      	it	cs
 800a088:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a08c:	4912      	ldr	r1, [pc, #72]	; (800a0d8 <_scanf_float+0x418>)
 800a08e:	4630      	mov	r0, r6
 800a090:	f000 f8f2 	bl	800a278 <siprintf>
 800a094:	e7d0      	b.n	800a038 <_scanf_float+0x378>
 800a096:	9903      	ldr	r1, [sp, #12]
 800a098:	f012 0f04 	tst.w	r2, #4
 800a09c:	f103 0204 	add.w	r2, r3, #4
 800a0a0:	600a      	str	r2, [r1, #0]
 800a0a2:	d1d9      	bne.n	800a058 <_scanf_float+0x398>
 800a0a4:	f8d3 8000 	ldr.w	r8, [r3]
 800a0a8:	ee10 2a10 	vmov	r2, s0
 800a0ac:	ee10 0a10 	vmov	r0, s0
 800a0b0:	463b      	mov	r3, r7
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	f7f6 fd3a 	bl	8000b2c <__aeabi_dcmpun>
 800a0b8:	b128      	cbz	r0, 800a0c6 <_scanf_float+0x406>
 800a0ba:	4808      	ldr	r0, [pc, #32]	; (800a0dc <_scanf_float+0x41c>)
 800a0bc:	f000 f8d6 	bl	800a26c <nanf>
 800a0c0:	ed88 0a00 	vstr	s0, [r8]
 800a0c4:	e7cb      	b.n	800a05e <_scanf_float+0x39e>
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	f7f6 fd8d 	bl	8000be8 <__aeabi_d2f>
 800a0ce:	f8c8 0000 	str.w	r0, [r8]
 800a0d2:	e7c4      	b.n	800a05e <_scanf_float+0x39e>
 800a0d4:	2500      	movs	r5, #0
 800a0d6:	e634      	b.n	8009d42 <_scanf_float+0x82>
 800a0d8:	0800ef38 	.word	0x0800ef38
 800a0dc:	0800f3a8 	.word	0x0800f3a8

0800a0e0 <setvbuf>:
 800a0e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0e4:	461d      	mov	r5, r3
 800a0e6:	4b5d      	ldr	r3, [pc, #372]	; (800a25c <setvbuf+0x17c>)
 800a0e8:	681f      	ldr	r7, [r3, #0]
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	460e      	mov	r6, r1
 800a0ee:	4690      	mov	r8, r2
 800a0f0:	b127      	cbz	r7, 800a0fc <setvbuf+0x1c>
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	b913      	cbnz	r3, 800a0fc <setvbuf+0x1c>
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	f001 ff1e 	bl	800bf38 <__sinit>
 800a0fc:	4b58      	ldr	r3, [pc, #352]	; (800a260 <setvbuf+0x180>)
 800a0fe:	429c      	cmp	r4, r3
 800a100:	d167      	bne.n	800a1d2 <setvbuf+0xf2>
 800a102:	687c      	ldr	r4, [r7, #4]
 800a104:	f1b8 0f02 	cmp.w	r8, #2
 800a108:	d006      	beq.n	800a118 <setvbuf+0x38>
 800a10a:	f1b8 0f01 	cmp.w	r8, #1
 800a10e:	f200 809f 	bhi.w	800a250 <setvbuf+0x170>
 800a112:	2d00      	cmp	r5, #0
 800a114:	f2c0 809c 	blt.w	800a250 <setvbuf+0x170>
 800a118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a11a:	07db      	lsls	r3, r3, #31
 800a11c:	d405      	bmi.n	800a12a <setvbuf+0x4a>
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	0598      	lsls	r0, r3, #22
 800a122:	d402      	bmi.n	800a12a <setvbuf+0x4a>
 800a124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a126:	f002 fb18 	bl	800c75a <__retarget_lock_acquire_recursive>
 800a12a:	4621      	mov	r1, r4
 800a12c:	4638      	mov	r0, r7
 800a12e:	f001 fe6f 	bl	800be10 <_fflush_r>
 800a132:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a134:	b141      	cbz	r1, 800a148 <setvbuf+0x68>
 800a136:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a13a:	4299      	cmp	r1, r3
 800a13c:	d002      	beq.n	800a144 <setvbuf+0x64>
 800a13e:	4638      	mov	r0, r7
 800a140:	f003 f872 	bl	800d228 <_free_r>
 800a144:	2300      	movs	r3, #0
 800a146:	6363      	str	r3, [r4, #52]	; 0x34
 800a148:	2300      	movs	r3, #0
 800a14a:	61a3      	str	r3, [r4, #24]
 800a14c:	6063      	str	r3, [r4, #4]
 800a14e:	89a3      	ldrh	r3, [r4, #12]
 800a150:	0619      	lsls	r1, r3, #24
 800a152:	d503      	bpl.n	800a15c <setvbuf+0x7c>
 800a154:	6921      	ldr	r1, [r4, #16]
 800a156:	4638      	mov	r0, r7
 800a158:	f003 f866 	bl	800d228 <_free_r>
 800a15c:	89a3      	ldrh	r3, [r4, #12]
 800a15e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a162:	f023 0303 	bic.w	r3, r3, #3
 800a166:	f1b8 0f02 	cmp.w	r8, #2
 800a16a:	81a3      	strh	r3, [r4, #12]
 800a16c:	d06c      	beq.n	800a248 <setvbuf+0x168>
 800a16e:	ab01      	add	r3, sp, #4
 800a170:	466a      	mov	r2, sp
 800a172:	4621      	mov	r1, r4
 800a174:	4638      	mov	r0, r7
 800a176:	f002 faf2 	bl	800c75e <__swhatbuf_r>
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	4318      	orrs	r0, r3
 800a17e:	81a0      	strh	r0, [r4, #12]
 800a180:	2d00      	cmp	r5, #0
 800a182:	d130      	bne.n	800a1e6 <setvbuf+0x106>
 800a184:	9d00      	ldr	r5, [sp, #0]
 800a186:	4628      	mov	r0, r5
 800a188:	f002 fb4e 	bl	800c828 <malloc>
 800a18c:	4606      	mov	r6, r0
 800a18e:	2800      	cmp	r0, #0
 800a190:	d155      	bne.n	800a23e <setvbuf+0x15e>
 800a192:	f8dd 9000 	ldr.w	r9, [sp]
 800a196:	45a9      	cmp	r9, r5
 800a198:	d14a      	bne.n	800a230 <setvbuf+0x150>
 800a19a:	f04f 35ff 	mov.w	r5, #4294967295
 800a19e:	2200      	movs	r2, #0
 800a1a0:	60a2      	str	r2, [r4, #8]
 800a1a2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a1a6:	6022      	str	r2, [r4, #0]
 800a1a8:	6122      	str	r2, [r4, #16]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1b0:	6162      	str	r2, [r4, #20]
 800a1b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1b4:	f043 0302 	orr.w	r3, r3, #2
 800a1b8:	07d2      	lsls	r2, r2, #31
 800a1ba:	81a3      	strh	r3, [r4, #12]
 800a1bc:	d405      	bmi.n	800a1ca <setvbuf+0xea>
 800a1be:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a1c2:	d102      	bne.n	800a1ca <setvbuf+0xea>
 800a1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1c6:	f002 fac9 	bl	800c75c <__retarget_lock_release_recursive>
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	b003      	add	sp, #12
 800a1ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1d2:	4b24      	ldr	r3, [pc, #144]	; (800a264 <setvbuf+0x184>)
 800a1d4:	429c      	cmp	r4, r3
 800a1d6:	d101      	bne.n	800a1dc <setvbuf+0xfc>
 800a1d8:	68bc      	ldr	r4, [r7, #8]
 800a1da:	e793      	b.n	800a104 <setvbuf+0x24>
 800a1dc:	4b22      	ldr	r3, [pc, #136]	; (800a268 <setvbuf+0x188>)
 800a1de:	429c      	cmp	r4, r3
 800a1e0:	bf08      	it	eq
 800a1e2:	68fc      	ldreq	r4, [r7, #12]
 800a1e4:	e78e      	b.n	800a104 <setvbuf+0x24>
 800a1e6:	2e00      	cmp	r6, #0
 800a1e8:	d0cd      	beq.n	800a186 <setvbuf+0xa6>
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	b913      	cbnz	r3, 800a1f4 <setvbuf+0x114>
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	f001 fea2 	bl	800bf38 <__sinit>
 800a1f4:	f1b8 0f01 	cmp.w	r8, #1
 800a1f8:	bf08      	it	eq
 800a1fa:	89a3      	ldrheq	r3, [r4, #12]
 800a1fc:	6026      	str	r6, [r4, #0]
 800a1fe:	bf04      	itt	eq
 800a200:	f043 0301 	orreq.w	r3, r3, #1
 800a204:	81a3      	strheq	r3, [r4, #12]
 800a206:	89a2      	ldrh	r2, [r4, #12]
 800a208:	f012 0308 	ands.w	r3, r2, #8
 800a20c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a210:	d01c      	beq.n	800a24c <setvbuf+0x16c>
 800a212:	07d3      	lsls	r3, r2, #31
 800a214:	bf41      	itttt	mi
 800a216:	2300      	movmi	r3, #0
 800a218:	426d      	negmi	r5, r5
 800a21a:	60a3      	strmi	r3, [r4, #8]
 800a21c:	61a5      	strmi	r5, [r4, #24]
 800a21e:	bf58      	it	pl
 800a220:	60a5      	strpl	r5, [r4, #8]
 800a222:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a224:	f015 0501 	ands.w	r5, r5, #1
 800a228:	d115      	bne.n	800a256 <setvbuf+0x176>
 800a22a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a22e:	e7c8      	b.n	800a1c2 <setvbuf+0xe2>
 800a230:	4648      	mov	r0, r9
 800a232:	f002 faf9 	bl	800c828 <malloc>
 800a236:	4606      	mov	r6, r0
 800a238:	2800      	cmp	r0, #0
 800a23a:	d0ae      	beq.n	800a19a <setvbuf+0xba>
 800a23c:	464d      	mov	r5, r9
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a244:	81a3      	strh	r3, [r4, #12]
 800a246:	e7d0      	b.n	800a1ea <setvbuf+0x10a>
 800a248:	2500      	movs	r5, #0
 800a24a:	e7a8      	b.n	800a19e <setvbuf+0xbe>
 800a24c:	60a3      	str	r3, [r4, #8]
 800a24e:	e7e8      	b.n	800a222 <setvbuf+0x142>
 800a250:	f04f 35ff 	mov.w	r5, #4294967295
 800a254:	e7b9      	b.n	800a1ca <setvbuf+0xea>
 800a256:	2500      	movs	r5, #0
 800a258:	e7b7      	b.n	800a1ca <setvbuf+0xea>
 800a25a:	bf00      	nop
 800a25c:	200001a0 	.word	0x200001a0
 800a260:	0800f144 	.word	0x0800f144
 800a264:	0800f164 	.word	0x0800f164
 800a268:	0800f124 	.word	0x0800f124

0800a26c <nanf>:
 800a26c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a274 <nanf+0x8>
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	7fc00000 	.word	0x7fc00000

0800a278 <siprintf>:
 800a278:	b40e      	push	{r1, r2, r3}
 800a27a:	b500      	push	{lr}
 800a27c:	b09c      	sub	sp, #112	; 0x70
 800a27e:	ab1d      	add	r3, sp, #116	; 0x74
 800a280:	9002      	str	r0, [sp, #8]
 800a282:	9006      	str	r0, [sp, #24]
 800a284:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a288:	4809      	ldr	r0, [pc, #36]	; (800a2b0 <siprintf+0x38>)
 800a28a:	9107      	str	r1, [sp, #28]
 800a28c:	9104      	str	r1, [sp, #16]
 800a28e:	4909      	ldr	r1, [pc, #36]	; (800a2b4 <siprintf+0x3c>)
 800a290:	f853 2b04 	ldr.w	r2, [r3], #4
 800a294:	9105      	str	r1, [sp, #20]
 800a296:	6800      	ldr	r0, [r0, #0]
 800a298:	9301      	str	r3, [sp, #4]
 800a29a:	a902      	add	r1, sp, #8
 800a29c:	f003 f900 	bl	800d4a0 <_svfiprintf_r>
 800a2a0:	9b02      	ldr	r3, [sp, #8]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	701a      	strb	r2, [r3, #0]
 800a2a6:	b01c      	add	sp, #112	; 0x70
 800a2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2ac:	b003      	add	sp, #12
 800a2ae:	4770      	bx	lr
 800a2b0:	200001a0 	.word	0x200001a0
 800a2b4:	ffff0208 	.word	0xffff0208

0800a2b8 <sulp>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	460d      	mov	r5, r1
 800a2be:	ec45 4b10 	vmov	d0, r4, r5
 800a2c2:	4616      	mov	r6, r2
 800a2c4:	f002 fe4a 	bl	800cf5c <__ulp>
 800a2c8:	ec51 0b10 	vmov	r0, r1, d0
 800a2cc:	b17e      	cbz	r6, 800a2ee <sulp+0x36>
 800a2ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a2d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	dd09      	ble.n	800a2ee <sulp+0x36>
 800a2da:	051b      	lsls	r3, r3, #20
 800a2dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a2e0:	2400      	movs	r4, #0
 800a2e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	462b      	mov	r3, r5
 800a2ea:	f7f6 f985 	bl	80005f8 <__aeabi_dmul>
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}

0800a2f0 <_strtod_l>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	ed2d 8b02 	vpush	{d8}
 800a2f8:	b09d      	sub	sp, #116	; 0x74
 800a2fa:	461f      	mov	r7, r3
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	9318      	str	r3, [sp, #96]	; 0x60
 800a300:	4ba2      	ldr	r3, [pc, #648]	; (800a58c <_strtod_l+0x29c>)
 800a302:	9213      	str	r2, [sp, #76]	; 0x4c
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	9305      	str	r3, [sp, #20]
 800a308:	4604      	mov	r4, r0
 800a30a:	4618      	mov	r0, r3
 800a30c:	4688      	mov	r8, r1
 800a30e:	f7f5 ff5f 	bl	80001d0 <strlen>
 800a312:	f04f 0a00 	mov.w	sl, #0
 800a316:	4605      	mov	r5, r0
 800a318:	f04f 0b00 	mov.w	fp, #0
 800a31c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a320:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a322:	781a      	ldrb	r2, [r3, #0]
 800a324:	2a2b      	cmp	r2, #43	; 0x2b
 800a326:	d04e      	beq.n	800a3c6 <_strtod_l+0xd6>
 800a328:	d83b      	bhi.n	800a3a2 <_strtod_l+0xb2>
 800a32a:	2a0d      	cmp	r2, #13
 800a32c:	d834      	bhi.n	800a398 <_strtod_l+0xa8>
 800a32e:	2a08      	cmp	r2, #8
 800a330:	d834      	bhi.n	800a39c <_strtod_l+0xac>
 800a332:	2a00      	cmp	r2, #0
 800a334:	d03e      	beq.n	800a3b4 <_strtod_l+0xc4>
 800a336:	2300      	movs	r3, #0
 800a338:	930a      	str	r3, [sp, #40]	; 0x28
 800a33a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a33c:	7833      	ldrb	r3, [r6, #0]
 800a33e:	2b30      	cmp	r3, #48	; 0x30
 800a340:	f040 80b0 	bne.w	800a4a4 <_strtod_l+0x1b4>
 800a344:	7873      	ldrb	r3, [r6, #1]
 800a346:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a34a:	2b58      	cmp	r3, #88	; 0x58
 800a34c:	d168      	bne.n	800a420 <_strtod_l+0x130>
 800a34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a350:	9301      	str	r3, [sp, #4]
 800a352:	ab18      	add	r3, sp, #96	; 0x60
 800a354:	9702      	str	r7, [sp, #8]
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	4a8d      	ldr	r2, [pc, #564]	; (800a590 <_strtod_l+0x2a0>)
 800a35a:	ab19      	add	r3, sp, #100	; 0x64
 800a35c:	a917      	add	r1, sp, #92	; 0x5c
 800a35e:	4620      	mov	r0, r4
 800a360:	f001 feee 	bl	800c140 <__gethex>
 800a364:	f010 0707 	ands.w	r7, r0, #7
 800a368:	4605      	mov	r5, r0
 800a36a:	d005      	beq.n	800a378 <_strtod_l+0x88>
 800a36c:	2f06      	cmp	r7, #6
 800a36e:	d12c      	bne.n	800a3ca <_strtod_l+0xda>
 800a370:	3601      	adds	r6, #1
 800a372:	2300      	movs	r3, #0
 800a374:	9617      	str	r6, [sp, #92]	; 0x5c
 800a376:	930a      	str	r3, [sp, #40]	; 0x28
 800a378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f040 8590 	bne.w	800aea0 <_strtod_l+0xbb0>
 800a380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a382:	b1eb      	cbz	r3, 800a3c0 <_strtod_l+0xd0>
 800a384:	4652      	mov	r2, sl
 800a386:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a38a:	ec43 2b10 	vmov	d0, r2, r3
 800a38e:	b01d      	add	sp, #116	; 0x74
 800a390:	ecbd 8b02 	vpop	{d8}
 800a394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a398:	2a20      	cmp	r2, #32
 800a39a:	d1cc      	bne.n	800a336 <_strtod_l+0x46>
 800a39c:	3301      	adds	r3, #1
 800a39e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3a0:	e7be      	b.n	800a320 <_strtod_l+0x30>
 800a3a2:	2a2d      	cmp	r2, #45	; 0x2d
 800a3a4:	d1c7      	bne.n	800a336 <_strtod_l+0x46>
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	920a      	str	r2, [sp, #40]	; 0x28
 800a3aa:	1c5a      	adds	r2, r3, #1
 800a3ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800a3ae:	785b      	ldrb	r3, [r3, #1]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1c2      	bne.n	800a33a <_strtod_l+0x4a>
 800a3b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f040 856e 	bne.w	800ae9c <_strtod_l+0xbac>
 800a3c0:	4652      	mov	r2, sl
 800a3c2:	465b      	mov	r3, fp
 800a3c4:	e7e1      	b.n	800a38a <_strtod_l+0x9a>
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	e7ee      	b.n	800a3a8 <_strtod_l+0xb8>
 800a3ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a3cc:	b13a      	cbz	r2, 800a3de <_strtod_l+0xee>
 800a3ce:	2135      	movs	r1, #53	; 0x35
 800a3d0:	a81a      	add	r0, sp, #104	; 0x68
 800a3d2:	f002 fece 	bl	800d172 <__copybits>
 800a3d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f002 fa8d 	bl	800c8f8 <_Bfree>
 800a3de:	3f01      	subs	r7, #1
 800a3e0:	2f04      	cmp	r7, #4
 800a3e2:	d806      	bhi.n	800a3f2 <_strtod_l+0x102>
 800a3e4:	e8df f007 	tbb	[pc, r7]
 800a3e8:	1714030a 	.word	0x1714030a
 800a3ec:	0a          	.byte	0x0a
 800a3ed:	00          	.byte	0x00
 800a3ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a3f2:	0728      	lsls	r0, r5, #28
 800a3f4:	d5c0      	bpl.n	800a378 <_strtod_l+0x88>
 800a3f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a3fa:	e7bd      	b.n	800a378 <_strtod_l+0x88>
 800a3fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a400:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a402:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a406:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a40a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a40e:	e7f0      	b.n	800a3f2 <_strtod_l+0x102>
 800a410:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a594 <_strtod_l+0x2a4>
 800a414:	e7ed      	b.n	800a3f2 <_strtod_l+0x102>
 800a416:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a41a:	f04f 3aff 	mov.w	sl, #4294967295
 800a41e:	e7e8      	b.n	800a3f2 <_strtod_l+0x102>
 800a420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a422:	1c5a      	adds	r2, r3, #1
 800a424:	9217      	str	r2, [sp, #92]	; 0x5c
 800a426:	785b      	ldrb	r3, [r3, #1]
 800a428:	2b30      	cmp	r3, #48	; 0x30
 800a42a:	d0f9      	beq.n	800a420 <_strtod_l+0x130>
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d0a3      	beq.n	800a378 <_strtod_l+0x88>
 800a430:	2301      	movs	r3, #1
 800a432:	f04f 0900 	mov.w	r9, #0
 800a436:	9304      	str	r3, [sp, #16]
 800a438:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a43a:	9308      	str	r3, [sp, #32]
 800a43c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a440:	464f      	mov	r7, r9
 800a442:	220a      	movs	r2, #10
 800a444:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a446:	7806      	ldrb	r6, [r0, #0]
 800a448:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a44c:	b2d9      	uxtb	r1, r3
 800a44e:	2909      	cmp	r1, #9
 800a450:	d92a      	bls.n	800a4a8 <_strtod_l+0x1b8>
 800a452:	9905      	ldr	r1, [sp, #20]
 800a454:	462a      	mov	r2, r5
 800a456:	f003 f97e 	bl	800d756 <strncmp>
 800a45a:	b398      	cbz	r0, 800a4c4 <_strtod_l+0x1d4>
 800a45c:	2000      	movs	r0, #0
 800a45e:	4632      	mov	r2, r6
 800a460:	463d      	mov	r5, r7
 800a462:	9005      	str	r0, [sp, #20]
 800a464:	4603      	mov	r3, r0
 800a466:	2a65      	cmp	r2, #101	; 0x65
 800a468:	d001      	beq.n	800a46e <_strtod_l+0x17e>
 800a46a:	2a45      	cmp	r2, #69	; 0x45
 800a46c:	d118      	bne.n	800a4a0 <_strtod_l+0x1b0>
 800a46e:	b91d      	cbnz	r5, 800a478 <_strtod_l+0x188>
 800a470:	9a04      	ldr	r2, [sp, #16]
 800a472:	4302      	orrs	r2, r0
 800a474:	d09e      	beq.n	800a3b4 <_strtod_l+0xc4>
 800a476:	2500      	movs	r5, #0
 800a478:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a47c:	f108 0201 	add.w	r2, r8, #1
 800a480:	9217      	str	r2, [sp, #92]	; 0x5c
 800a482:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a486:	2a2b      	cmp	r2, #43	; 0x2b
 800a488:	d075      	beq.n	800a576 <_strtod_l+0x286>
 800a48a:	2a2d      	cmp	r2, #45	; 0x2d
 800a48c:	d07b      	beq.n	800a586 <_strtod_l+0x296>
 800a48e:	f04f 0c00 	mov.w	ip, #0
 800a492:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a496:	2909      	cmp	r1, #9
 800a498:	f240 8082 	bls.w	800a5a0 <_strtod_l+0x2b0>
 800a49c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a4a0:	2600      	movs	r6, #0
 800a4a2:	e09d      	b.n	800a5e0 <_strtod_l+0x2f0>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	e7c4      	b.n	800a432 <_strtod_l+0x142>
 800a4a8:	2f08      	cmp	r7, #8
 800a4aa:	bfd8      	it	le
 800a4ac:	9907      	ldrle	r1, [sp, #28]
 800a4ae:	f100 0001 	add.w	r0, r0, #1
 800a4b2:	bfda      	itte	le
 800a4b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4b8:	9307      	strle	r3, [sp, #28]
 800a4ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a4be:	3701      	adds	r7, #1
 800a4c0:	9017      	str	r0, [sp, #92]	; 0x5c
 800a4c2:	e7bf      	b.n	800a444 <_strtod_l+0x154>
 800a4c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4c6:	195a      	adds	r2, r3, r5
 800a4c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a4ca:	5d5a      	ldrb	r2, [r3, r5]
 800a4cc:	2f00      	cmp	r7, #0
 800a4ce:	d037      	beq.n	800a540 <_strtod_l+0x250>
 800a4d0:	9005      	str	r0, [sp, #20]
 800a4d2:	463d      	mov	r5, r7
 800a4d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a4d8:	2b09      	cmp	r3, #9
 800a4da:	d912      	bls.n	800a502 <_strtod_l+0x212>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e7c2      	b.n	800a466 <_strtod_l+0x176>
 800a4e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a4e6:	785a      	ldrb	r2, [r3, #1]
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	2a30      	cmp	r2, #48	; 0x30
 800a4ec:	d0f8      	beq.n	800a4e0 <_strtod_l+0x1f0>
 800a4ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a4f2:	2b08      	cmp	r3, #8
 800a4f4:	f200 84d9 	bhi.w	800aeaa <_strtod_l+0xbba>
 800a4f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4fa:	9005      	str	r0, [sp, #20]
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	9308      	str	r3, [sp, #32]
 800a500:	4605      	mov	r5, r0
 800a502:	3a30      	subs	r2, #48	; 0x30
 800a504:	f100 0301 	add.w	r3, r0, #1
 800a508:	d014      	beq.n	800a534 <_strtod_l+0x244>
 800a50a:	9905      	ldr	r1, [sp, #20]
 800a50c:	4419      	add	r1, r3
 800a50e:	9105      	str	r1, [sp, #20]
 800a510:	462b      	mov	r3, r5
 800a512:	eb00 0e05 	add.w	lr, r0, r5
 800a516:	210a      	movs	r1, #10
 800a518:	4573      	cmp	r3, lr
 800a51a:	d113      	bne.n	800a544 <_strtod_l+0x254>
 800a51c:	182b      	adds	r3, r5, r0
 800a51e:	2b08      	cmp	r3, #8
 800a520:	f105 0501 	add.w	r5, r5, #1
 800a524:	4405      	add	r5, r0
 800a526:	dc1c      	bgt.n	800a562 <_strtod_l+0x272>
 800a528:	9907      	ldr	r1, [sp, #28]
 800a52a:	230a      	movs	r3, #10
 800a52c:	fb03 2301 	mla	r3, r3, r1, r2
 800a530:	9307      	str	r3, [sp, #28]
 800a532:	2300      	movs	r3, #0
 800a534:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a536:	1c51      	adds	r1, r2, #1
 800a538:	9117      	str	r1, [sp, #92]	; 0x5c
 800a53a:	7852      	ldrb	r2, [r2, #1]
 800a53c:	4618      	mov	r0, r3
 800a53e:	e7c9      	b.n	800a4d4 <_strtod_l+0x1e4>
 800a540:	4638      	mov	r0, r7
 800a542:	e7d2      	b.n	800a4ea <_strtod_l+0x1fa>
 800a544:	2b08      	cmp	r3, #8
 800a546:	dc04      	bgt.n	800a552 <_strtod_l+0x262>
 800a548:	9e07      	ldr	r6, [sp, #28]
 800a54a:	434e      	muls	r6, r1
 800a54c:	9607      	str	r6, [sp, #28]
 800a54e:	3301      	adds	r3, #1
 800a550:	e7e2      	b.n	800a518 <_strtod_l+0x228>
 800a552:	f103 0c01 	add.w	ip, r3, #1
 800a556:	f1bc 0f10 	cmp.w	ip, #16
 800a55a:	bfd8      	it	le
 800a55c:	fb01 f909 	mulle.w	r9, r1, r9
 800a560:	e7f5      	b.n	800a54e <_strtod_l+0x25e>
 800a562:	2d10      	cmp	r5, #16
 800a564:	bfdc      	itt	le
 800a566:	230a      	movle	r3, #10
 800a568:	fb03 2909 	mlale	r9, r3, r9, r2
 800a56c:	e7e1      	b.n	800a532 <_strtod_l+0x242>
 800a56e:	2300      	movs	r3, #0
 800a570:	9305      	str	r3, [sp, #20]
 800a572:	2301      	movs	r3, #1
 800a574:	e77c      	b.n	800a470 <_strtod_l+0x180>
 800a576:	f04f 0c00 	mov.w	ip, #0
 800a57a:	f108 0202 	add.w	r2, r8, #2
 800a57e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a580:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a584:	e785      	b.n	800a492 <_strtod_l+0x1a2>
 800a586:	f04f 0c01 	mov.w	ip, #1
 800a58a:	e7f6      	b.n	800a57a <_strtod_l+0x28a>
 800a58c:	0800f1ec 	.word	0x0800f1ec
 800a590:	0800ef40 	.word	0x0800ef40
 800a594:	7ff00000 	.word	0x7ff00000
 800a598:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a59a:	1c51      	adds	r1, r2, #1
 800a59c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a59e:	7852      	ldrb	r2, [r2, #1]
 800a5a0:	2a30      	cmp	r2, #48	; 0x30
 800a5a2:	d0f9      	beq.n	800a598 <_strtod_l+0x2a8>
 800a5a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a5a8:	2908      	cmp	r1, #8
 800a5aa:	f63f af79 	bhi.w	800a4a0 <_strtod_l+0x1b0>
 800a5ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a5b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a5b4:	9206      	str	r2, [sp, #24]
 800a5b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a5b8:	1c51      	adds	r1, r2, #1
 800a5ba:	9117      	str	r1, [sp, #92]	; 0x5c
 800a5bc:	7852      	ldrb	r2, [r2, #1]
 800a5be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a5c2:	2e09      	cmp	r6, #9
 800a5c4:	d937      	bls.n	800a636 <_strtod_l+0x346>
 800a5c6:	9e06      	ldr	r6, [sp, #24]
 800a5c8:	1b89      	subs	r1, r1, r6
 800a5ca:	2908      	cmp	r1, #8
 800a5cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a5d0:	dc02      	bgt.n	800a5d8 <_strtod_l+0x2e8>
 800a5d2:	4576      	cmp	r6, lr
 800a5d4:	bfa8      	it	ge
 800a5d6:	4676      	movge	r6, lr
 800a5d8:	f1bc 0f00 	cmp.w	ip, #0
 800a5dc:	d000      	beq.n	800a5e0 <_strtod_l+0x2f0>
 800a5de:	4276      	negs	r6, r6
 800a5e0:	2d00      	cmp	r5, #0
 800a5e2:	d14d      	bne.n	800a680 <_strtod_l+0x390>
 800a5e4:	9904      	ldr	r1, [sp, #16]
 800a5e6:	4301      	orrs	r1, r0
 800a5e8:	f47f aec6 	bne.w	800a378 <_strtod_l+0x88>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f47f aee1 	bne.w	800a3b4 <_strtod_l+0xc4>
 800a5f2:	2a69      	cmp	r2, #105	; 0x69
 800a5f4:	d027      	beq.n	800a646 <_strtod_l+0x356>
 800a5f6:	dc24      	bgt.n	800a642 <_strtod_l+0x352>
 800a5f8:	2a49      	cmp	r2, #73	; 0x49
 800a5fa:	d024      	beq.n	800a646 <_strtod_l+0x356>
 800a5fc:	2a4e      	cmp	r2, #78	; 0x4e
 800a5fe:	f47f aed9 	bne.w	800a3b4 <_strtod_l+0xc4>
 800a602:	499f      	ldr	r1, [pc, #636]	; (800a880 <_strtod_l+0x590>)
 800a604:	a817      	add	r0, sp, #92	; 0x5c
 800a606:	f001 fff3 	bl	800c5f0 <__match>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	f43f aed2 	beq.w	800a3b4 <_strtod_l+0xc4>
 800a610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	2b28      	cmp	r3, #40	; 0x28
 800a616:	d12d      	bne.n	800a674 <_strtod_l+0x384>
 800a618:	499a      	ldr	r1, [pc, #616]	; (800a884 <_strtod_l+0x594>)
 800a61a:	aa1a      	add	r2, sp, #104	; 0x68
 800a61c:	a817      	add	r0, sp, #92	; 0x5c
 800a61e:	f001 fffb 	bl	800c618 <__hexnan>
 800a622:	2805      	cmp	r0, #5
 800a624:	d126      	bne.n	800a674 <_strtod_l+0x384>
 800a626:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a628:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a62c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a630:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a634:	e6a0      	b.n	800a378 <_strtod_l+0x88>
 800a636:	210a      	movs	r1, #10
 800a638:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a63c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a640:	e7b9      	b.n	800a5b6 <_strtod_l+0x2c6>
 800a642:	2a6e      	cmp	r2, #110	; 0x6e
 800a644:	e7db      	b.n	800a5fe <_strtod_l+0x30e>
 800a646:	4990      	ldr	r1, [pc, #576]	; (800a888 <_strtod_l+0x598>)
 800a648:	a817      	add	r0, sp, #92	; 0x5c
 800a64a:	f001 ffd1 	bl	800c5f0 <__match>
 800a64e:	2800      	cmp	r0, #0
 800a650:	f43f aeb0 	beq.w	800a3b4 <_strtod_l+0xc4>
 800a654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a656:	498d      	ldr	r1, [pc, #564]	; (800a88c <_strtod_l+0x59c>)
 800a658:	3b01      	subs	r3, #1
 800a65a:	a817      	add	r0, sp, #92	; 0x5c
 800a65c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a65e:	f001 ffc7 	bl	800c5f0 <__match>
 800a662:	b910      	cbnz	r0, 800a66a <_strtod_l+0x37a>
 800a664:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a666:	3301      	adds	r3, #1
 800a668:	9317      	str	r3, [sp, #92]	; 0x5c
 800a66a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a89c <_strtod_l+0x5ac>
 800a66e:	f04f 0a00 	mov.w	sl, #0
 800a672:	e681      	b.n	800a378 <_strtod_l+0x88>
 800a674:	4886      	ldr	r0, [pc, #536]	; (800a890 <_strtod_l+0x5a0>)
 800a676:	f003 f813 	bl	800d6a0 <nan>
 800a67a:	ec5b ab10 	vmov	sl, fp, d0
 800a67e:	e67b      	b.n	800a378 <_strtod_l+0x88>
 800a680:	9b05      	ldr	r3, [sp, #20]
 800a682:	9807      	ldr	r0, [sp, #28]
 800a684:	1af3      	subs	r3, r6, r3
 800a686:	2f00      	cmp	r7, #0
 800a688:	bf08      	it	eq
 800a68a:	462f      	moveq	r7, r5
 800a68c:	2d10      	cmp	r5, #16
 800a68e:	9306      	str	r3, [sp, #24]
 800a690:	46a8      	mov	r8, r5
 800a692:	bfa8      	it	ge
 800a694:	f04f 0810 	movge.w	r8, #16
 800a698:	f7f5 ff34 	bl	8000504 <__aeabi_ui2d>
 800a69c:	2d09      	cmp	r5, #9
 800a69e:	4682      	mov	sl, r0
 800a6a0:	468b      	mov	fp, r1
 800a6a2:	dd13      	ble.n	800a6cc <_strtod_l+0x3dc>
 800a6a4:	4b7b      	ldr	r3, [pc, #492]	; (800a894 <_strtod_l+0x5a4>)
 800a6a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a6aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a6ae:	f7f5 ffa3 	bl	80005f8 <__aeabi_dmul>
 800a6b2:	4682      	mov	sl, r0
 800a6b4:	4648      	mov	r0, r9
 800a6b6:	468b      	mov	fp, r1
 800a6b8:	f7f5 ff24 	bl	8000504 <__aeabi_ui2d>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	4650      	mov	r0, sl
 800a6c2:	4659      	mov	r1, fp
 800a6c4:	f7f5 fde2 	bl	800028c <__adddf3>
 800a6c8:	4682      	mov	sl, r0
 800a6ca:	468b      	mov	fp, r1
 800a6cc:	2d0f      	cmp	r5, #15
 800a6ce:	dc38      	bgt.n	800a742 <_strtod_l+0x452>
 800a6d0:	9b06      	ldr	r3, [sp, #24]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f43f ae50 	beq.w	800a378 <_strtod_l+0x88>
 800a6d8:	dd24      	ble.n	800a724 <_strtod_l+0x434>
 800a6da:	2b16      	cmp	r3, #22
 800a6dc:	dc0b      	bgt.n	800a6f6 <_strtod_l+0x406>
 800a6de:	496d      	ldr	r1, [pc, #436]	; (800a894 <_strtod_l+0x5a4>)
 800a6e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6e8:	4652      	mov	r2, sl
 800a6ea:	465b      	mov	r3, fp
 800a6ec:	f7f5 ff84 	bl	80005f8 <__aeabi_dmul>
 800a6f0:	4682      	mov	sl, r0
 800a6f2:	468b      	mov	fp, r1
 800a6f4:	e640      	b.n	800a378 <_strtod_l+0x88>
 800a6f6:	9a06      	ldr	r2, [sp, #24]
 800a6f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	db20      	blt.n	800a742 <_strtod_l+0x452>
 800a700:	4c64      	ldr	r4, [pc, #400]	; (800a894 <_strtod_l+0x5a4>)
 800a702:	f1c5 050f 	rsb	r5, r5, #15
 800a706:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a70a:	4652      	mov	r2, sl
 800a70c:	465b      	mov	r3, fp
 800a70e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a712:	f7f5 ff71 	bl	80005f8 <__aeabi_dmul>
 800a716:	9b06      	ldr	r3, [sp, #24]
 800a718:	1b5d      	subs	r5, r3, r5
 800a71a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a71e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a722:	e7e3      	b.n	800a6ec <_strtod_l+0x3fc>
 800a724:	9b06      	ldr	r3, [sp, #24]
 800a726:	3316      	adds	r3, #22
 800a728:	db0b      	blt.n	800a742 <_strtod_l+0x452>
 800a72a:	9b05      	ldr	r3, [sp, #20]
 800a72c:	1b9e      	subs	r6, r3, r6
 800a72e:	4b59      	ldr	r3, [pc, #356]	; (800a894 <_strtod_l+0x5a4>)
 800a730:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a734:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a738:	4650      	mov	r0, sl
 800a73a:	4659      	mov	r1, fp
 800a73c:	f7f6 f886 	bl	800084c <__aeabi_ddiv>
 800a740:	e7d6      	b.n	800a6f0 <_strtod_l+0x400>
 800a742:	9b06      	ldr	r3, [sp, #24]
 800a744:	eba5 0808 	sub.w	r8, r5, r8
 800a748:	4498      	add	r8, r3
 800a74a:	f1b8 0f00 	cmp.w	r8, #0
 800a74e:	dd74      	ble.n	800a83a <_strtod_l+0x54a>
 800a750:	f018 030f 	ands.w	r3, r8, #15
 800a754:	d00a      	beq.n	800a76c <_strtod_l+0x47c>
 800a756:	494f      	ldr	r1, [pc, #316]	; (800a894 <_strtod_l+0x5a4>)
 800a758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a75c:	4652      	mov	r2, sl
 800a75e:	465b      	mov	r3, fp
 800a760:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a764:	f7f5 ff48 	bl	80005f8 <__aeabi_dmul>
 800a768:	4682      	mov	sl, r0
 800a76a:	468b      	mov	fp, r1
 800a76c:	f038 080f 	bics.w	r8, r8, #15
 800a770:	d04f      	beq.n	800a812 <_strtod_l+0x522>
 800a772:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a776:	dd22      	ble.n	800a7be <_strtod_l+0x4ce>
 800a778:	2500      	movs	r5, #0
 800a77a:	462e      	mov	r6, r5
 800a77c:	9507      	str	r5, [sp, #28]
 800a77e:	9505      	str	r5, [sp, #20]
 800a780:	2322      	movs	r3, #34	; 0x22
 800a782:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a89c <_strtod_l+0x5ac>
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	f04f 0a00 	mov.w	sl, #0
 800a78c:	9b07      	ldr	r3, [sp, #28]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f43f adf2 	beq.w	800a378 <_strtod_l+0x88>
 800a794:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a796:	4620      	mov	r0, r4
 800a798:	f002 f8ae 	bl	800c8f8 <_Bfree>
 800a79c:	9905      	ldr	r1, [sp, #20]
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f002 f8aa 	bl	800c8f8 <_Bfree>
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f002 f8a6 	bl	800c8f8 <_Bfree>
 800a7ac:	9907      	ldr	r1, [sp, #28]
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f002 f8a2 	bl	800c8f8 <_Bfree>
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f002 f89e 	bl	800c8f8 <_Bfree>
 800a7bc:	e5dc      	b.n	800a378 <_strtod_l+0x88>
 800a7be:	4b36      	ldr	r3, [pc, #216]	; (800a898 <_strtod_l+0x5a8>)
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	4659      	mov	r1, fp
 800a7cc:	4699      	mov	r9, r3
 800a7ce:	f1b8 0f01 	cmp.w	r8, #1
 800a7d2:	dc21      	bgt.n	800a818 <_strtod_l+0x528>
 800a7d4:	b10b      	cbz	r3, 800a7da <_strtod_l+0x4ea>
 800a7d6:	4682      	mov	sl, r0
 800a7d8:	468b      	mov	fp, r1
 800a7da:	4b2f      	ldr	r3, [pc, #188]	; (800a898 <_strtod_l+0x5a8>)
 800a7dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a7e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a7e4:	4652      	mov	r2, sl
 800a7e6:	465b      	mov	r3, fp
 800a7e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a7ec:	f7f5 ff04 	bl	80005f8 <__aeabi_dmul>
 800a7f0:	4b2a      	ldr	r3, [pc, #168]	; (800a89c <_strtod_l+0x5ac>)
 800a7f2:	460a      	mov	r2, r1
 800a7f4:	400b      	ands	r3, r1
 800a7f6:	492a      	ldr	r1, [pc, #168]	; (800a8a0 <_strtod_l+0x5b0>)
 800a7f8:	428b      	cmp	r3, r1
 800a7fa:	4682      	mov	sl, r0
 800a7fc:	d8bc      	bhi.n	800a778 <_strtod_l+0x488>
 800a7fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a802:	428b      	cmp	r3, r1
 800a804:	bf86      	itte	hi
 800a806:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a8a4 <_strtod_l+0x5b4>
 800a80a:	f04f 3aff 	movhi.w	sl, #4294967295
 800a80e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a812:	2300      	movs	r3, #0
 800a814:	9304      	str	r3, [sp, #16]
 800a816:	e084      	b.n	800a922 <_strtod_l+0x632>
 800a818:	f018 0f01 	tst.w	r8, #1
 800a81c:	d005      	beq.n	800a82a <_strtod_l+0x53a>
 800a81e:	9b04      	ldr	r3, [sp, #16]
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	f7f5 fee8 	bl	80005f8 <__aeabi_dmul>
 800a828:	2301      	movs	r3, #1
 800a82a:	9a04      	ldr	r2, [sp, #16]
 800a82c:	3208      	adds	r2, #8
 800a82e:	f109 0901 	add.w	r9, r9, #1
 800a832:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a836:	9204      	str	r2, [sp, #16]
 800a838:	e7c9      	b.n	800a7ce <_strtod_l+0x4de>
 800a83a:	d0ea      	beq.n	800a812 <_strtod_l+0x522>
 800a83c:	f1c8 0800 	rsb	r8, r8, #0
 800a840:	f018 020f 	ands.w	r2, r8, #15
 800a844:	d00a      	beq.n	800a85c <_strtod_l+0x56c>
 800a846:	4b13      	ldr	r3, [pc, #76]	; (800a894 <_strtod_l+0x5a4>)
 800a848:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a84c:	4650      	mov	r0, sl
 800a84e:	4659      	mov	r1, fp
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	f7f5 fffa 	bl	800084c <__aeabi_ddiv>
 800a858:	4682      	mov	sl, r0
 800a85a:	468b      	mov	fp, r1
 800a85c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a860:	d0d7      	beq.n	800a812 <_strtod_l+0x522>
 800a862:	f1b8 0f1f 	cmp.w	r8, #31
 800a866:	dd1f      	ble.n	800a8a8 <_strtod_l+0x5b8>
 800a868:	2500      	movs	r5, #0
 800a86a:	462e      	mov	r6, r5
 800a86c:	9507      	str	r5, [sp, #28]
 800a86e:	9505      	str	r5, [sp, #20]
 800a870:	2322      	movs	r3, #34	; 0x22
 800a872:	f04f 0a00 	mov.w	sl, #0
 800a876:	f04f 0b00 	mov.w	fp, #0
 800a87a:	6023      	str	r3, [r4, #0]
 800a87c:	e786      	b.n	800a78c <_strtod_l+0x49c>
 800a87e:	bf00      	nop
 800a880:	0800ef11 	.word	0x0800ef11
 800a884:	0800ef54 	.word	0x0800ef54
 800a888:	0800ef09 	.word	0x0800ef09
 800a88c:	0800f094 	.word	0x0800f094
 800a890:	0800f3a8 	.word	0x0800f3a8
 800a894:	0800f288 	.word	0x0800f288
 800a898:	0800f260 	.word	0x0800f260
 800a89c:	7ff00000 	.word	0x7ff00000
 800a8a0:	7ca00000 	.word	0x7ca00000
 800a8a4:	7fefffff 	.word	0x7fefffff
 800a8a8:	f018 0310 	ands.w	r3, r8, #16
 800a8ac:	bf18      	it	ne
 800a8ae:	236a      	movne	r3, #106	; 0x6a
 800a8b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ac60 <_strtod_l+0x970>
 800a8b4:	9304      	str	r3, [sp, #16]
 800a8b6:	4650      	mov	r0, sl
 800a8b8:	4659      	mov	r1, fp
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f018 0f01 	tst.w	r8, #1
 800a8c0:	d004      	beq.n	800a8cc <_strtod_l+0x5dc>
 800a8c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a8c6:	f7f5 fe97 	bl	80005f8 <__aeabi_dmul>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a8d0:	f109 0908 	add.w	r9, r9, #8
 800a8d4:	d1f2      	bne.n	800a8bc <_strtod_l+0x5cc>
 800a8d6:	b10b      	cbz	r3, 800a8dc <_strtod_l+0x5ec>
 800a8d8:	4682      	mov	sl, r0
 800a8da:	468b      	mov	fp, r1
 800a8dc:	9b04      	ldr	r3, [sp, #16]
 800a8de:	b1c3      	cbz	r3, 800a912 <_strtod_l+0x622>
 800a8e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a8e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	4659      	mov	r1, fp
 800a8ec:	dd11      	ble.n	800a912 <_strtod_l+0x622>
 800a8ee:	2b1f      	cmp	r3, #31
 800a8f0:	f340 8124 	ble.w	800ab3c <_strtod_l+0x84c>
 800a8f4:	2b34      	cmp	r3, #52	; 0x34
 800a8f6:	bfde      	ittt	le
 800a8f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a8fc:	f04f 33ff 	movle.w	r3, #4294967295
 800a900:	fa03 f202 	lslle.w	r2, r3, r2
 800a904:	f04f 0a00 	mov.w	sl, #0
 800a908:	bfcc      	ite	gt
 800a90a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a90e:	ea02 0b01 	andle.w	fp, r2, r1
 800a912:	2200      	movs	r2, #0
 800a914:	2300      	movs	r3, #0
 800a916:	4650      	mov	r0, sl
 800a918:	4659      	mov	r1, fp
 800a91a:	f7f6 f8d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a91e:	2800      	cmp	r0, #0
 800a920:	d1a2      	bne.n	800a868 <_strtod_l+0x578>
 800a922:	9b07      	ldr	r3, [sp, #28]
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	9908      	ldr	r1, [sp, #32]
 800a928:	462b      	mov	r3, r5
 800a92a:	463a      	mov	r2, r7
 800a92c:	4620      	mov	r0, r4
 800a92e:	f002 f84b 	bl	800c9c8 <__s2b>
 800a932:	9007      	str	r0, [sp, #28]
 800a934:	2800      	cmp	r0, #0
 800a936:	f43f af1f 	beq.w	800a778 <_strtod_l+0x488>
 800a93a:	9b05      	ldr	r3, [sp, #20]
 800a93c:	1b9e      	subs	r6, r3, r6
 800a93e:	9b06      	ldr	r3, [sp, #24]
 800a940:	2b00      	cmp	r3, #0
 800a942:	bfb4      	ite	lt
 800a944:	4633      	movlt	r3, r6
 800a946:	2300      	movge	r3, #0
 800a948:	930c      	str	r3, [sp, #48]	; 0x30
 800a94a:	9b06      	ldr	r3, [sp, #24]
 800a94c:	2500      	movs	r5, #0
 800a94e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a952:	9312      	str	r3, [sp, #72]	; 0x48
 800a954:	462e      	mov	r6, r5
 800a956:	9b07      	ldr	r3, [sp, #28]
 800a958:	4620      	mov	r0, r4
 800a95a:	6859      	ldr	r1, [r3, #4]
 800a95c:	f001 ff8c 	bl	800c878 <_Balloc>
 800a960:	9005      	str	r0, [sp, #20]
 800a962:	2800      	cmp	r0, #0
 800a964:	f43f af0c 	beq.w	800a780 <_strtod_l+0x490>
 800a968:	9b07      	ldr	r3, [sp, #28]
 800a96a:	691a      	ldr	r2, [r3, #16]
 800a96c:	3202      	adds	r2, #2
 800a96e:	f103 010c 	add.w	r1, r3, #12
 800a972:	0092      	lsls	r2, r2, #2
 800a974:	300c      	adds	r0, #12
 800a976:	f001 ff71 	bl	800c85c <memcpy>
 800a97a:	ec4b ab10 	vmov	d0, sl, fp
 800a97e:	aa1a      	add	r2, sp, #104	; 0x68
 800a980:	a919      	add	r1, sp, #100	; 0x64
 800a982:	4620      	mov	r0, r4
 800a984:	f002 fb66 	bl	800d054 <__d2b>
 800a988:	ec4b ab18 	vmov	d8, sl, fp
 800a98c:	9018      	str	r0, [sp, #96]	; 0x60
 800a98e:	2800      	cmp	r0, #0
 800a990:	f43f aef6 	beq.w	800a780 <_strtod_l+0x490>
 800a994:	2101      	movs	r1, #1
 800a996:	4620      	mov	r0, r4
 800a998:	f002 f8b0 	bl	800cafc <__i2b>
 800a99c:	4606      	mov	r6, r0
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	f43f aeee 	beq.w	800a780 <_strtod_l+0x490>
 800a9a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9a6:	9904      	ldr	r1, [sp, #16]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	bfab      	itete	ge
 800a9ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a9ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a9b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a9b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a9b6:	bfac      	ite	ge
 800a9b8:	eb03 0902 	addge.w	r9, r3, r2
 800a9bc:	1ad7      	sublt	r7, r2, r3
 800a9be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a9c0:	eba3 0801 	sub.w	r8, r3, r1
 800a9c4:	4490      	add	r8, r2
 800a9c6:	4ba1      	ldr	r3, [pc, #644]	; (800ac4c <_strtod_l+0x95c>)
 800a9c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9cc:	4598      	cmp	r8, r3
 800a9ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a9d2:	f280 80c7 	bge.w	800ab64 <_strtod_l+0x874>
 800a9d6:	eba3 0308 	sub.w	r3, r3, r8
 800a9da:	2b1f      	cmp	r3, #31
 800a9dc:	eba2 0203 	sub.w	r2, r2, r3
 800a9e0:	f04f 0101 	mov.w	r1, #1
 800a9e4:	f300 80b1 	bgt.w	800ab4a <_strtod_l+0x85a>
 800a9e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ec:	930d      	str	r3, [sp, #52]	; 0x34
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	9308      	str	r3, [sp, #32]
 800a9f2:	eb09 0802 	add.w	r8, r9, r2
 800a9f6:	9b04      	ldr	r3, [sp, #16]
 800a9f8:	45c1      	cmp	r9, r8
 800a9fa:	4417      	add	r7, r2
 800a9fc:	441f      	add	r7, r3
 800a9fe:	464b      	mov	r3, r9
 800aa00:	bfa8      	it	ge
 800aa02:	4643      	movge	r3, r8
 800aa04:	42bb      	cmp	r3, r7
 800aa06:	bfa8      	it	ge
 800aa08:	463b      	movge	r3, r7
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	bfc2      	ittt	gt
 800aa0e:	eba8 0803 	subgt.w	r8, r8, r3
 800aa12:	1aff      	subgt	r7, r7, r3
 800aa14:	eba9 0903 	subgt.w	r9, r9, r3
 800aa18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	dd17      	ble.n	800aa4e <_strtod_l+0x75e>
 800aa1e:	4631      	mov	r1, r6
 800aa20:	461a      	mov	r2, r3
 800aa22:	4620      	mov	r0, r4
 800aa24:	f002 f92a 	bl	800cc7c <__pow5mult>
 800aa28:	4606      	mov	r6, r0
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	f43f aea8 	beq.w	800a780 <_strtod_l+0x490>
 800aa30:	4601      	mov	r1, r0
 800aa32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aa34:	4620      	mov	r0, r4
 800aa36:	f002 f877 	bl	800cb28 <__multiply>
 800aa3a:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	f43f ae9f 	beq.w	800a780 <_strtod_l+0x490>
 800aa42:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa44:	4620      	mov	r0, r4
 800aa46:	f001 ff57 	bl	800c8f8 <_Bfree>
 800aa4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa4c:	9318      	str	r3, [sp, #96]	; 0x60
 800aa4e:	f1b8 0f00 	cmp.w	r8, #0
 800aa52:	f300 808c 	bgt.w	800ab6e <_strtod_l+0x87e>
 800aa56:	9b06      	ldr	r3, [sp, #24]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	dd08      	ble.n	800aa6e <_strtod_l+0x77e>
 800aa5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa5e:	9905      	ldr	r1, [sp, #20]
 800aa60:	4620      	mov	r0, r4
 800aa62:	f002 f90b 	bl	800cc7c <__pow5mult>
 800aa66:	9005      	str	r0, [sp, #20]
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	f43f ae89 	beq.w	800a780 <_strtod_l+0x490>
 800aa6e:	2f00      	cmp	r7, #0
 800aa70:	dd08      	ble.n	800aa84 <_strtod_l+0x794>
 800aa72:	9905      	ldr	r1, [sp, #20]
 800aa74:	463a      	mov	r2, r7
 800aa76:	4620      	mov	r0, r4
 800aa78:	f002 f95a 	bl	800cd30 <__lshift>
 800aa7c:	9005      	str	r0, [sp, #20]
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	f43f ae7e 	beq.w	800a780 <_strtod_l+0x490>
 800aa84:	f1b9 0f00 	cmp.w	r9, #0
 800aa88:	dd08      	ble.n	800aa9c <_strtod_l+0x7ac>
 800aa8a:	4631      	mov	r1, r6
 800aa8c:	464a      	mov	r2, r9
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f002 f94e 	bl	800cd30 <__lshift>
 800aa94:	4606      	mov	r6, r0
 800aa96:	2800      	cmp	r0, #0
 800aa98:	f43f ae72 	beq.w	800a780 <_strtod_l+0x490>
 800aa9c:	9a05      	ldr	r2, [sp, #20]
 800aa9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f002 f9d1 	bl	800ce48 <__mdiff>
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	f43f ae69 	beq.w	800a780 <_strtod_l+0x490>
 800aaae:	68c3      	ldr	r3, [r0, #12]
 800aab0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aab2:	2300      	movs	r3, #0
 800aab4:	60c3      	str	r3, [r0, #12]
 800aab6:	4631      	mov	r1, r6
 800aab8:	f002 f9aa 	bl	800ce10 <__mcmp>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	da60      	bge.n	800ab82 <_strtod_l+0x892>
 800aac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aac2:	ea53 030a 	orrs.w	r3, r3, sl
 800aac6:	f040 8082 	bne.w	800abce <_strtod_l+0x8de>
 800aaca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d17d      	bne.n	800abce <_strtod_l+0x8de>
 800aad2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aad6:	0d1b      	lsrs	r3, r3, #20
 800aad8:	051b      	lsls	r3, r3, #20
 800aada:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aade:	d976      	bls.n	800abce <_strtod_l+0x8de>
 800aae0:	696b      	ldr	r3, [r5, #20]
 800aae2:	b913      	cbnz	r3, 800aaea <_strtod_l+0x7fa>
 800aae4:	692b      	ldr	r3, [r5, #16]
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	dd71      	ble.n	800abce <_strtod_l+0x8de>
 800aaea:	4629      	mov	r1, r5
 800aaec:	2201      	movs	r2, #1
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f002 f91e 	bl	800cd30 <__lshift>
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	f002 f98a 	bl	800ce10 <__mcmp>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	dd66      	ble.n	800abce <_strtod_l+0x8de>
 800ab00:	9904      	ldr	r1, [sp, #16]
 800ab02:	4a53      	ldr	r2, [pc, #332]	; (800ac50 <_strtod_l+0x960>)
 800ab04:	465b      	mov	r3, fp
 800ab06:	2900      	cmp	r1, #0
 800ab08:	f000 8081 	beq.w	800ac0e <_strtod_l+0x91e>
 800ab0c:	ea02 010b 	and.w	r1, r2, fp
 800ab10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ab14:	dc7b      	bgt.n	800ac0e <_strtod_l+0x91e>
 800ab16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ab1a:	f77f aea9 	ble.w	800a870 <_strtod_l+0x580>
 800ab1e:	4b4d      	ldr	r3, [pc, #308]	; (800ac54 <_strtod_l+0x964>)
 800ab20:	4650      	mov	r0, sl
 800ab22:	4659      	mov	r1, fp
 800ab24:	2200      	movs	r2, #0
 800ab26:	f7f5 fd67 	bl	80005f8 <__aeabi_dmul>
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4303      	orrs	r3, r0
 800ab2e:	bf08      	it	eq
 800ab30:	2322      	moveq	r3, #34	; 0x22
 800ab32:	4682      	mov	sl, r0
 800ab34:	468b      	mov	fp, r1
 800ab36:	bf08      	it	eq
 800ab38:	6023      	streq	r3, [r4, #0]
 800ab3a:	e62b      	b.n	800a794 <_strtod_l+0x4a4>
 800ab3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab40:	fa02 f303 	lsl.w	r3, r2, r3
 800ab44:	ea03 0a0a 	and.w	sl, r3, sl
 800ab48:	e6e3      	b.n	800a912 <_strtod_l+0x622>
 800ab4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ab4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ab52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ab56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ab5a:	fa01 f308 	lsl.w	r3, r1, r8
 800ab5e:	9308      	str	r3, [sp, #32]
 800ab60:	910d      	str	r1, [sp, #52]	; 0x34
 800ab62:	e746      	b.n	800a9f2 <_strtod_l+0x702>
 800ab64:	2300      	movs	r3, #0
 800ab66:	9308      	str	r3, [sp, #32]
 800ab68:	2301      	movs	r3, #1
 800ab6a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab6c:	e741      	b.n	800a9f2 <_strtod_l+0x702>
 800ab6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ab70:	4642      	mov	r2, r8
 800ab72:	4620      	mov	r0, r4
 800ab74:	f002 f8dc 	bl	800cd30 <__lshift>
 800ab78:	9018      	str	r0, [sp, #96]	; 0x60
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	f47f af6b 	bne.w	800aa56 <_strtod_l+0x766>
 800ab80:	e5fe      	b.n	800a780 <_strtod_l+0x490>
 800ab82:	465f      	mov	r7, fp
 800ab84:	d16e      	bne.n	800ac64 <_strtod_l+0x974>
 800ab86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab8c:	b342      	cbz	r2, 800abe0 <_strtod_l+0x8f0>
 800ab8e:	4a32      	ldr	r2, [pc, #200]	; (800ac58 <_strtod_l+0x968>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d128      	bne.n	800abe6 <_strtod_l+0x8f6>
 800ab94:	9b04      	ldr	r3, [sp, #16]
 800ab96:	4651      	mov	r1, sl
 800ab98:	b1eb      	cbz	r3, 800abd6 <_strtod_l+0x8e6>
 800ab9a:	4b2d      	ldr	r3, [pc, #180]	; (800ac50 <_strtod_l+0x960>)
 800ab9c:	403b      	ands	r3, r7
 800ab9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aba2:	f04f 32ff 	mov.w	r2, #4294967295
 800aba6:	d819      	bhi.n	800abdc <_strtod_l+0x8ec>
 800aba8:	0d1b      	lsrs	r3, r3, #20
 800abaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abae:	fa02 f303 	lsl.w	r3, r2, r3
 800abb2:	4299      	cmp	r1, r3
 800abb4:	d117      	bne.n	800abe6 <_strtod_l+0x8f6>
 800abb6:	4b29      	ldr	r3, [pc, #164]	; (800ac5c <_strtod_l+0x96c>)
 800abb8:	429f      	cmp	r7, r3
 800abba:	d102      	bne.n	800abc2 <_strtod_l+0x8d2>
 800abbc:	3101      	adds	r1, #1
 800abbe:	f43f addf 	beq.w	800a780 <_strtod_l+0x490>
 800abc2:	4b23      	ldr	r3, [pc, #140]	; (800ac50 <_strtod_l+0x960>)
 800abc4:	403b      	ands	r3, r7
 800abc6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800abca:	f04f 0a00 	mov.w	sl, #0
 800abce:	9b04      	ldr	r3, [sp, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1a4      	bne.n	800ab1e <_strtod_l+0x82e>
 800abd4:	e5de      	b.n	800a794 <_strtod_l+0x4a4>
 800abd6:	f04f 33ff 	mov.w	r3, #4294967295
 800abda:	e7ea      	b.n	800abb2 <_strtod_l+0x8c2>
 800abdc:	4613      	mov	r3, r2
 800abde:	e7e8      	b.n	800abb2 <_strtod_l+0x8c2>
 800abe0:	ea53 030a 	orrs.w	r3, r3, sl
 800abe4:	d08c      	beq.n	800ab00 <_strtod_l+0x810>
 800abe6:	9b08      	ldr	r3, [sp, #32]
 800abe8:	b1db      	cbz	r3, 800ac22 <_strtod_l+0x932>
 800abea:	423b      	tst	r3, r7
 800abec:	d0ef      	beq.n	800abce <_strtod_l+0x8de>
 800abee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abf0:	9a04      	ldr	r2, [sp, #16]
 800abf2:	4650      	mov	r0, sl
 800abf4:	4659      	mov	r1, fp
 800abf6:	b1c3      	cbz	r3, 800ac2a <_strtod_l+0x93a>
 800abf8:	f7ff fb5e 	bl	800a2b8 <sulp>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	ec51 0b18 	vmov	r0, r1, d8
 800ac04:	f7f5 fb42 	bl	800028c <__adddf3>
 800ac08:	4682      	mov	sl, r0
 800ac0a:	468b      	mov	fp, r1
 800ac0c:	e7df      	b.n	800abce <_strtod_l+0x8de>
 800ac0e:	4013      	ands	r3, r2
 800ac10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ac14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ac18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ac1c:	f04f 3aff 	mov.w	sl, #4294967295
 800ac20:	e7d5      	b.n	800abce <_strtod_l+0x8de>
 800ac22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac24:	ea13 0f0a 	tst.w	r3, sl
 800ac28:	e7e0      	b.n	800abec <_strtod_l+0x8fc>
 800ac2a:	f7ff fb45 	bl	800a2b8 <sulp>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	ec51 0b18 	vmov	r0, r1, d8
 800ac36:	f7f5 fb27 	bl	8000288 <__aeabi_dsub>
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4682      	mov	sl, r0
 800ac40:	468b      	mov	fp, r1
 800ac42:	f7f5 ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d0c1      	beq.n	800abce <_strtod_l+0x8de>
 800ac4a:	e611      	b.n	800a870 <_strtod_l+0x580>
 800ac4c:	fffffc02 	.word	0xfffffc02
 800ac50:	7ff00000 	.word	0x7ff00000
 800ac54:	39500000 	.word	0x39500000
 800ac58:	000fffff 	.word	0x000fffff
 800ac5c:	7fefffff 	.word	0x7fefffff
 800ac60:	0800ef68 	.word	0x0800ef68
 800ac64:	4631      	mov	r1, r6
 800ac66:	4628      	mov	r0, r5
 800ac68:	f002 fa50 	bl	800d10c <__ratio>
 800ac6c:	ec59 8b10 	vmov	r8, r9, d0
 800ac70:	ee10 0a10 	vmov	r0, s0
 800ac74:	2200      	movs	r2, #0
 800ac76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	f7f5 ff38 	bl	8000af0 <__aeabi_dcmple>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d07a      	beq.n	800ad7a <_strtod_l+0xa8a>
 800ac84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d04a      	beq.n	800ad20 <_strtod_l+0xa30>
 800ac8a:	4b95      	ldr	r3, [pc, #596]	; (800aee0 <_strtod_l+0xbf0>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac92:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800aee0 <_strtod_l+0xbf0>
 800ac96:	f04f 0800 	mov.w	r8, #0
 800ac9a:	4b92      	ldr	r3, [pc, #584]	; (800aee4 <_strtod_l+0xbf4>)
 800ac9c:	403b      	ands	r3, r7
 800ac9e:	930d      	str	r3, [sp, #52]	; 0x34
 800aca0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aca2:	4b91      	ldr	r3, [pc, #580]	; (800aee8 <_strtod_l+0xbf8>)
 800aca4:	429a      	cmp	r2, r3
 800aca6:	f040 80b0 	bne.w	800ae0a <_strtod_l+0xb1a>
 800acaa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800acae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800acb2:	ec4b ab10 	vmov	d0, sl, fp
 800acb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800acba:	f002 f94f 	bl	800cf5c <__ulp>
 800acbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800acc2:	ec53 2b10 	vmov	r2, r3, d0
 800acc6:	f7f5 fc97 	bl	80005f8 <__aeabi_dmul>
 800acca:	4652      	mov	r2, sl
 800accc:	465b      	mov	r3, fp
 800acce:	f7f5 fadd 	bl	800028c <__adddf3>
 800acd2:	460b      	mov	r3, r1
 800acd4:	4983      	ldr	r1, [pc, #524]	; (800aee4 <_strtod_l+0xbf4>)
 800acd6:	4a85      	ldr	r2, [pc, #532]	; (800aeec <_strtod_l+0xbfc>)
 800acd8:	4019      	ands	r1, r3
 800acda:	4291      	cmp	r1, r2
 800acdc:	4682      	mov	sl, r0
 800acde:	d960      	bls.n	800ada2 <_strtod_l+0xab2>
 800ace0:	ee18 3a90 	vmov	r3, s17
 800ace4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ace8:	4293      	cmp	r3, r2
 800acea:	d104      	bne.n	800acf6 <_strtod_l+0xa06>
 800acec:	ee18 3a10 	vmov	r3, s16
 800acf0:	3301      	adds	r3, #1
 800acf2:	f43f ad45 	beq.w	800a780 <_strtod_l+0x490>
 800acf6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800aef8 <_strtod_l+0xc08>
 800acfa:	f04f 3aff 	mov.w	sl, #4294967295
 800acfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad00:	4620      	mov	r0, r4
 800ad02:	f001 fdf9 	bl	800c8f8 <_Bfree>
 800ad06:	9905      	ldr	r1, [sp, #20]
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f001 fdf5 	bl	800c8f8 <_Bfree>
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4620      	mov	r0, r4
 800ad12:	f001 fdf1 	bl	800c8f8 <_Bfree>
 800ad16:	4629      	mov	r1, r5
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f001 fded 	bl	800c8f8 <_Bfree>
 800ad1e:	e61a      	b.n	800a956 <_strtod_l+0x666>
 800ad20:	f1ba 0f00 	cmp.w	sl, #0
 800ad24:	d11b      	bne.n	800ad5e <_strtod_l+0xa6e>
 800ad26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad2a:	b9f3      	cbnz	r3, 800ad6a <_strtod_l+0xa7a>
 800ad2c:	4b6c      	ldr	r3, [pc, #432]	; (800aee0 <_strtod_l+0xbf0>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	4640      	mov	r0, r8
 800ad32:	4649      	mov	r1, r9
 800ad34:	f7f5 fed2 	bl	8000adc <__aeabi_dcmplt>
 800ad38:	b9d0      	cbnz	r0, 800ad70 <_strtod_l+0xa80>
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	4b6c      	ldr	r3, [pc, #432]	; (800aef0 <_strtod_l+0xc00>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	f7f5 fc59 	bl	80005f8 <__aeabi_dmul>
 800ad46:	4680      	mov	r8, r0
 800ad48:	4689      	mov	r9, r1
 800ad4a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ad4e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ad52:	9315      	str	r3, [sp, #84]	; 0x54
 800ad54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ad58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad5c:	e79d      	b.n	800ac9a <_strtod_l+0x9aa>
 800ad5e:	f1ba 0f01 	cmp.w	sl, #1
 800ad62:	d102      	bne.n	800ad6a <_strtod_l+0xa7a>
 800ad64:	2f00      	cmp	r7, #0
 800ad66:	f43f ad83 	beq.w	800a870 <_strtod_l+0x580>
 800ad6a:	4b62      	ldr	r3, [pc, #392]	; (800aef4 <_strtod_l+0xc04>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	e78e      	b.n	800ac8e <_strtod_l+0x99e>
 800ad70:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800aef0 <_strtod_l+0xc00>
 800ad74:	f04f 0800 	mov.w	r8, #0
 800ad78:	e7e7      	b.n	800ad4a <_strtod_l+0xa5a>
 800ad7a:	4b5d      	ldr	r3, [pc, #372]	; (800aef0 <_strtod_l+0xc00>)
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	4649      	mov	r1, r9
 800ad80:	2200      	movs	r2, #0
 800ad82:	f7f5 fc39 	bl	80005f8 <__aeabi_dmul>
 800ad86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad88:	4680      	mov	r8, r0
 800ad8a:	4689      	mov	r9, r1
 800ad8c:	b933      	cbnz	r3, 800ad9c <_strtod_l+0xaac>
 800ad8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad92:	900e      	str	r0, [sp, #56]	; 0x38
 800ad94:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ad9a:	e7dd      	b.n	800ad58 <_strtod_l+0xa68>
 800ad9c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ada0:	e7f9      	b.n	800ad96 <_strtod_l+0xaa6>
 800ada2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ada6:	9b04      	ldr	r3, [sp, #16]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1a8      	bne.n	800acfe <_strtod_l+0xa0e>
 800adac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800adb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adb2:	0d1b      	lsrs	r3, r3, #20
 800adb4:	051b      	lsls	r3, r3, #20
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d1a1      	bne.n	800acfe <_strtod_l+0xa0e>
 800adba:	4640      	mov	r0, r8
 800adbc:	4649      	mov	r1, r9
 800adbe:	f7f5 ff7b 	bl	8000cb8 <__aeabi_d2lz>
 800adc2:	f7f5 fbeb 	bl	800059c <__aeabi_l2d>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4640      	mov	r0, r8
 800adcc:	4649      	mov	r1, r9
 800adce:	f7f5 fa5b 	bl	8000288 <__aeabi_dsub>
 800add2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800add4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800add8:	ea43 030a 	orr.w	r3, r3, sl
 800addc:	4313      	orrs	r3, r2
 800adde:	4680      	mov	r8, r0
 800ade0:	4689      	mov	r9, r1
 800ade2:	d055      	beq.n	800ae90 <_strtod_l+0xba0>
 800ade4:	a336      	add	r3, pc, #216	; (adr r3, 800aec0 <_strtod_l+0xbd0>)
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	f7f5 fe77 	bl	8000adc <__aeabi_dcmplt>
 800adee:	2800      	cmp	r0, #0
 800adf0:	f47f acd0 	bne.w	800a794 <_strtod_l+0x4a4>
 800adf4:	a334      	add	r3, pc, #208	; (adr r3, 800aec8 <_strtod_l+0xbd8>)
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	4640      	mov	r0, r8
 800adfc:	4649      	mov	r1, r9
 800adfe:	f7f5 fe8b 	bl	8000b18 <__aeabi_dcmpgt>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	f43f af7b 	beq.w	800acfe <_strtod_l+0xa0e>
 800ae08:	e4c4      	b.n	800a794 <_strtod_l+0x4a4>
 800ae0a:	9b04      	ldr	r3, [sp, #16]
 800ae0c:	b333      	cbz	r3, 800ae5c <_strtod_l+0xb6c>
 800ae0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae14:	d822      	bhi.n	800ae5c <_strtod_l+0xb6c>
 800ae16:	a32e      	add	r3, pc, #184	; (adr r3, 800aed0 <_strtod_l+0xbe0>)
 800ae18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1c:	4640      	mov	r0, r8
 800ae1e:	4649      	mov	r1, r9
 800ae20:	f7f5 fe66 	bl	8000af0 <__aeabi_dcmple>
 800ae24:	b1a0      	cbz	r0, 800ae50 <_strtod_l+0xb60>
 800ae26:	4649      	mov	r1, r9
 800ae28:	4640      	mov	r0, r8
 800ae2a:	f7f5 febd 	bl	8000ba8 <__aeabi_d2uiz>
 800ae2e:	2801      	cmp	r0, #1
 800ae30:	bf38      	it	cc
 800ae32:	2001      	movcc	r0, #1
 800ae34:	f7f5 fb66 	bl	8000504 <__aeabi_ui2d>
 800ae38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	4689      	mov	r9, r1
 800ae3e:	bb23      	cbnz	r3, 800ae8a <_strtod_l+0xb9a>
 800ae40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae44:	9010      	str	r0, [sp, #64]	; 0x40
 800ae46:	9311      	str	r3, [sp, #68]	; 0x44
 800ae48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ae50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ae58:	1a9b      	subs	r3, r3, r2
 800ae5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae60:	eeb0 0a48 	vmov.f32	s0, s16
 800ae64:	eef0 0a68 	vmov.f32	s1, s17
 800ae68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae6c:	f002 f876 	bl	800cf5c <__ulp>
 800ae70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae74:	ec53 2b10 	vmov	r2, r3, d0
 800ae78:	f7f5 fbbe 	bl	80005f8 <__aeabi_dmul>
 800ae7c:	ec53 2b18 	vmov	r2, r3, d8
 800ae80:	f7f5 fa04 	bl	800028c <__adddf3>
 800ae84:	4682      	mov	sl, r0
 800ae86:	468b      	mov	fp, r1
 800ae88:	e78d      	b.n	800ada6 <_strtod_l+0xab6>
 800ae8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ae8e:	e7db      	b.n	800ae48 <_strtod_l+0xb58>
 800ae90:	a311      	add	r3, pc, #68	; (adr r3, 800aed8 <_strtod_l+0xbe8>)
 800ae92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae96:	f7f5 fe21 	bl	8000adc <__aeabi_dcmplt>
 800ae9a:	e7b2      	b.n	800ae02 <_strtod_l+0xb12>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	930a      	str	r3, [sp, #40]	; 0x28
 800aea0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aea2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aea4:	6013      	str	r3, [r2, #0]
 800aea6:	f7ff ba6b 	b.w	800a380 <_strtod_l+0x90>
 800aeaa:	2a65      	cmp	r2, #101	; 0x65
 800aeac:	f43f ab5f 	beq.w	800a56e <_strtod_l+0x27e>
 800aeb0:	2a45      	cmp	r2, #69	; 0x45
 800aeb2:	f43f ab5c 	beq.w	800a56e <_strtod_l+0x27e>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	f7ff bb94 	b.w	800a5e4 <_strtod_l+0x2f4>
 800aebc:	f3af 8000 	nop.w
 800aec0:	94a03595 	.word	0x94a03595
 800aec4:	3fdfffff 	.word	0x3fdfffff
 800aec8:	35afe535 	.word	0x35afe535
 800aecc:	3fe00000 	.word	0x3fe00000
 800aed0:	ffc00000 	.word	0xffc00000
 800aed4:	41dfffff 	.word	0x41dfffff
 800aed8:	94a03595 	.word	0x94a03595
 800aedc:	3fcfffff 	.word	0x3fcfffff
 800aee0:	3ff00000 	.word	0x3ff00000
 800aee4:	7ff00000 	.word	0x7ff00000
 800aee8:	7fe00000 	.word	0x7fe00000
 800aeec:	7c9fffff 	.word	0x7c9fffff
 800aef0:	3fe00000 	.word	0x3fe00000
 800aef4:	bff00000 	.word	0xbff00000
 800aef8:	7fefffff 	.word	0x7fefffff

0800aefc <_strtod_r>:
 800aefc:	4b01      	ldr	r3, [pc, #4]	; (800af04 <_strtod_r+0x8>)
 800aefe:	f7ff b9f7 	b.w	800a2f0 <_strtod_l>
 800af02:	bf00      	nop
 800af04:	20000208 	.word	0x20000208

0800af08 <_strtol_l.constprop.0>:
 800af08:	2b01      	cmp	r3, #1
 800af0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af0e:	d001      	beq.n	800af14 <_strtol_l.constprop.0+0xc>
 800af10:	2b24      	cmp	r3, #36	; 0x24
 800af12:	d906      	bls.n	800af22 <_strtol_l.constprop.0+0x1a>
 800af14:	f7fe fa38 	bl	8009388 <__errno>
 800af18:	2316      	movs	r3, #22
 800af1a:	6003      	str	r3, [r0, #0]
 800af1c:	2000      	movs	r0, #0
 800af1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b008 <_strtol_l.constprop.0+0x100>
 800af26:	460d      	mov	r5, r1
 800af28:	462e      	mov	r6, r5
 800af2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af2e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800af32:	f017 0708 	ands.w	r7, r7, #8
 800af36:	d1f7      	bne.n	800af28 <_strtol_l.constprop.0+0x20>
 800af38:	2c2d      	cmp	r4, #45	; 0x2d
 800af3a:	d132      	bne.n	800afa2 <_strtol_l.constprop.0+0x9a>
 800af3c:	782c      	ldrb	r4, [r5, #0]
 800af3e:	2701      	movs	r7, #1
 800af40:	1cb5      	adds	r5, r6, #2
 800af42:	2b00      	cmp	r3, #0
 800af44:	d05b      	beq.n	800affe <_strtol_l.constprop.0+0xf6>
 800af46:	2b10      	cmp	r3, #16
 800af48:	d109      	bne.n	800af5e <_strtol_l.constprop.0+0x56>
 800af4a:	2c30      	cmp	r4, #48	; 0x30
 800af4c:	d107      	bne.n	800af5e <_strtol_l.constprop.0+0x56>
 800af4e:	782c      	ldrb	r4, [r5, #0]
 800af50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800af54:	2c58      	cmp	r4, #88	; 0x58
 800af56:	d14d      	bne.n	800aff4 <_strtol_l.constprop.0+0xec>
 800af58:	786c      	ldrb	r4, [r5, #1]
 800af5a:	2310      	movs	r3, #16
 800af5c:	3502      	adds	r5, #2
 800af5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800af62:	f108 38ff 	add.w	r8, r8, #4294967295
 800af66:	f04f 0c00 	mov.w	ip, #0
 800af6a:	fbb8 f9f3 	udiv	r9, r8, r3
 800af6e:	4666      	mov	r6, ip
 800af70:	fb03 8a19 	mls	sl, r3, r9, r8
 800af74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800af78:	f1be 0f09 	cmp.w	lr, #9
 800af7c:	d816      	bhi.n	800afac <_strtol_l.constprop.0+0xa4>
 800af7e:	4674      	mov	r4, lr
 800af80:	42a3      	cmp	r3, r4
 800af82:	dd24      	ble.n	800afce <_strtol_l.constprop.0+0xc6>
 800af84:	f1bc 0f00 	cmp.w	ip, #0
 800af88:	db1e      	blt.n	800afc8 <_strtol_l.constprop.0+0xc0>
 800af8a:	45b1      	cmp	r9, r6
 800af8c:	d31c      	bcc.n	800afc8 <_strtol_l.constprop.0+0xc0>
 800af8e:	d101      	bne.n	800af94 <_strtol_l.constprop.0+0x8c>
 800af90:	45a2      	cmp	sl, r4
 800af92:	db19      	blt.n	800afc8 <_strtol_l.constprop.0+0xc0>
 800af94:	fb06 4603 	mla	r6, r6, r3, r4
 800af98:	f04f 0c01 	mov.w	ip, #1
 800af9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afa0:	e7e8      	b.n	800af74 <_strtol_l.constprop.0+0x6c>
 800afa2:	2c2b      	cmp	r4, #43	; 0x2b
 800afa4:	bf04      	itt	eq
 800afa6:	782c      	ldrbeq	r4, [r5, #0]
 800afa8:	1cb5      	addeq	r5, r6, #2
 800afaa:	e7ca      	b.n	800af42 <_strtol_l.constprop.0+0x3a>
 800afac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800afb0:	f1be 0f19 	cmp.w	lr, #25
 800afb4:	d801      	bhi.n	800afba <_strtol_l.constprop.0+0xb2>
 800afb6:	3c37      	subs	r4, #55	; 0x37
 800afb8:	e7e2      	b.n	800af80 <_strtol_l.constprop.0+0x78>
 800afba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800afbe:	f1be 0f19 	cmp.w	lr, #25
 800afc2:	d804      	bhi.n	800afce <_strtol_l.constprop.0+0xc6>
 800afc4:	3c57      	subs	r4, #87	; 0x57
 800afc6:	e7db      	b.n	800af80 <_strtol_l.constprop.0+0x78>
 800afc8:	f04f 3cff 	mov.w	ip, #4294967295
 800afcc:	e7e6      	b.n	800af9c <_strtol_l.constprop.0+0x94>
 800afce:	f1bc 0f00 	cmp.w	ip, #0
 800afd2:	da05      	bge.n	800afe0 <_strtol_l.constprop.0+0xd8>
 800afd4:	2322      	movs	r3, #34	; 0x22
 800afd6:	6003      	str	r3, [r0, #0]
 800afd8:	4646      	mov	r6, r8
 800afda:	b942      	cbnz	r2, 800afee <_strtol_l.constprop.0+0xe6>
 800afdc:	4630      	mov	r0, r6
 800afde:	e79e      	b.n	800af1e <_strtol_l.constprop.0+0x16>
 800afe0:	b107      	cbz	r7, 800afe4 <_strtol_l.constprop.0+0xdc>
 800afe2:	4276      	negs	r6, r6
 800afe4:	2a00      	cmp	r2, #0
 800afe6:	d0f9      	beq.n	800afdc <_strtol_l.constprop.0+0xd4>
 800afe8:	f1bc 0f00 	cmp.w	ip, #0
 800afec:	d000      	beq.n	800aff0 <_strtol_l.constprop.0+0xe8>
 800afee:	1e69      	subs	r1, r5, #1
 800aff0:	6011      	str	r1, [r2, #0]
 800aff2:	e7f3      	b.n	800afdc <_strtol_l.constprop.0+0xd4>
 800aff4:	2430      	movs	r4, #48	; 0x30
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1b1      	bne.n	800af5e <_strtol_l.constprop.0+0x56>
 800affa:	2308      	movs	r3, #8
 800affc:	e7af      	b.n	800af5e <_strtol_l.constprop.0+0x56>
 800affe:	2c30      	cmp	r4, #48	; 0x30
 800b000:	d0a5      	beq.n	800af4e <_strtol_l.constprop.0+0x46>
 800b002:	230a      	movs	r3, #10
 800b004:	e7ab      	b.n	800af5e <_strtol_l.constprop.0+0x56>
 800b006:	bf00      	nop
 800b008:	0800ef91 	.word	0x0800ef91

0800b00c <_strtol_r>:
 800b00c:	f7ff bf7c 	b.w	800af08 <_strtol_l.constprop.0>

0800b010 <quorem>:
 800b010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b014:	6903      	ldr	r3, [r0, #16]
 800b016:	690c      	ldr	r4, [r1, #16]
 800b018:	42a3      	cmp	r3, r4
 800b01a:	4607      	mov	r7, r0
 800b01c:	f2c0 8081 	blt.w	800b122 <quorem+0x112>
 800b020:	3c01      	subs	r4, #1
 800b022:	f101 0814 	add.w	r8, r1, #20
 800b026:	f100 0514 	add.w	r5, r0, #20
 800b02a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b034:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b038:	3301      	adds	r3, #1
 800b03a:	429a      	cmp	r2, r3
 800b03c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b040:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b044:	fbb2 f6f3 	udiv	r6, r2, r3
 800b048:	d331      	bcc.n	800b0ae <quorem+0x9e>
 800b04a:	f04f 0e00 	mov.w	lr, #0
 800b04e:	4640      	mov	r0, r8
 800b050:	46ac      	mov	ip, r5
 800b052:	46f2      	mov	sl, lr
 800b054:	f850 2b04 	ldr.w	r2, [r0], #4
 800b058:	b293      	uxth	r3, r2
 800b05a:	fb06 e303 	mla	r3, r6, r3, lr
 800b05e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b062:	b29b      	uxth	r3, r3
 800b064:	ebaa 0303 	sub.w	r3, sl, r3
 800b068:	f8dc a000 	ldr.w	sl, [ip]
 800b06c:	0c12      	lsrs	r2, r2, #16
 800b06e:	fa13 f38a 	uxtah	r3, r3, sl
 800b072:	fb06 e202 	mla	r2, r6, r2, lr
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	9b00      	ldr	r3, [sp, #0]
 800b07a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b07e:	b292      	uxth	r2, r2
 800b080:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b088:	f8bd 3000 	ldrh.w	r3, [sp]
 800b08c:	4581      	cmp	r9, r0
 800b08e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b092:	f84c 3b04 	str.w	r3, [ip], #4
 800b096:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b09a:	d2db      	bcs.n	800b054 <quorem+0x44>
 800b09c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b0a0:	b92b      	cbnz	r3, 800b0ae <quorem+0x9e>
 800b0a2:	9b01      	ldr	r3, [sp, #4]
 800b0a4:	3b04      	subs	r3, #4
 800b0a6:	429d      	cmp	r5, r3
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	d32e      	bcc.n	800b10a <quorem+0xfa>
 800b0ac:	613c      	str	r4, [r7, #16]
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	f001 feae 	bl	800ce10 <__mcmp>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	db24      	blt.n	800b102 <quorem+0xf2>
 800b0b8:	3601      	adds	r6, #1
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f04f 0c00 	mov.w	ip, #0
 800b0c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0c4:	f8d0 e000 	ldr.w	lr, [r0]
 800b0c8:	b293      	uxth	r3, r2
 800b0ca:	ebac 0303 	sub.w	r3, ip, r3
 800b0ce:	0c12      	lsrs	r2, r2, #16
 800b0d0:	fa13 f38e 	uxtah	r3, r3, lr
 800b0d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b0d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0e2:	45c1      	cmp	r9, r8
 800b0e4:	f840 3b04 	str.w	r3, [r0], #4
 800b0e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0ec:	d2e8      	bcs.n	800b0c0 <quorem+0xb0>
 800b0ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0f6:	b922      	cbnz	r2, 800b102 <quorem+0xf2>
 800b0f8:	3b04      	subs	r3, #4
 800b0fa:	429d      	cmp	r5, r3
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	d30a      	bcc.n	800b116 <quorem+0x106>
 800b100:	613c      	str	r4, [r7, #16]
 800b102:	4630      	mov	r0, r6
 800b104:	b003      	add	sp, #12
 800b106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10a:	6812      	ldr	r2, [r2, #0]
 800b10c:	3b04      	subs	r3, #4
 800b10e:	2a00      	cmp	r2, #0
 800b110:	d1cc      	bne.n	800b0ac <quorem+0x9c>
 800b112:	3c01      	subs	r4, #1
 800b114:	e7c7      	b.n	800b0a6 <quorem+0x96>
 800b116:	6812      	ldr	r2, [r2, #0]
 800b118:	3b04      	subs	r3, #4
 800b11a:	2a00      	cmp	r2, #0
 800b11c:	d1f0      	bne.n	800b100 <quorem+0xf0>
 800b11e:	3c01      	subs	r4, #1
 800b120:	e7eb      	b.n	800b0fa <quorem+0xea>
 800b122:	2000      	movs	r0, #0
 800b124:	e7ee      	b.n	800b104 <quorem+0xf4>
	...

0800b128 <_dtoa_r>:
 800b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	ed2d 8b04 	vpush	{d8-d9}
 800b130:	ec57 6b10 	vmov	r6, r7, d0
 800b134:	b093      	sub	sp, #76	; 0x4c
 800b136:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b138:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b13c:	9106      	str	r1, [sp, #24]
 800b13e:	ee10 aa10 	vmov	sl, s0
 800b142:	4604      	mov	r4, r0
 800b144:	9209      	str	r2, [sp, #36]	; 0x24
 800b146:	930c      	str	r3, [sp, #48]	; 0x30
 800b148:	46bb      	mov	fp, r7
 800b14a:	b975      	cbnz	r5, 800b16a <_dtoa_r+0x42>
 800b14c:	2010      	movs	r0, #16
 800b14e:	f001 fb6b 	bl	800c828 <malloc>
 800b152:	4602      	mov	r2, r0
 800b154:	6260      	str	r0, [r4, #36]	; 0x24
 800b156:	b920      	cbnz	r0, 800b162 <_dtoa_r+0x3a>
 800b158:	4ba7      	ldr	r3, [pc, #668]	; (800b3f8 <_dtoa_r+0x2d0>)
 800b15a:	21ea      	movs	r1, #234	; 0xea
 800b15c:	48a7      	ldr	r0, [pc, #668]	; (800b3fc <_dtoa_r+0x2d4>)
 800b15e:	f002 fb2d 	bl	800d7bc <__assert_func>
 800b162:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b166:	6005      	str	r5, [r0, #0]
 800b168:	60c5      	str	r5, [r0, #12]
 800b16a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b16c:	6819      	ldr	r1, [r3, #0]
 800b16e:	b151      	cbz	r1, 800b186 <_dtoa_r+0x5e>
 800b170:	685a      	ldr	r2, [r3, #4]
 800b172:	604a      	str	r2, [r1, #4]
 800b174:	2301      	movs	r3, #1
 800b176:	4093      	lsls	r3, r2
 800b178:	608b      	str	r3, [r1, #8]
 800b17a:	4620      	mov	r0, r4
 800b17c:	f001 fbbc 	bl	800c8f8 <_Bfree>
 800b180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b182:	2200      	movs	r2, #0
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	1e3b      	subs	r3, r7, #0
 800b188:	bfaa      	itet	ge
 800b18a:	2300      	movge	r3, #0
 800b18c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b190:	f8c8 3000 	strge.w	r3, [r8]
 800b194:	4b9a      	ldr	r3, [pc, #616]	; (800b400 <_dtoa_r+0x2d8>)
 800b196:	bfbc      	itt	lt
 800b198:	2201      	movlt	r2, #1
 800b19a:	f8c8 2000 	strlt.w	r2, [r8]
 800b19e:	ea33 030b 	bics.w	r3, r3, fp
 800b1a2:	d11b      	bne.n	800b1dc <_dtoa_r+0xb4>
 800b1a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b1aa:	6013      	str	r3, [r2, #0]
 800b1ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1b0:	4333      	orrs	r3, r6
 800b1b2:	f000 8592 	beq.w	800bcda <_dtoa_r+0xbb2>
 800b1b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1b8:	b963      	cbnz	r3, 800b1d4 <_dtoa_r+0xac>
 800b1ba:	4b92      	ldr	r3, [pc, #584]	; (800b404 <_dtoa_r+0x2dc>)
 800b1bc:	e022      	b.n	800b204 <_dtoa_r+0xdc>
 800b1be:	4b92      	ldr	r3, [pc, #584]	; (800b408 <_dtoa_r+0x2e0>)
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	3308      	adds	r3, #8
 800b1c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1c6:	6013      	str	r3, [r2, #0]
 800b1c8:	9801      	ldr	r0, [sp, #4]
 800b1ca:	b013      	add	sp, #76	; 0x4c
 800b1cc:	ecbd 8b04 	vpop	{d8-d9}
 800b1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d4:	4b8b      	ldr	r3, [pc, #556]	; (800b404 <_dtoa_r+0x2dc>)
 800b1d6:	9301      	str	r3, [sp, #4]
 800b1d8:	3303      	adds	r3, #3
 800b1da:	e7f3      	b.n	800b1c4 <_dtoa_r+0x9c>
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2300      	movs	r3, #0
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	4659      	mov	r1, fp
 800b1e4:	f7f5 fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1e8:	ec4b ab19 	vmov	d9, sl, fp
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	b158      	cbz	r0, 800b208 <_dtoa_r+0xe0>
 800b1f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 856b 	beq.w	800bcd4 <_dtoa_r+0xbac>
 800b1fe:	4883      	ldr	r0, [pc, #524]	; (800b40c <_dtoa_r+0x2e4>)
 800b200:	6018      	str	r0, [r3, #0]
 800b202:	1e43      	subs	r3, r0, #1
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	e7df      	b.n	800b1c8 <_dtoa_r+0xa0>
 800b208:	ec4b ab10 	vmov	d0, sl, fp
 800b20c:	aa10      	add	r2, sp, #64	; 0x40
 800b20e:	a911      	add	r1, sp, #68	; 0x44
 800b210:	4620      	mov	r0, r4
 800b212:	f001 ff1f 	bl	800d054 <__d2b>
 800b216:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b21a:	ee08 0a10 	vmov	s16, r0
 800b21e:	2d00      	cmp	r5, #0
 800b220:	f000 8084 	beq.w	800b32c <_dtoa_r+0x204>
 800b224:	ee19 3a90 	vmov	r3, s19
 800b228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b22c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b230:	4656      	mov	r6, sl
 800b232:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b236:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b23a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b23e:	4b74      	ldr	r3, [pc, #464]	; (800b410 <_dtoa_r+0x2e8>)
 800b240:	2200      	movs	r2, #0
 800b242:	4630      	mov	r0, r6
 800b244:	4639      	mov	r1, r7
 800b246:	f7f5 f81f 	bl	8000288 <__aeabi_dsub>
 800b24a:	a365      	add	r3, pc, #404	; (adr r3, 800b3e0 <_dtoa_r+0x2b8>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f7f5 f9d2 	bl	80005f8 <__aeabi_dmul>
 800b254:	a364      	add	r3, pc, #400	; (adr r3, 800b3e8 <_dtoa_r+0x2c0>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	f7f5 f817 	bl	800028c <__adddf3>
 800b25e:	4606      	mov	r6, r0
 800b260:	4628      	mov	r0, r5
 800b262:	460f      	mov	r7, r1
 800b264:	f7f5 f95e 	bl	8000524 <__aeabi_i2d>
 800b268:	a361      	add	r3, pc, #388	; (adr r3, 800b3f0 <_dtoa_r+0x2c8>)
 800b26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26e:	f7f5 f9c3 	bl	80005f8 <__aeabi_dmul>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	4630      	mov	r0, r6
 800b278:	4639      	mov	r1, r7
 800b27a:	f7f5 f807 	bl	800028c <__adddf3>
 800b27e:	4606      	mov	r6, r0
 800b280:	460f      	mov	r7, r1
 800b282:	f7f5 fc69 	bl	8000b58 <__aeabi_d2iz>
 800b286:	2200      	movs	r2, #0
 800b288:	9000      	str	r0, [sp, #0]
 800b28a:	2300      	movs	r3, #0
 800b28c:	4630      	mov	r0, r6
 800b28e:	4639      	mov	r1, r7
 800b290:	f7f5 fc24 	bl	8000adc <__aeabi_dcmplt>
 800b294:	b150      	cbz	r0, 800b2ac <_dtoa_r+0x184>
 800b296:	9800      	ldr	r0, [sp, #0]
 800b298:	f7f5 f944 	bl	8000524 <__aeabi_i2d>
 800b29c:	4632      	mov	r2, r6
 800b29e:	463b      	mov	r3, r7
 800b2a0:	f7f5 fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2a4:	b910      	cbnz	r0, 800b2ac <_dtoa_r+0x184>
 800b2a6:	9b00      	ldr	r3, [sp, #0]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	9b00      	ldr	r3, [sp, #0]
 800b2ae:	2b16      	cmp	r3, #22
 800b2b0:	d85a      	bhi.n	800b368 <_dtoa_r+0x240>
 800b2b2:	9a00      	ldr	r2, [sp, #0]
 800b2b4:	4b57      	ldr	r3, [pc, #348]	; (800b414 <_dtoa_r+0x2ec>)
 800b2b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2be:	ec51 0b19 	vmov	r0, r1, d9
 800b2c2:	f7f5 fc0b 	bl	8000adc <__aeabi_dcmplt>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d050      	beq.n	800b36c <_dtoa_r+0x244>
 800b2ca:	9b00      	ldr	r3, [sp, #0]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2d6:	1b5d      	subs	r5, r3, r5
 800b2d8:	1e6b      	subs	r3, r5, #1
 800b2da:	9305      	str	r3, [sp, #20]
 800b2dc:	bf45      	ittet	mi
 800b2de:	f1c5 0301 	rsbmi	r3, r5, #1
 800b2e2:	9304      	strmi	r3, [sp, #16]
 800b2e4:	2300      	movpl	r3, #0
 800b2e6:	2300      	movmi	r3, #0
 800b2e8:	bf4c      	ite	mi
 800b2ea:	9305      	strmi	r3, [sp, #20]
 800b2ec:	9304      	strpl	r3, [sp, #16]
 800b2ee:	9b00      	ldr	r3, [sp, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	db3d      	blt.n	800b370 <_dtoa_r+0x248>
 800b2f4:	9b05      	ldr	r3, [sp, #20]
 800b2f6:	9a00      	ldr	r2, [sp, #0]
 800b2f8:	920a      	str	r2, [sp, #40]	; 0x28
 800b2fa:	4413      	add	r3, r2
 800b2fc:	9305      	str	r3, [sp, #20]
 800b2fe:	2300      	movs	r3, #0
 800b300:	9307      	str	r3, [sp, #28]
 800b302:	9b06      	ldr	r3, [sp, #24]
 800b304:	2b09      	cmp	r3, #9
 800b306:	f200 8089 	bhi.w	800b41c <_dtoa_r+0x2f4>
 800b30a:	2b05      	cmp	r3, #5
 800b30c:	bfc4      	itt	gt
 800b30e:	3b04      	subgt	r3, #4
 800b310:	9306      	strgt	r3, [sp, #24]
 800b312:	9b06      	ldr	r3, [sp, #24]
 800b314:	f1a3 0302 	sub.w	r3, r3, #2
 800b318:	bfcc      	ite	gt
 800b31a:	2500      	movgt	r5, #0
 800b31c:	2501      	movle	r5, #1
 800b31e:	2b03      	cmp	r3, #3
 800b320:	f200 8087 	bhi.w	800b432 <_dtoa_r+0x30a>
 800b324:	e8df f003 	tbb	[pc, r3]
 800b328:	59383a2d 	.word	0x59383a2d
 800b32c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b330:	441d      	add	r5, r3
 800b332:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b336:	2b20      	cmp	r3, #32
 800b338:	bfc1      	itttt	gt
 800b33a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b33e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b342:	fa0b f303 	lslgt.w	r3, fp, r3
 800b346:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b34a:	bfda      	itte	le
 800b34c:	f1c3 0320 	rsble	r3, r3, #32
 800b350:	fa06 f003 	lslle.w	r0, r6, r3
 800b354:	4318      	orrgt	r0, r3
 800b356:	f7f5 f8d5 	bl	8000504 <__aeabi_ui2d>
 800b35a:	2301      	movs	r3, #1
 800b35c:	4606      	mov	r6, r0
 800b35e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b362:	3d01      	subs	r5, #1
 800b364:	930e      	str	r3, [sp, #56]	; 0x38
 800b366:	e76a      	b.n	800b23e <_dtoa_r+0x116>
 800b368:	2301      	movs	r3, #1
 800b36a:	e7b2      	b.n	800b2d2 <_dtoa_r+0x1aa>
 800b36c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b36e:	e7b1      	b.n	800b2d4 <_dtoa_r+0x1ac>
 800b370:	9b04      	ldr	r3, [sp, #16]
 800b372:	9a00      	ldr	r2, [sp, #0]
 800b374:	1a9b      	subs	r3, r3, r2
 800b376:	9304      	str	r3, [sp, #16]
 800b378:	4253      	negs	r3, r2
 800b37a:	9307      	str	r3, [sp, #28]
 800b37c:	2300      	movs	r3, #0
 800b37e:	930a      	str	r3, [sp, #40]	; 0x28
 800b380:	e7bf      	b.n	800b302 <_dtoa_r+0x1da>
 800b382:	2300      	movs	r3, #0
 800b384:	9308      	str	r3, [sp, #32]
 800b386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b388:	2b00      	cmp	r3, #0
 800b38a:	dc55      	bgt.n	800b438 <_dtoa_r+0x310>
 800b38c:	2301      	movs	r3, #1
 800b38e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b392:	461a      	mov	r2, r3
 800b394:	9209      	str	r2, [sp, #36]	; 0x24
 800b396:	e00c      	b.n	800b3b2 <_dtoa_r+0x28a>
 800b398:	2301      	movs	r3, #1
 800b39a:	e7f3      	b.n	800b384 <_dtoa_r+0x25c>
 800b39c:	2300      	movs	r3, #0
 800b39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3a0:	9308      	str	r3, [sp, #32]
 800b3a2:	9b00      	ldr	r3, [sp, #0]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	9302      	str	r3, [sp, #8]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	9303      	str	r3, [sp, #12]
 800b3ae:	bfb8      	it	lt
 800b3b0:	2301      	movlt	r3, #1
 800b3b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	6042      	str	r2, [r0, #4]
 800b3b8:	2204      	movs	r2, #4
 800b3ba:	f102 0614 	add.w	r6, r2, #20
 800b3be:	429e      	cmp	r6, r3
 800b3c0:	6841      	ldr	r1, [r0, #4]
 800b3c2:	d93d      	bls.n	800b440 <_dtoa_r+0x318>
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f001 fa57 	bl	800c878 <_Balloc>
 800b3ca:	9001      	str	r0, [sp, #4]
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d13b      	bne.n	800b448 <_dtoa_r+0x320>
 800b3d0:	4b11      	ldr	r3, [pc, #68]	; (800b418 <_dtoa_r+0x2f0>)
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b3d8:	e6c0      	b.n	800b15c <_dtoa_r+0x34>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e7df      	b.n	800b39e <_dtoa_r+0x276>
 800b3de:	bf00      	nop
 800b3e0:	636f4361 	.word	0x636f4361
 800b3e4:	3fd287a7 	.word	0x3fd287a7
 800b3e8:	8b60c8b3 	.word	0x8b60c8b3
 800b3ec:	3fc68a28 	.word	0x3fc68a28
 800b3f0:	509f79fb 	.word	0x509f79fb
 800b3f4:	3fd34413 	.word	0x3fd34413
 800b3f8:	0800f09e 	.word	0x0800f09e
 800b3fc:	0800f0b5 	.word	0x0800f0b5
 800b400:	7ff00000 	.word	0x7ff00000
 800b404:	0800f09a 	.word	0x0800f09a
 800b408:	0800f091 	.word	0x0800f091
 800b40c:	0800ef15 	.word	0x0800ef15
 800b410:	3ff80000 	.word	0x3ff80000
 800b414:	0800f288 	.word	0x0800f288
 800b418:	0800f110 	.word	0x0800f110
 800b41c:	2501      	movs	r5, #1
 800b41e:	2300      	movs	r3, #0
 800b420:	9306      	str	r3, [sp, #24]
 800b422:	9508      	str	r5, [sp, #32]
 800b424:	f04f 33ff 	mov.w	r3, #4294967295
 800b428:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b42c:	2200      	movs	r2, #0
 800b42e:	2312      	movs	r3, #18
 800b430:	e7b0      	b.n	800b394 <_dtoa_r+0x26c>
 800b432:	2301      	movs	r3, #1
 800b434:	9308      	str	r3, [sp, #32]
 800b436:	e7f5      	b.n	800b424 <_dtoa_r+0x2fc>
 800b438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b43e:	e7b8      	b.n	800b3b2 <_dtoa_r+0x28a>
 800b440:	3101      	adds	r1, #1
 800b442:	6041      	str	r1, [r0, #4]
 800b444:	0052      	lsls	r2, r2, #1
 800b446:	e7b8      	b.n	800b3ba <_dtoa_r+0x292>
 800b448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b44a:	9a01      	ldr	r2, [sp, #4]
 800b44c:	601a      	str	r2, [r3, #0]
 800b44e:	9b03      	ldr	r3, [sp, #12]
 800b450:	2b0e      	cmp	r3, #14
 800b452:	f200 809d 	bhi.w	800b590 <_dtoa_r+0x468>
 800b456:	2d00      	cmp	r5, #0
 800b458:	f000 809a 	beq.w	800b590 <_dtoa_r+0x468>
 800b45c:	9b00      	ldr	r3, [sp, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	dd32      	ble.n	800b4c8 <_dtoa_r+0x3a0>
 800b462:	4ab7      	ldr	r2, [pc, #732]	; (800b740 <_dtoa_r+0x618>)
 800b464:	f003 030f 	and.w	r3, r3, #15
 800b468:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b46c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b470:	9b00      	ldr	r3, [sp, #0]
 800b472:	05d8      	lsls	r0, r3, #23
 800b474:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b478:	d516      	bpl.n	800b4a8 <_dtoa_r+0x380>
 800b47a:	4bb2      	ldr	r3, [pc, #712]	; (800b744 <_dtoa_r+0x61c>)
 800b47c:	ec51 0b19 	vmov	r0, r1, d9
 800b480:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b484:	f7f5 f9e2 	bl	800084c <__aeabi_ddiv>
 800b488:	f007 070f 	and.w	r7, r7, #15
 800b48c:	4682      	mov	sl, r0
 800b48e:	468b      	mov	fp, r1
 800b490:	2503      	movs	r5, #3
 800b492:	4eac      	ldr	r6, [pc, #688]	; (800b744 <_dtoa_r+0x61c>)
 800b494:	b957      	cbnz	r7, 800b4ac <_dtoa_r+0x384>
 800b496:	4642      	mov	r2, r8
 800b498:	464b      	mov	r3, r9
 800b49a:	4650      	mov	r0, sl
 800b49c:	4659      	mov	r1, fp
 800b49e:	f7f5 f9d5 	bl	800084c <__aeabi_ddiv>
 800b4a2:	4682      	mov	sl, r0
 800b4a4:	468b      	mov	fp, r1
 800b4a6:	e028      	b.n	800b4fa <_dtoa_r+0x3d2>
 800b4a8:	2502      	movs	r5, #2
 800b4aa:	e7f2      	b.n	800b492 <_dtoa_r+0x36a>
 800b4ac:	07f9      	lsls	r1, r7, #31
 800b4ae:	d508      	bpl.n	800b4c2 <_dtoa_r+0x39a>
 800b4b0:	4640      	mov	r0, r8
 800b4b2:	4649      	mov	r1, r9
 800b4b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4b8:	f7f5 f89e 	bl	80005f8 <__aeabi_dmul>
 800b4bc:	3501      	adds	r5, #1
 800b4be:	4680      	mov	r8, r0
 800b4c0:	4689      	mov	r9, r1
 800b4c2:	107f      	asrs	r7, r7, #1
 800b4c4:	3608      	adds	r6, #8
 800b4c6:	e7e5      	b.n	800b494 <_dtoa_r+0x36c>
 800b4c8:	f000 809b 	beq.w	800b602 <_dtoa_r+0x4da>
 800b4cc:	9b00      	ldr	r3, [sp, #0]
 800b4ce:	4f9d      	ldr	r7, [pc, #628]	; (800b744 <_dtoa_r+0x61c>)
 800b4d0:	425e      	negs	r6, r3
 800b4d2:	4b9b      	ldr	r3, [pc, #620]	; (800b740 <_dtoa_r+0x618>)
 800b4d4:	f006 020f 	and.w	r2, r6, #15
 800b4d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	ec51 0b19 	vmov	r0, r1, d9
 800b4e4:	f7f5 f888 	bl	80005f8 <__aeabi_dmul>
 800b4e8:	1136      	asrs	r6, r6, #4
 800b4ea:	4682      	mov	sl, r0
 800b4ec:	468b      	mov	fp, r1
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	2502      	movs	r5, #2
 800b4f2:	2e00      	cmp	r6, #0
 800b4f4:	d17a      	bne.n	800b5ec <_dtoa_r+0x4c4>
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1d3      	bne.n	800b4a2 <_dtoa_r+0x37a>
 800b4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f000 8082 	beq.w	800b606 <_dtoa_r+0x4de>
 800b502:	4b91      	ldr	r3, [pc, #580]	; (800b748 <_dtoa_r+0x620>)
 800b504:	2200      	movs	r2, #0
 800b506:	4650      	mov	r0, sl
 800b508:	4659      	mov	r1, fp
 800b50a:	f7f5 fae7 	bl	8000adc <__aeabi_dcmplt>
 800b50e:	2800      	cmp	r0, #0
 800b510:	d079      	beq.n	800b606 <_dtoa_r+0x4de>
 800b512:	9b03      	ldr	r3, [sp, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d076      	beq.n	800b606 <_dtoa_r+0x4de>
 800b518:	9b02      	ldr	r3, [sp, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	dd36      	ble.n	800b58c <_dtoa_r+0x464>
 800b51e:	9b00      	ldr	r3, [sp, #0]
 800b520:	4650      	mov	r0, sl
 800b522:	4659      	mov	r1, fp
 800b524:	1e5f      	subs	r7, r3, #1
 800b526:	2200      	movs	r2, #0
 800b528:	4b88      	ldr	r3, [pc, #544]	; (800b74c <_dtoa_r+0x624>)
 800b52a:	f7f5 f865 	bl	80005f8 <__aeabi_dmul>
 800b52e:	9e02      	ldr	r6, [sp, #8]
 800b530:	4682      	mov	sl, r0
 800b532:	468b      	mov	fp, r1
 800b534:	3501      	adds	r5, #1
 800b536:	4628      	mov	r0, r5
 800b538:	f7f4 fff4 	bl	8000524 <__aeabi_i2d>
 800b53c:	4652      	mov	r2, sl
 800b53e:	465b      	mov	r3, fp
 800b540:	f7f5 f85a 	bl	80005f8 <__aeabi_dmul>
 800b544:	4b82      	ldr	r3, [pc, #520]	; (800b750 <_dtoa_r+0x628>)
 800b546:	2200      	movs	r2, #0
 800b548:	f7f4 fea0 	bl	800028c <__adddf3>
 800b54c:	46d0      	mov	r8, sl
 800b54e:	46d9      	mov	r9, fp
 800b550:	4682      	mov	sl, r0
 800b552:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b556:	2e00      	cmp	r6, #0
 800b558:	d158      	bne.n	800b60c <_dtoa_r+0x4e4>
 800b55a:	4b7e      	ldr	r3, [pc, #504]	; (800b754 <_dtoa_r+0x62c>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	4640      	mov	r0, r8
 800b560:	4649      	mov	r1, r9
 800b562:	f7f4 fe91 	bl	8000288 <__aeabi_dsub>
 800b566:	4652      	mov	r2, sl
 800b568:	465b      	mov	r3, fp
 800b56a:	4680      	mov	r8, r0
 800b56c:	4689      	mov	r9, r1
 800b56e:	f7f5 fad3 	bl	8000b18 <__aeabi_dcmpgt>
 800b572:	2800      	cmp	r0, #0
 800b574:	f040 8295 	bne.w	800baa2 <_dtoa_r+0x97a>
 800b578:	4652      	mov	r2, sl
 800b57a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b57e:	4640      	mov	r0, r8
 800b580:	4649      	mov	r1, r9
 800b582:	f7f5 faab 	bl	8000adc <__aeabi_dcmplt>
 800b586:	2800      	cmp	r0, #0
 800b588:	f040 8289 	bne.w	800ba9e <_dtoa_r+0x976>
 800b58c:	ec5b ab19 	vmov	sl, fp, d9
 800b590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b592:	2b00      	cmp	r3, #0
 800b594:	f2c0 8148 	blt.w	800b828 <_dtoa_r+0x700>
 800b598:	9a00      	ldr	r2, [sp, #0]
 800b59a:	2a0e      	cmp	r2, #14
 800b59c:	f300 8144 	bgt.w	800b828 <_dtoa_r+0x700>
 800b5a0:	4b67      	ldr	r3, [pc, #412]	; (800b740 <_dtoa_r+0x618>)
 800b5a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f280 80d5 	bge.w	800b75c <_dtoa_r+0x634>
 800b5b2:	9b03      	ldr	r3, [sp, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f300 80d1 	bgt.w	800b75c <_dtoa_r+0x634>
 800b5ba:	f040 826f 	bne.w	800ba9c <_dtoa_r+0x974>
 800b5be:	4b65      	ldr	r3, [pc, #404]	; (800b754 <_dtoa_r+0x62c>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	4649      	mov	r1, r9
 800b5c6:	f7f5 f817 	bl	80005f8 <__aeabi_dmul>
 800b5ca:	4652      	mov	r2, sl
 800b5cc:	465b      	mov	r3, fp
 800b5ce:	f7f5 fa99 	bl	8000b04 <__aeabi_dcmpge>
 800b5d2:	9e03      	ldr	r6, [sp, #12]
 800b5d4:	4637      	mov	r7, r6
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	f040 8245 	bne.w	800ba66 <_dtoa_r+0x93e>
 800b5dc:	9d01      	ldr	r5, [sp, #4]
 800b5de:	2331      	movs	r3, #49	; 0x31
 800b5e0:	f805 3b01 	strb.w	r3, [r5], #1
 800b5e4:	9b00      	ldr	r3, [sp, #0]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	e240      	b.n	800ba6e <_dtoa_r+0x946>
 800b5ec:	07f2      	lsls	r2, r6, #31
 800b5ee:	d505      	bpl.n	800b5fc <_dtoa_r+0x4d4>
 800b5f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5f4:	f7f5 f800 	bl	80005f8 <__aeabi_dmul>
 800b5f8:	3501      	adds	r5, #1
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	1076      	asrs	r6, r6, #1
 800b5fe:	3708      	adds	r7, #8
 800b600:	e777      	b.n	800b4f2 <_dtoa_r+0x3ca>
 800b602:	2502      	movs	r5, #2
 800b604:	e779      	b.n	800b4fa <_dtoa_r+0x3d2>
 800b606:	9f00      	ldr	r7, [sp, #0]
 800b608:	9e03      	ldr	r6, [sp, #12]
 800b60a:	e794      	b.n	800b536 <_dtoa_r+0x40e>
 800b60c:	9901      	ldr	r1, [sp, #4]
 800b60e:	4b4c      	ldr	r3, [pc, #304]	; (800b740 <_dtoa_r+0x618>)
 800b610:	4431      	add	r1, r6
 800b612:	910d      	str	r1, [sp, #52]	; 0x34
 800b614:	9908      	ldr	r1, [sp, #32]
 800b616:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b61a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b61e:	2900      	cmp	r1, #0
 800b620:	d043      	beq.n	800b6aa <_dtoa_r+0x582>
 800b622:	494d      	ldr	r1, [pc, #308]	; (800b758 <_dtoa_r+0x630>)
 800b624:	2000      	movs	r0, #0
 800b626:	f7f5 f911 	bl	800084c <__aeabi_ddiv>
 800b62a:	4652      	mov	r2, sl
 800b62c:	465b      	mov	r3, fp
 800b62e:	f7f4 fe2b 	bl	8000288 <__aeabi_dsub>
 800b632:	9d01      	ldr	r5, [sp, #4]
 800b634:	4682      	mov	sl, r0
 800b636:	468b      	mov	fp, r1
 800b638:	4649      	mov	r1, r9
 800b63a:	4640      	mov	r0, r8
 800b63c:	f7f5 fa8c 	bl	8000b58 <__aeabi_d2iz>
 800b640:	4606      	mov	r6, r0
 800b642:	f7f4 ff6f 	bl	8000524 <__aeabi_i2d>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	4640      	mov	r0, r8
 800b64c:	4649      	mov	r1, r9
 800b64e:	f7f4 fe1b 	bl	8000288 <__aeabi_dsub>
 800b652:	3630      	adds	r6, #48	; 0x30
 800b654:	f805 6b01 	strb.w	r6, [r5], #1
 800b658:	4652      	mov	r2, sl
 800b65a:	465b      	mov	r3, fp
 800b65c:	4680      	mov	r8, r0
 800b65e:	4689      	mov	r9, r1
 800b660:	f7f5 fa3c 	bl	8000adc <__aeabi_dcmplt>
 800b664:	2800      	cmp	r0, #0
 800b666:	d163      	bne.n	800b730 <_dtoa_r+0x608>
 800b668:	4642      	mov	r2, r8
 800b66a:	464b      	mov	r3, r9
 800b66c:	4936      	ldr	r1, [pc, #216]	; (800b748 <_dtoa_r+0x620>)
 800b66e:	2000      	movs	r0, #0
 800b670:	f7f4 fe0a 	bl	8000288 <__aeabi_dsub>
 800b674:	4652      	mov	r2, sl
 800b676:	465b      	mov	r3, fp
 800b678:	f7f5 fa30 	bl	8000adc <__aeabi_dcmplt>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	f040 80b5 	bne.w	800b7ec <_dtoa_r+0x6c4>
 800b682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b684:	429d      	cmp	r5, r3
 800b686:	d081      	beq.n	800b58c <_dtoa_r+0x464>
 800b688:	4b30      	ldr	r3, [pc, #192]	; (800b74c <_dtoa_r+0x624>)
 800b68a:	2200      	movs	r2, #0
 800b68c:	4650      	mov	r0, sl
 800b68e:	4659      	mov	r1, fp
 800b690:	f7f4 ffb2 	bl	80005f8 <__aeabi_dmul>
 800b694:	4b2d      	ldr	r3, [pc, #180]	; (800b74c <_dtoa_r+0x624>)
 800b696:	4682      	mov	sl, r0
 800b698:	468b      	mov	fp, r1
 800b69a:	4640      	mov	r0, r8
 800b69c:	4649      	mov	r1, r9
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f7f4 ffaa 	bl	80005f8 <__aeabi_dmul>
 800b6a4:	4680      	mov	r8, r0
 800b6a6:	4689      	mov	r9, r1
 800b6a8:	e7c6      	b.n	800b638 <_dtoa_r+0x510>
 800b6aa:	4650      	mov	r0, sl
 800b6ac:	4659      	mov	r1, fp
 800b6ae:	f7f4 ffa3 	bl	80005f8 <__aeabi_dmul>
 800b6b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6b4:	9d01      	ldr	r5, [sp, #4]
 800b6b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6b8:	4682      	mov	sl, r0
 800b6ba:	468b      	mov	fp, r1
 800b6bc:	4649      	mov	r1, r9
 800b6be:	4640      	mov	r0, r8
 800b6c0:	f7f5 fa4a 	bl	8000b58 <__aeabi_d2iz>
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	f7f4 ff2d 	bl	8000524 <__aeabi_i2d>
 800b6ca:	3630      	adds	r6, #48	; 0x30
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	4649      	mov	r1, r9
 800b6d4:	f7f4 fdd8 	bl	8000288 <__aeabi_dsub>
 800b6d8:	f805 6b01 	strb.w	r6, [r5], #1
 800b6dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6de:	429d      	cmp	r5, r3
 800b6e0:	4680      	mov	r8, r0
 800b6e2:	4689      	mov	r9, r1
 800b6e4:	f04f 0200 	mov.w	r2, #0
 800b6e8:	d124      	bne.n	800b734 <_dtoa_r+0x60c>
 800b6ea:	4b1b      	ldr	r3, [pc, #108]	; (800b758 <_dtoa_r+0x630>)
 800b6ec:	4650      	mov	r0, sl
 800b6ee:	4659      	mov	r1, fp
 800b6f0:	f7f4 fdcc 	bl	800028c <__adddf3>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	f7f5 fa0c 	bl	8000b18 <__aeabi_dcmpgt>
 800b700:	2800      	cmp	r0, #0
 800b702:	d173      	bne.n	800b7ec <_dtoa_r+0x6c4>
 800b704:	4652      	mov	r2, sl
 800b706:	465b      	mov	r3, fp
 800b708:	4913      	ldr	r1, [pc, #76]	; (800b758 <_dtoa_r+0x630>)
 800b70a:	2000      	movs	r0, #0
 800b70c:	f7f4 fdbc 	bl	8000288 <__aeabi_dsub>
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	4640      	mov	r0, r8
 800b716:	4649      	mov	r1, r9
 800b718:	f7f5 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	f43f af35 	beq.w	800b58c <_dtoa_r+0x464>
 800b722:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b724:	1e6b      	subs	r3, r5, #1
 800b726:	930f      	str	r3, [sp, #60]	; 0x3c
 800b728:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b72c:	2b30      	cmp	r3, #48	; 0x30
 800b72e:	d0f8      	beq.n	800b722 <_dtoa_r+0x5fa>
 800b730:	9700      	str	r7, [sp, #0]
 800b732:	e049      	b.n	800b7c8 <_dtoa_r+0x6a0>
 800b734:	4b05      	ldr	r3, [pc, #20]	; (800b74c <_dtoa_r+0x624>)
 800b736:	f7f4 ff5f 	bl	80005f8 <__aeabi_dmul>
 800b73a:	4680      	mov	r8, r0
 800b73c:	4689      	mov	r9, r1
 800b73e:	e7bd      	b.n	800b6bc <_dtoa_r+0x594>
 800b740:	0800f288 	.word	0x0800f288
 800b744:	0800f260 	.word	0x0800f260
 800b748:	3ff00000 	.word	0x3ff00000
 800b74c:	40240000 	.word	0x40240000
 800b750:	401c0000 	.word	0x401c0000
 800b754:	40140000 	.word	0x40140000
 800b758:	3fe00000 	.word	0x3fe00000
 800b75c:	9d01      	ldr	r5, [sp, #4]
 800b75e:	4656      	mov	r6, sl
 800b760:	465f      	mov	r7, fp
 800b762:	4642      	mov	r2, r8
 800b764:	464b      	mov	r3, r9
 800b766:	4630      	mov	r0, r6
 800b768:	4639      	mov	r1, r7
 800b76a:	f7f5 f86f 	bl	800084c <__aeabi_ddiv>
 800b76e:	f7f5 f9f3 	bl	8000b58 <__aeabi_d2iz>
 800b772:	4682      	mov	sl, r0
 800b774:	f7f4 fed6 	bl	8000524 <__aeabi_i2d>
 800b778:	4642      	mov	r2, r8
 800b77a:	464b      	mov	r3, r9
 800b77c:	f7f4 ff3c 	bl	80005f8 <__aeabi_dmul>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	4630      	mov	r0, r6
 800b786:	4639      	mov	r1, r7
 800b788:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b78c:	f7f4 fd7c 	bl	8000288 <__aeabi_dsub>
 800b790:	f805 6b01 	strb.w	r6, [r5], #1
 800b794:	9e01      	ldr	r6, [sp, #4]
 800b796:	9f03      	ldr	r7, [sp, #12]
 800b798:	1bae      	subs	r6, r5, r6
 800b79a:	42b7      	cmp	r7, r6
 800b79c:	4602      	mov	r2, r0
 800b79e:	460b      	mov	r3, r1
 800b7a0:	d135      	bne.n	800b80e <_dtoa_r+0x6e6>
 800b7a2:	f7f4 fd73 	bl	800028c <__adddf3>
 800b7a6:	4642      	mov	r2, r8
 800b7a8:	464b      	mov	r3, r9
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	f7f5 f9b3 	bl	8000b18 <__aeabi_dcmpgt>
 800b7b2:	b9d0      	cbnz	r0, 800b7ea <_dtoa_r+0x6c2>
 800b7b4:	4642      	mov	r2, r8
 800b7b6:	464b      	mov	r3, r9
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	f7f5 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7c0:	b110      	cbz	r0, 800b7c8 <_dtoa_r+0x6a0>
 800b7c2:	f01a 0f01 	tst.w	sl, #1
 800b7c6:	d110      	bne.n	800b7ea <_dtoa_r+0x6c2>
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	ee18 1a10 	vmov	r1, s16
 800b7ce:	f001 f893 	bl	800c8f8 <_Bfree>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	9800      	ldr	r0, [sp, #0]
 800b7d6:	702b      	strb	r3, [r5, #0]
 800b7d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7da:	3001      	adds	r0, #1
 800b7dc:	6018      	str	r0, [r3, #0]
 800b7de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f43f acf1 	beq.w	800b1c8 <_dtoa_r+0xa0>
 800b7e6:	601d      	str	r5, [r3, #0]
 800b7e8:	e4ee      	b.n	800b1c8 <_dtoa_r+0xa0>
 800b7ea:	9f00      	ldr	r7, [sp, #0]
 800b7ec:	462b      	mov	r3, r5
 800b7ee:	461d      	mov	r5, r3
 800b7f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7f4:	2a39      	cmp	r2, #57	; 0x39
 800b7f6:	d106      	bne.n	800b806 <_dtoa_r+0x6de>
 800b7f8:	9a01      	ldr	r2, [sp, #4]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d1f7      	bne.n	800b7ee <_dtoa_r+0x6c6>
 800b7fe:	9901      	ldr	r1, [sp, #4]
 800b800:	2230      	movs	r2, #48	; 0x30
 800b802:	3701      	adds	r7, #1
 800b804:	700a      	strb	r2, [r1, #0]
 800b806:	781a      	ldrb	r2, [r3, #0]
 800b808:	3201      	adds	r2, #1
 800b80a:	701a      	strb	r2, [r3, #0]
 800b80c:	e790      	b.n	800b730 <_dtoa_r+0x608>
 800b80e:	4ba6      	ldr	r3, [pc, #664]	; (800baa8 <_dtoa_r+0x980>)
 800b810:	2200      	movs	r2, #0
 800b812:	f7f4 fef1 	bl	80005f8 <__aeabi_dmul>
 800b816:	2200      	movs	r2, #0
 800b818:	2300      	movs	r3, #0
 800b81a:	4606      	mov	r6, r0
 800b81c:	460f      	mov	r7, r1
 800b81e:	f7f5 f953 	bl	8000ac8 <__aeabi_dcmpeq>
 800b822:	2800      	cmp	r0, #0
 800b824:	d09d      	beq.n	800b762 <_dtoa_r+0x63a>
 800b826:	e7cf      	b.n	800b7c8 <_dtoa_r+0x6a0>
 800b828:	9a08      	ldr	r2, [sp, #32]
 800b82a:	2a00      	cmp	r2, #0
 800b82c:	f000 80d7 	beq.w	800b9de <_dtoa_r+0x8b6>
 800b830:	9a06      	ldr	r2, [sp, #24]
 800b832:	2a01      	cmp	r2, #1
 800b834:	f300 80ba 	bgt.w	800b9ac <_dtoa_r+0x884>
 800b838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b83a:	2a00      	cmp	r2, #0
 800b83c:	f000 80b2 	beq.w	800b9a4 <_dtoa_r+0x87c>
 800b840:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b844:	9e07      	ldr	r6, [sp, #28]
 800b846:	9d04      	ldr	r5, [sp, #16]
 800b848:	9a04      	ldr	r2, [sp, #16]
 800b84a:	441a      	add	r2, r3
 800b84c:	9204      	str	r2, [sp, #16]
 800b84e:	9a05      	ldr	r2, [sp, #20]
 800b850:	2101      	movs	r1, #1
 800b852:	441a      	add	r2, r3
 800b854:	4620      	mov	r0, r4
 800b856:	9205      	str	r2, [sp, #20]
 800b858:	f001 f950 	bl	800cafc <__i2b>
 800b85c:	4607      	mov	r7, r0
 800b85e:	2d00      	cmp	r5, #0
 800b860:	dd0c      	ble.n	800b87c <_dtoa_r+0x754>
 800b862:	9b05      	ldr	r3, [sp, #20]
 800b864:	2b00      	cmp	r3, #0
 800b866:	dd09      	ble.n	800b87c <_dtoa_r+0x754>
 800b868:	42ab      	cmp	r3, r5
 800b86a:	9a04      	ldr	r2, [sp, #16]
 800b86c:	bfa8      	it	ge
 800b86e:	462b      	movge	r3, r5
 800b870:	1ad2      	subs	r2, r2, r3
 800b872:	9204      	str	r2, [sp, #16]
 800b874:	9a05      	ldr	r2, [sp, #20]
 800b876:	1aed      	subs	r5, r5, r3
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	9305      	str	r3, [sp, #20]
 800b87c:	9b07      	ldr	r3, [sp, #28]
 800b87e:	b31b      	cbz	r3, 800b8c8 <_dtoa_r+0x7a0>
 800b880:	9b08      	ldr	r3, [sp, #32]
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 80af 	beq.w	800b9e6 <_dtoa_r+0x8be>
 800b888:	2e00      	cmp	r6, #0
 800b88a:	dd13      	ble.n	800b8b4 <_dtoa_r+0x78c>
 800b88c:	4639      	mov	r1, r7
 800b88e:	4632      	mov	r2, r6
 800b890:	4620      	mov	r0, r4
 800b892:	f001 f9f3 	bl	800cc7c <__pow5mult>
 800b896:	ee18 2a10 	vmov	r2, s16
 800b89a:	4601      	mov	r1, r0
 800b89c:	4607      	mov	r7, r0
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f001 f942 	bl	800cb28 <__multiply>
 800b8a4:	ee18 1a10 	vmov	r1, s16
 800b8a8:	4680      	mov	r8, r0
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f001 f824 	bl	800c8f8 <_Bfree>
 800b8b0:	ee08 8a10 	vmov	s16, r8
 800b8b4:	9b07      	ldr	r3, [sp, #28]
 800b8b6:	1b9a      	subs	r2, r3, r6
 800b8b8:	d006      	beq.n	800b8c8 <_dtoa_r+0x7a0>
 800b8ba:	ee18 1a10 	vmov	r1, s16
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f001 f9dc 	bl	800cc7c <__pow5mult>
 800b8c4:	ee08 0a10 	vmov	s16, r0
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f001 f916 	bl	800cafc <__i2b>
 800b8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	4606      	mov	r6, r0
 800b8d6:	f340 8088 	ble.w	800b9ea <_dtoa_r+0x8c2>
 800b8da:	461a      	mov	r2, r3
 800b8dc:	4601      	mov	r1, r0
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f001 f9cc 	bl	800cc7c <__pow5mult>
 800b8e4:	9b06      	ldr	r3, [sp, #24]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	f340 8081 	ble.w	800b9f0 <_dtoa_r+0x8c8>
 800b8ee:	f04f 0800 	mov.w	r8, #0
 800b8f2:	6933      	ldr	r3, [r6, #16]
 800b8f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b8f8:	6918      	ldr	r0, [r3, #16]
 800b8fa:	f001 f8af 	bl	800ca5c <__hi0bits>
 800b8fe:	f1c0 0020 	rsb	r0, r0, #32
 800b902:	9b05      	ldr	r3, [sp, #20]
 800b904:	4418      	add	r0, r3
 800b906:	f010 001f 	ands.w	r0, r0, #31
 800b90a:	f000 8092 	beq.w	800ba32 <_dtoa_r+0x90a>
 800b90e:	f1c0 0320 	rsb	r3, r0, #32
 800b912:	2b04      	cmp	r3, #4
 800b914:	f340 808a 	ble.w	800ba2c <_dtoa_r+0x904>
 800b918:	f1c0 001c 	rsb	r0, r0, #28
 800b91c:	9b04      	ldr	r3, [sp, #16]
 800b91e:	4403      	add	r3, r0
 800b920:	9304      	str	r3, [sp, #16]
 800b922:	9b05      	ldr	r3, [sp, #20]
 800b924:	4403      	add	r3, r0
 800b926:	4405      	add	r5, r0
 800b928:	9305      	str	r3, [sp, #20]
 800b92a:	9b04      	ldr	r3, [sp, #16]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	dd07      	ble.n	800b940 <_dtoa_r+0x818>
 800b930:	ee18 1a10 	vmov	r1, s16
 800b934:	461a      	mov	r2, r3
 800b936:	4620      	mov	r0, r4
 800b938:	f001 f9fa 	bl	800cd30 <__lshift>
 800b93c:	ee08 0a10 	vmov	s16, r0
 800b940:	9b05      	ldr	r3, [sp, #20]
 800b942:	2b00      	cmp	r3, #0
 800b944:	dd05      	ble.n	800b952 <_dtoa_r+0x82a>
 800b946:	4631      	mov	r1, r6
 800b948:	461a      	mov	r2, r3
 800b94a:	4620      	mov	r0, r4
 800b94c:	f001 f9f0 	bl	800cd30 <__lshift>
 800b950:	4606      	mov	r6, r0
 800b952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b954:	2b00      	cmp	r3, #0
 800b956:	d06e      	beq.n	800ba36 <_dtoa_r+0x90e>
 800b958:	ee18 0a10 	vmov	r0, s16
 800b95c:	4631      	mov	r1, r6
 800b95e:	f001 fa57 	bl	800ce10 <__mcmp>
 800b962:	2800      	cmp	r0, #0
 800b964:	da67      	bge.n	800ba36 <_dtoa_r+0x90e>
 800b966:	9b00      	ldr	r3, [sp, #0]
 800b968:	3b01      	subs	r3, #1
 800b96a:	ee18 1a10 	vmov	r1, s16
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	220a      	movs	r2, #10
 800b972:	2300      	movs	r3, #0
 800b974:	4620      	mov	r0, r4
 800b976:	f000 ffe1 	bl	800c93c <__multadd>
 800b97a:	9b08      	ldr	r3, [sp, #32]
 800b97c:	ee08 0a10 	vmov	s16, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	f000 81b1 	beq.w	800bce8 <_dtoa_r+0xbc0>
 800b986:	2300      	movs	r3, #0
 800b988:	4639      	mov	r1, r7
 800b98a:	220a      	movs	r2, #10
 800b98c:	4620      	mov	r0, r4
 800b98e:	f000 ffd5 	bl	800c93c <__multadd>
 800b992:	9b02      	ldr	r3, [sp, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	4607      	mov	r7, r0
 800b998:	f300 808e 	bgt.w	800bab8 <_dtoa_r+0x990>
 800b99c:	9b06      	ldr	r3, [sp, #24]
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	dc51      	bgt.n	800ba46 <_dtoa_r+0x91e>
 800b9a2:	e089      	b.n	800bab8 <_dtoa_r+0x990>
 800b9a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9aa:	e74b      	b.n	800b844 <_dtoa_r+0x71c>
 800b9ac:	9b03      	ldr	r3, [sp, #12]
 800b9ae:	1e5e      	subs	r6, r3, #1
 800b9b0:	9b07      	ldr	r3, [sp, #28]
 800b9b2:	42b3      	cmp	r3, r6
 800b9b4:	bfbf      	itttt	lt
 800b9b6:	9b07      	ldrlt	r3, [sp, #28]
 800b9b8:	9607      	strlt	r6, [sp, #28]
 800b9ba:	1af2      	sublt	r2, r6, r3
 800b9bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b9be:	bfb6      	itet	lt
 800b9c0:	189b      	addlt	r3, r3, r2
 800b9c2:	1b9e      	subge	r6, r3, r6
 800b9c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b9c6:	9b03      	ldr	r3, [sp, #12]
 800b9c8:	bfb8      	it	lt
 800b9ca:	2600      	movlt	r6, #0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	bfb7      	itett	lt
 800b9d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b9d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b9d8:	1a9d      	sublt	r5, r3, r2
 800b9da:	2300      	movlt	r3, #0
 800b9dc:	e734      	b.n	800b848 <_dtoa_r+0x720>
 800b9de:	9e07      	ldr	r6, [sp, #28]
 800b9e0:	9d04      	ldr	r5, [sp, #16]
 800b9e2:	9f08      	ldr	r7, [sp, #32]
 800b9e4:	e73b      	b.n	800b85e <_dtoa_r+0x736>
 800b9e6:	9a07      	ldr	r2, [sp, #28]
 800b9e8:	e767      	b.n	800b8ba <_dtoa_r+0x792>
 800b9ea:	9b06      	ldr	r3, [sp, #24]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	dc18      	bgt.n	800ba22 <_dtoa_r+0x8fa>
 800b9f0:	f1ba 0f00 	cmp.w	sl, #0
 800b9f4:	d115      	bne.n	800ba22 <_dtoa_r+0x8fa>
 800b9f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9fa:	b993      	cbnz	r3, 800ba22 <_dtoa_r+0x8fa>
 800b9fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba00:	0d1b      	lsrs	r3, r3, #20
 800ba02:	051b      	lsls	r3, r3, #20
 800ba04:	b183      	cbz	r3, 800ba28 <_dtoa_r+0x900>
 800ba06:	9b04      	ldr	r3, [sp, #16]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	9304      	str	r3, [sp, #16]
 800ba0c:	9b05      	ldr	r3, [sp, #20]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	9305      	str	r3, [sp, #20]
 800ba12:	f04f 0801 	mov.w	r8, #1
 800ba16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f47f af6a 	bne.w	800b8f2 <_dtoa_r+0x7ca>
 800ba1e:	2001      	movs	r0, #1
 800ba20:	e76f      	b.n	800b902 <_dtoa_r+0x7da>
 800ba22:	f04f 0800 	mov.w	r8, #0
 800ba26:	e7f6      	b.n	800ba16 <_dtoa_r+0x8ee>
 800ba28:	4698      	mov	r8, r3
 800ba2a:	e7f4      	b.n	800ba16 <_dtoa_r+0x8ee>
 800ba2c:	f43f af7d 	beq.w	800b92a <_dtoa_r+0x802>
 800ba30:	4618      	mov	r0, r3
 800ba32:	301c      	adds	r0, #28
 800ba34:	e772      	b.n	800b91c <_dtoa_r+0x7f4>
 800ba36:	9b03      	ldr	r3, [sp, #12]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	dc37      	bgt.n	800baac <_dtoa_r+0x984>
 800ba3c:	9b06      	ldr	r3, [sp, #24]
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	dd34      	ble.n	800baac <_dtoa_r+0x984>
 800ba42:	9b03      	ldr	r3, [sp, #12]
 800ba44:	9302      	str	r3, [sp, #8]
 800ba46:	9b02      	ldr	r3, [sp, #8]
 800ba48:	b96b      	cbnz	r3, 800ba66 <_dtoa_r+0x93e>
 800ba4a:	4631      	mov	r1, r6
 800ba4c:	2205      	movs	r2, #5
 800ba4e:	4620      	mov	r0, r4
 800ba50:	f000 ff74 	bl	800c93c <__multadd>
 800ba54:	4601      	mov	r1, r0
 800ba56:	4606      	mov	r6, r0
 800ba58:	ee18 0a10 	vmov	r0, s16
 800ba5c:	f001 f9d8 	bl	800ce10 <__mcmp>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	f73f adbb 	bgt.w	800b5dc <_dtoa_r+0x4b4>
 800ba66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba68:	9d01      	ldr	r5, [sp, #4]
 800ba6a:	43db      	mvns	r3, r3
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	f04f 0800 	mov.w	r8, #0
 800ba72:	4631      	mov	r1, r6
 800ba74:	4620      	mov	r0, r4
 800ba76:	f000 ff3f 	bl	800c8f8 <_Bfree>
 800ba7a:	2f00      	cmp	r7, #0
 800ba7c:	f43f aea4 	beq.w	800b7c8 <_dtoa_r+0x6a0>
 800ba80:	f1b8 0f00 	cmp.w	r8, #0
 800ba84:	d005      	beq.n	800ba92 <_dtoa_r+0x96a>
 800ba86:	45b8      	cmp	r8, r7
 800ba88:	d003      	beq.n	800ba92 <_dtoa_r+0x96a>
 800ba8a:	4641      	mov	r1, r8
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f000 ff33 	bl	800c8f8 <_Bfree>
 800ba92:	4639      	mov	r1, r7
 800ba94:	4620      	mov	r0, r4
 800ba96:	f000 ff2f 	bl	800c8f8 <_Bfree>
 800ba9a:	e695      	b.n	800b7c8 <_dtoa_r+0x6a0>
 800ba9c:	2600      	movs	r6, #0
 800ba9e:	4637      	mov	r7, r6
 800baa0:	e7e1      	b.n	800ba66 <_dtoa_r+0x93e>
 800baa2:	9700      	str	r7, [sp, #0]
 800baa4:	4637      	mov	r7, r6
 800baa6:	e599      	b.n	800b5dc <_dtoa_r+0x4b4>
 800baa8:	40240000 	.word	0x40240000
 800baac:	9b08      	ldr	r3, [sp, #32]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f000 80ca 	beq.w	800bc48 <_dtoa_r+0xb20>
 800bab4:	9b03      	ldr	r3, [sp, #12]
 800bab6:	9302      	str	r3, [sp, #8]
 800bab8:	2d00      	cmp	r5, #0
 800baba:	dd05      	ble.n	800bac8 <_dtoa_r+0x9a0>
 800babc:	4639      	mov	r1, r7
 800babe:	462a      	mov	r2, r5
 800bac0:	4620      	mov	r0, r4
 800bac2:	f001 f935 	bl	800cd30 <__lshift>
 800bac6:	4607      	mov	r7, r0
 800bac8:	f1b8 0f00 	cmp.w	r8, #0
 800bacc:	d05b      	beq.n	800bb86 <_dtoa_r+0xa5e>
 800bace:	6879      	ldr	r1, [r7, #4]
 800bad0:	4620      	mov	r0, r4
 800bad2:	f000 fed1 	bl	800c878 <_Balloc>
 800bad6:	4605      	mov	r5, r0
 800bad8:	b928      	cbnz	r0, 800bae6 <_dtoa_r+0x9be>
 800bada:	4b87      	ldr	r3, [pc, #540]	; (800bcf8 <_dtoa_r+0xbd0>)
 800badc:	4602      	mov	r2, r0
 800bade:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bae2:	f7ff bb3b 	b.w	800b15c <_dtoa_r+0x34>
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	3202      	adds	r2, #2
 800baea:	0092      	lsls	r2, r2, #2
 800baec:	f107 010c 	add.w	r1, r7, #12
 800baf0:	300c      	adds	r0, #12
 800baf2:	f000 feb3 	bl	800c85c <memcpy>
 800baf6:	2201      	movs	r2, #1
 800baf8:	4629      	mov	r1, r5
 800bafa:	4620      	mov	r0, r4
 800bafc:	f001 f918 	bl	800cd30 <__lshift>
 800bb00:	9b01      	ldr	r3, [sp, #4]
 800bb02:	f103 0901 	add.w	r9, r3, #1
 800bb06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	9305      	str	r3, [sp, #20]
 800bb0e:	f00a 0301 	and.w	r3, sl, #1
 800bb12:	46b8      	mov	r8, r7
 800bb14:	9304      	str	r3, [sp, #16]
 800bb16:	4607      	mov	r7, r0
 800bb18:	4631      	mov	r1, r6
 800bb1a:	ee18 0a10 	vmov	r0, s16
 800bb1e:	f7ff fa77 	bl	800b010 <quorem>
 800bb22:	4641      	mov	r1, r8
 800bb24:	9002      	str	r0, [sp, #8]
 800bb26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb2a:	ee18 0a10 	vmov	r0, s16
 800bb2e:	f001 f96f 	bl	800ce10 <__mcmp>
 800bb32:	463a      	mov	r2, r7
 800bb34:	9003      	str	r0, [sp, #12]
 800bb36:	4631      	mov	r1, r6
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f001 f985 	bl	800ce48 <__mdiff>
 800bb3e:	68c2      	ldr	r2, [r0, #12]
 800bb40:	f109 3bff 	add.w	fp, r9, #4294967295
 800bb44:	4605      	mov	r5, r0
 800bb46:	bb02      	cbnz	r2, 800bb8a <_dtoa_r+0xa62>
 800bb48:	4601      	mov	r1, r0
 800bb4a:	ee18 0a10 	vmov	r0, s16
 800bb4e:	f001 f95f 	bl	800ce10 <__mcmp>
 800bb52:	4602      	mov	r2, r0
 800bb54:	4629      	mov	r1, r5
 800bb56:	4620      	mov	r0, r4
 800bb58:	9207      	str	r2, [sp, #28]
 800bb5a:	f000 fecd 	bl	800c8f8 <_Bfree>
 800bb5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bb62:	ea43 0102 	orr.w	r1, r3, r2
 800bb66:	9b04      	ldr	r3, [sp, #16]
 800bb68:	430b      	orrs	r3, r1
 800bb6a:	464d      	mov	r5, r9
 800bb6c:	d10f      	bne.n	800bb8e <_dtoa_r+0xa66>
 800bb6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb72:	d02a      	beq.n	800bbca <_dtoa_r+0xaa2>
 800bb74:	9b03      	ldr	r3, [sp, #12]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	dd02      	ble.n	800bb80 <_dtoa_r+0xa58>
 800bb7a:	9b02      	ldr	r3, [sp, #8]
 800bb7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bb80:	f88b a000 	strb.w	sl, [fp]
 800bb84:	e775      	b.n	800ba72 <_dtoa_r+0x94a>
 800bb86:	4638      	mov	r0, r7
 800bb88:	e7ba      	b.n	800bb00 <_dtoa_r+0x9d8>
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	e7e2      	b.n	800bb54 <_dtoa_r+0xa2c>
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	db04      	blt.n	800bb9e <_dtoa_r+0xa76>
 800bb94:	9906      	ldr	r1, [sp, #24]
 800bb96:	430b      	orrs	r3, r1
 800bb98:	9904      	ldr	r1, [sp, #16]
 800bb9a:	430b      	orrs	r3, r1
 800bb9c:	d122      	bne.n	800bbe4 <_dtoa_r+0xabc>
 800bb9e:	2a00      	cmp	r2, #0
 800bba0:	ddee      	ble.n	800bb80 <_dtoa_r+0xa58>
 800bba2:	ee18 1a10 	vmov	r1, s16
 800bba6:	2201      	movs	r2, #1
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f001 f8c1 	bl	800cd30 <__lshift>
 800bbae:	4631      	mov	r1, r6
 800bbb0:	ee08 0a10 	vmov	s16, r0
 800bbb4:	f001 f92c 	bl	800ce10 <__mcmp>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	dc03      	bgt.n	800bbc4 <_dtoa_r+0xa9c>
 800bbbc:	d1e0      	bne.n	800bb80 <_dtoa_r+0xa58>
 800bbbe:	f01a 0f01 	tst.w	sl, #1
 800bbc2:	d0dd      	beq.n	800bb80 <_dtoa_r+0xa58>
 800bbc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbc8:	d1d7      	bne.n	800bb7a <_dtoa_r+0xa52>
 800bbca:	2339      	movs	r3, #57	; 0x39
 800bbcc:	f88b 3000 	strb.w	r3, [fp]
 800bbd0:	462b      	mov	r3, r5
 800bbd2:	461d      	mov	r5, r3
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbda:	2a39      	cmp	r2, #57	; 0x39
 800bbdc:	d071      	beq.n	800bcc2 <_dtoa_r+0xb9a>
 800bbde:	3201      	adds	r2, #1
 800bbe0:	701a      	strb	r2, [r3, #0]
 800bbe2:	e746      	b.n	800ba72 <_dtoa_r+0x94a>
 800bbe4:	2a00      	cmp	r2, #0
 800bbe6:	dd07      	ble.n	800bbf8 <_dtoa_r+0xad0>
 800bbe8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbec:	d0ed      	beq.n	800bbca <_dtoa_r+0xaa2>
 800bbee:	f10a 0301 	add.w	r3, sl, #1
 800bbf2:	f88b 3000 	strb.w	r3, [fp]
 800bbf6:	e73c      	b.n	800ba72 <_dtoa_r+0x94a>
 800bbf8:	9b05      	ldr	r3, [sp, #20]
 800bbfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bbfe:	4599      	cmp	r9, r3
 800bc00:	d047      	beq.n	800bc92 <_dtoa_r+0xb6a>
 800bc02:	ee18 1a10 	vmov	r1, s16
 800bc06:	2300      	movs	r3, #0
 800bc08:	220a      	movs	r2, #10
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	f000 fe96 	bl	800c93c <__multadd>
 800bc10:	45b8      	cmp	r8, r7
 800bc12:	ee08 0a10 	vmov	s16, r0
 800bc16:	f04f 0300 	mov.w	r3, #0
 800bc1a:	f04f 020a 	mov.w	r2, #10
 800bc1e:	4641      	mov	r1, r8
 800bc20:	4620      	mov	r0, r4
 800bc22:	d106      	bne.n	800bc32 <_dtoa_r+0xb0a>
 800bc24:	f000 fe8a 	bl	800c93c <__multadd>
 800bc28:	4680      	mov	r8, r0
 800bc2a:	4607      	mov	r7, r0
 800bc2c:	f109 0901 	add.w	r9, r9, #1
 800bc30:	e772      	b.n	800bb18 <_dtoa_r+0x9f0>
 800bc32:	f000 fe83 	bl	800c93c <__multadd>
 800bc36:	4639      	mov	r1, r7
 800bc38:	4680      	mov	r8, r0
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	220a      	movs	r2, #10
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 fe7c 	bl	800c93c <__multadd>
 800bc44:	4607      	mov	r7, r0
 800bc46:	e7f1      	b.n	800bc2c <_dtoa_r+0xb04>
 800bc48:	9b03      	ldr	r3, [sp, #12]
 800bc4a:	9302      	str	r3, [sp, #8]
 800bc4c:	9d01      	ldr	r5, [sp, #4]
 800bc4e:	ee18 0a10 	vmov	r0, s16
 800bc52:	4631      	mov	r1, r6
 800bc54:	f7ff f9dc 	bl	800b010 <quorem>
 800bc58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc5c:	9b01      	ldr	r3, [sp, #4]
 800bc5e:	f805 ab01 	strb.w	sl, [r5], #1
 800bc62:	1aea      	subs	r2, r5, r3
 800bc64:	9b02      	ldr	r3, [sp, #8]
 800bc66:	4293      	cmp	r3, r2
 800bc68:	dd09      	ble.n	800bc7e <_dtoa_r+0xb56>
 800bc6a:	ee18 1a10 	vmov	r1, s16
 800bc6e:	2300      	movs	r3, #0
 800bc70:	220a      	movs	r2, #10
 800bc72:	4620      	mov	r0, r4
 800bc74:	f000 fe62 	bl	800c93c <__multadd>
 800bc78:	ee08 0a10 	vmov	s16, r0
 800bc7c:	e7e7      	b.n	800bc4e <_dtoa_r+0xb26>
 800bc7e:	9b02      	ldr	r3, [sp, #8]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	bfc8      	it	gt
 800bc84:	461d      	movgt	r5, r3
 800bc86:	9b01      	ldr	r3, [sp, #4]
 800bc88:	bfd8      	it	le
 800bc8a:	2501      	movle	r5, #1
 800bc8c:	441d      	add	r5, r3
 800bc8e:	f04f 0800 	mov.w	r8, #0
 800bc92:	ee18 1a10 	vmov	r1, s16
 800bc96:	2201      	movs	r2, #1
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f001 f849 	bl	800cd30 <__lshift>
 800bc9e:	4631      	mov	r1, r6
 800bca0:	ee08 0a10 	vmov	s16, r0
 800bca4:	f001 f8b4 	bl	800ce10 <__mcmp>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	dc91      	bgt.n	800bbd0 <_dtoa_r+0xaa8>
 800bcac:	d102      	bne.n	800bcb4 <_dtoa_r+0xb8c>
 800bcae:	f01a 0f01 	tst.w	sl, #1
 800bcb2:	d18d      	bne.n	800bbd0 <_dtoa_r+0xaa8>
 800bcb4:	462b      	mov	r3, r5
 800bcb6:	461d      	mov	r5, r3
 800bcb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcbc:	2a30      	cmp	r2, #48	; 0x30
 800bcbe:	d0fa      	beq.n	800bcb6 <_dtoa_r+0xb8e>
 800bcc0:	e6d7      	b.n	800ba72 <_dtoa_r+0x94a>
 800bcc2:	9a01      	ldr	r2, [sp, #4]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d184      	bne.n	800bbd2 <_dtoa_r+0xaaa>
 800bcc8:	9b00      	ldr	r3, [sp, #0]
 800bcca:	3301      	adds	r3, #1
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	2331      	movs	r3, #49	; 0x31
 800bcd0:	7013      	strb	r3, [r2, #0]
 800bcd2:	e6ce      	b.n	800ba72 <_dtoa_r+0x94a>
 800bcd4:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <_dtoa_r+0xbd4>)
 800bcd6:	f7ff ba95 	b.w	800b204 <_dtoa_r+0xdc>
 800bcda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f47f aa6e 	bne.w	800b1be <_dtoa_r+0x96>
 800bce2:	4b07      	ldr	r3, [pc, #28]	; (800bd00 <_dtoa_r+0xbd8>)
 800bce4:	f7ff ba8e 	b.w	800b204 <_dtoa_r+0xdc>
 800bce8:	9b02      	ldr	r3, [sp, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	dcae      	bgt.n	800bc4c <_dtoa_r+0xb24>
 800bcee:	9b06      	ldr	r3, [sp, #24]
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	f73f aea8 	bgt.w	800ba46 <_dtoa_r+0x91e>
 800bcf6:	e7a9      	b.n	800bc4c <_dtoa_r+0xb24>
 800bcf8:	0800f110 	.word	0x0800f110
 800bcfc:	0800ef14 	.word	0x0800ef14
 800bd00:	0800f091 	.word	0x0800f091

0800bd04 <__sflush_r>:
 800bd04:	898a      	ldrh	r2, [r1, #12]
 800bd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd0a:	4605      	mov	r5, r0
 800bd0c:	0710      	lsls	r0, r2, #28
 800bd0e:	460c      	mov	r4, r1
 800bd10:	d458      	bmi.n	800bdc4 <__sflush_r+0xc0>
 800bd12:	684b      	ldr	r3, [r1, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dc05      	bgt.n	800bd24 <__sflush_r+0x20>
 800bd18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	dc02      	bgt.n	800bd24 <__sflush_r+0x20>
 800bd1e:	2000      	movs	r0, #0
 800bd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd26:	2e00      	cmp	r6, #0
 800bd28:	d0f9      	beq.n	800bd1e <__sflush_r+0x1a>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd30:	682f      	ldr	r7, [r5, #0]
 800bd32:	602b      	str	r3, [r5, #0]
 800bd34:	d032      	beq.n	800bd9c <__sflush_r+0x98>
 800bd36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	075a      	lsls	r2, r3, #29
 800bd3c:	d505      	bpl.n	800bd4a <__sflush_r+0x46>
 800bd3e:	6863      	ldr	r3, [r4, #4]
 800bd40:	1ac0      	subs	r0, r0, r3
 800bd42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd44:	b10b      	cbz	r3, 800bd4a <__sflush_r+0x46>
 800bd46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd48:	1ac0      	subs	r0, r0, r3
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd50:	6a21      	ldr	r1, [r4, #32]
 800bd52:	4628      	mov	r0, r5
 800bd54:	47b0      	blx	r6
 800bd56:	1c43      	adds	r3, r0, #1
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	d106      	bne.n	800bd6a <__sflush_r+0x66>
 800bd5c:	6829      	ldr	r1, [r5, #0]
 800bd5e:	291d      	cmp	r1, #29
 800bd60:	d82c      	bhi.n	800bdbc <__sflush_r+0xb8>
 800bd62:	4a2a      	ldr	r2, [pc, #168]	; (800be0c <__sflush_r+0x108>)
 800bd64:	40ca      	lsrs	r2, r1
 800bd66:	07d6      	lsls	r6, r2, #31
 800bd68:	d528      	bpl.n	800bdbc <__sflush_r+0xb8>
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	6062      	str	r2, [r4, #4]
 800bd6e:	04d9      	lsls	r1, r3, #19
 800bd70:	6922      	ldr	r2, [r4, #16]
 800bd72:	6022      	str	r2, [r4, #0]
 800bd74:	d504      	bpl.n	800bd80 <__sflush_r+0x7c>
 800bd76:	1c42      	adds	r2, r0, #1
 800bd78:	d101      	bne.n	800bd7e <__sflush_r+0x7a>
 800bd7a:	682b      	ldr	r3, [r5, #0]
 800bd7c:	b903      	cbnz	r3, 800bd80 <__sflush_r+0x7c>
 800bd7e:	6560      	str	r0, [r4, #84]	; 0x54
 800bd80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd82:	602f      	str	r7, [r5, #0]
 800bd84:	2900      	cmp	r1, #0
 800bd86:	d0ca      	beq.n	800bd1e <__sflush_r+0x1a>
 800bd88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd8c:	4299      	cmp	r1, r3
 800bd8e:	d002      	beq.n	800bd96 <__sflush_r+0x92>
 800bd90:	4628      	mov	r0, r5
 800bd92:	f001 fa49 	bl	800d228 <_free_r>
 800bd96:	2000      	movs	r0, #0
 800bd98:	6360      	str	r0, [r4, #52]	; 0x34
 800bd9a:	e7c1      	b.n	800bd20 <__sflush_r+0x1c>
 800bd9c:	6a21      	ldr	r1, [r4, #32]
 800bd9e:	2301      	movs	r3, #1
 800bda0:	4628      	mov	r0, r5
 800bda2:	47b0      	blx	r6
 800bda4:	1c41      	adds	r1, r0, #1
 800bda6:	d1c7      	bne.n	800bd38 <__sflush_r+0x34>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d0c4      	beq.n	800bd38 <__sflush_r+0x34>
 800bdae:	2b1d      	cmp	r3, #29
 800bdb0:	d001      	beq.n	800bdb6 <__sflush_r+0xb2>
 800bdb2:	2b16      	cmp	r3, #22
 800bdb4:	d101      	bne.n	800bdba <__sflush_r+0xb6>
 800bdb6:	602f      	str	r7, [r5, #0]
 800bdb8:	e7b1      	b.n	800bd1e <__sflush_r+0x1a>
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdc0:	81a3      	strh	r3, [r4, #12]
 800bdc2:	e7ad      	b.n	800bd20 <__sflush_r+0x1c>
 800bdc4:	690f      	ldr	r7, [r1, #16]
 800bdc6:	2f00      	cmp	r7, #0
 800bdc8:	d0a9      	beq.n	800bd1e <__sflush_r+0x1a>
 800bdca:	0793      	lsls	r3, r2, #30
 800bdcc:	680e      	ldr	r6, [r1, #0]
 800bdce:	bf08      	it	eq
 800bdd0:	694b      	ldreq	r3, [r1, #20]
 800bdd2:	600f      	str	r7, [r1, #0]
 800bdd4:	bf18      	it	ne
 800bdd6:	2300      	movne	r3, #0
 800bdd8:	eba6 0807 	sub.w	r8, r6, r7
 800bddc:	608b      	str	r3, [r1, #8]
 800bdde:	f1b8 0f00 	cmp.w	r8, #0
 800bde2:	dd9c      	ble.n	800bd1e <__sflush_r+0x1a>
 800bde4:	6a21      	ldr	r1, [r4, #32]
 800bde6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bde8:	4643      	mov	r3, r8
 800bdea:	463a      	mov	r2, r7
 800bdec:	4628      	mov	r0, r5
 800bdee:	47b0      	blx	r6
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	dc06      	bgt.n	800be02 <__sflush_r+0xfe>
 800bdf4:	89a3      	ldrh	r3, [r4, #12]
 800bdf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdfa:	81a3      	strh	r3, [r4, #12]
 800bdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800be00:	e78e      	b.n	800bd20 <__sflush_r+0x1c>
 800be02:	4407      	add	r7, r0
 800be04:	eba8 0800 	sub.w	r8, r8, r0
 800be08:	e7e9      	b.n	800bdde <__sflush_r+0xda>
 800be0a:	bf00      	nop
 800be0c:	20400001 	.word	0x20400001

0800be10 <_fflush_r>:
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	690b      	ldr	r3, [r1, #16]
 800be14:	4605      	mov	r5, r0
 800be16:	460c      	mov	r4, r1
 800be18:	b913      	cbnz	r3, 800be20 <_fflush_r+0x10>
 800be1a:	2500      	movs	r5, #0
 800be1c:	4628      	mov	r0, r5
 800be1e:	bd38      	pop	{r3, r4, r5, pc}
 800be20:	b118      	cbz	r0, 800be2a <_fflush_r+0x1a>
 800be22:	6983      	ldr	r3, [r0, #24]
 800be24:	b90b      	cbnz	r3, 800be2a <_fflush_r+0x1a>
 800be26:	f000 f887 	bl	800bf38 <__sinit>
 800be2a:	4b14      	ldr	r3, [pc, #80]	; (800be7c <_fflush_r+0x6c>)
 800be2c:	429c      	cmp	r4, r3
 800be2e:	d11b      	bne.n	800be68 <_fflush_r+0x58>
 800be30:	686c      	ldr	r4, [r5, #4]
 800be32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d0ef      	beq.n	800be1a <_fflush_r+0xa>
 800be3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be3c:	07d0      	lsls	r0, r2, #31
 800be3e:	d404      	bmi.n	800be4a <_fflush_r+0x3a>
 800be40:	0599      	lsls	r1, r3, #22
 800be42:	d402      	bmi.n	800be4a <_fflush_r+0x3a>
 800be44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be46:	f000 fc88 	bl	800c75a <__retarget_lock_acquire_recursive>
 800be4a:	4628      	mov	r0, r5
 800be4c:	4621      	mov	r1, r4
 800be4e:	f7ff ff59 	bl	800bd04 <__sflush_r>
 800be52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be54:	07da      	lsls	r2, r3, #31
 800be56:	4605      	mov	r5, r0
 800be58:	d4e0      	bmi.n	800be1c <_fflush_r+0xc>
 800be5a:	89a3      	ldrh	r3, [r4, #12]
 800be5c:	059b      	lsls	r3, r3, #22
 800be5e:	d4dd      	bmi.n	800be1c <_fflush_r+0xc>
 800be60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be62:	f000 fc7b 	bl	800c75c <__retarget_lock_release_recursive>
 800be66:	e7d9      	b.n	800be1c <_fflush_r+0xc>
 800be68:	4b05      	ldr	r3, [pc, #20]	; (800be80 <_fflush_r+0x70>)
 800be6a:	429c      	cmp	r4, r3
 800be6c:	d101      	bne.n	800be72 <_fflush_r+0x62>
 800be6e:	68ac      	ldr	r4, [r5, #8]
 800be70:	e7df      	b.n	800be32 <_fflush_r+0x22>
 800be72:	4b04      	ldr	r3, [pc, #16]	; (800be84 <_fflush_r+0x74>)
 800be74:	429c      	cmp	r4, r3
 800be76:	bf08      	it	eq
 800be78:	68ec      	ldreq	r4, [r5, #12]
 800be7a:	e7da      	b.n	800be32 <_fflush_r+0x22>
 800be7c:	0800f144 	.word	0x0800f144
 800be80:	0800f164 	.word	0x0800f164
 800be84:	0800f124 	.word	0x0800f124

0800be88 <std>:
 800be88:	2300      	movs	r3, #0
 800be8a:	b510      	push	{r4, lr}
 800be8c:	4604      	mov	r4, r0
 800be8e:	e9c0 3300 	strd	r3, r3, [r0]
 800be92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be96:	6083      	str	r3, [r0, #8]
 800be98:	8181      	strh	r1, [r0, #12]
 800be9a:	6643      	str	r3, [r0, #100]	; 0x64
 800be9c:	81c2      	strh	r2, [r0, #14]
 800be9e:	6183      	str	r3, [r0, #24]
 800bea0:	4619      	mov	r1, r3
 800bea2:	2208      	movs	r2, #8
 800bea4:	305c      	adds	r0, #92	; 0x5c
 800bea6:	f7fd fa99 	bl	80093dc <memset>
 800beaa:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <std+0x38>)
 800beac:	6263      	str	r3, [r4, #36]	; 0x24
 800beae:	4b05      	ldr	r3, [pc, #20]	; (800bec4 <std+0x3c>)
 800beb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800beb2:	4b05      	ldr	r3, [pc, #20]	; (800bec8 <std+0x40>)
 800beb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800beb6:	4b05      	ldr	r3, [pc, #20]	; (800becc <std+0x44>)
 800beb8:	6224      	str	r4, [r4, #32]
 800beba:	6323      	str	r3, [r4, #48]	; 0x30
 800bebc:	bd10      	pop	{r4, pc}
 800bebe:	bf00      	nop
 800bec0:	0800d6d1 	.word	0x0800d6d1
 800bec4:	0800d6f3 	.word	0x0800d6f3
 800bec8:	0800d72b 	.word	0x0800d72b
 800becc:	0800d74f 	.word	0x0800d74f

0800bed0 <_cleanup_r>:
 800bed0:	4901      	ldr	r1, [pc, #4]	; (800bed8 <_cleanup_r+0x8>)
 800bed2:	f000 b8af 	b.w	800c034 <_fwalk_reent>
 800bed6:	bf00      	nop
 800bed8:	0800be11 	.word	0x0800be11

0800bedc <__sfmoreglue>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	2268      	movs	r2, #104	; 0x68
 800bee0:	1e4d      	subs	r5, r1, #1
 800bee2:	4355      	muls	r5, r2
 800bee4:	460e      	mov	r6, r1
 800bee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800beea:	f001 fa09 	bl	800d300 <_malloc_r>
 800beee:	4604      	mov	r4, r0
 800bef0:	b140      	cbz	r0, 800bf04 <__sfmoreglue+0x28>
 800bef2:	2100      	movs	r1, #0
 800bef4:	e9c0 1600 	strd	r1, r6, [r0]
 800bef8:	300c      	adds	r0, #12
 800befa:	60a0      	str	r0, [r4, #8]
 800befc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf00:	f7fd fa6c 	bl	80093dc <memset>
 800bf04:	4620      	mov	r0, r4
 800bf06:	bd70      	pop	{r4, r5, r6, pc}

0800bf08 <__sfp_lock_acquire>:
 800bf08:	4801      	ldr	r0, [pc, #4]	; (800bf10 <__sfp_lock_acquire+0x8>)
 800bf0a:	f000 bc26 	b.w	800c75a <__retarget_lock_acquire_recursive>
 800bf0e:	bf00      	nop
 800bf10:	20000a9f 	.word	0x20000a9f

0800bf14 <__sfp_lock_release>:
 800bf14:	4801      	ldr	r0, [pc, #4]	; (800bf1c <__sfp_lock_release+0x8>)
 800bf16:	f000 bc21 	b.w	800c75c <__retarget_lock_release_recursive>
 800bf1a:	bf00      	nop
 800bf1c:	20000a9f 	.word	0x20000a9f

0800bf20 <__sinit_lock_acquire>:
 800bf20:	4801      	ldr	r0, [pc, #4]	; (800bf28 <__sinit_lock_acquire+0x8>)
 800bf22:	f000 bc1a 	b.w	800c75a <__retarget_lock_acquire_recursive>
 800bf26:	bf00      	nop
 800bf28:	20000aa0 	.word	0x20000aa0

0800bf2c <__sinit_lock_release>:
 800bf2c:	4801      	ldr	r0, [pc, #4]	; (800bf34 <__sinit_lock_release+0x8>)
 800bf2e:	f000 bc15 	b.w	800c75c <__retarget_lock_release_recursive>
 800bf32:	bf00      	nop
 800bf34:	20000aa0 	.word	0x20000aa0

0800bf38 <__sinit>:
 800bf38:	b510      	push	{r4, lr}
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	f7ff fff0 	bl	800bf20 <__sinit_lock_acquire>
 800bf40:	69a3      	ldr	r3, [r4, #24]
 800bf42:	b11b      	cbz	r3, 800bf4c <__sinit+0x14>
 800bf44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf48:	f7ff bff0 	b.w	800bf2c <__sinit_lock_release>
 800bf4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf50:	6523      	str	r3, [r4, #80]	; 0x50
 800bf52:	4b13      	ldr	r3, [pc, #76]	; (800bfa0 <__sinit+0x68>)
 800bf54:	4a13      	ldr	r2, [pc, #76]	; (800bfa4 <__sinit+0x6c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf5a:	42a3      	cmp	r3, r4
 800bf5c:	bf04      	itt	eq
 800bf5e:	2301      	moveq	r3, #1
 800bf60:	61a3      	streq	r3, [r4, #24]
 800bf62:	4620      	mov	r0, r4
 800bf64:	f000 f820 	bl	800bfa8 <__sfp>
 800bf68:	6060      	str	r0, [r4, #4]
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f000 f81c 	bl	800bfa8 <__sfp>
 800bf70:	60a0      	str	r0, [r4, #8]
 800bf72:	4620      	mov	r0, r4
 800bf74:	f000 f818 	bl	800bfa8 <__sfp>
 800bf78:	2200      	movs	r2, #0
 800bf7a:	60e0      	str	r0, [r4, #12]
 800bf7c:	2104      	movs	r1, #4
 800bf7e:	6860      	ldr	r0, [r4, #4]
 800bf80:	f7ff ff82 	bl	800be88 <std>
 800bf84:	68a0      	ldr	r0, [r4, #8]
 800bf86:	2201      	movs	r2, #1
 800bf88:	2109      	movs	r1, #9
 800bf8a:	f7ff ff7d 	bl	800be88 <std>
 800bf8e:	68e0      	ldr	r0, [r4, #12]
 800bf90:	2202      	movs	r2, #2
 800bf92:	2112      	movs	r1, #18
 800bf94:	f7ff ff78 	bl	800be88 <std>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	61a3      	str	r3, [r4, #24]
 800bf9c:	e7d2      	b.n	800bf44 <__sinit+0xc>
 800bf9e:	bf00      	nop
 800bfa0:	0800ef00 	.word	0x0800ef00
 800bfa4:	0800bed1 	.word	0x0800bed1

0800bfa8 <__sfp>:
 800bfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfaa:	4607      	mov	r7, r0
 800bfac:	f7ff ffac 	bl	800bf08 <__sfp_lock_acquire>
 800bfb0:	4b1e      	ldr	r3, [pc, #120]	; (800c02c <__sfp+0x84>)
 800bfb2:	681e      	ldr	r6, [r3, #0]
 800bfb4:	69b3      	ldr	r3, [r6, #24]
 800bfb6:	b913      	cbnz	r3, 800bfbe <__sfp+0x16>
 800bfb8:	4630      	mov	r0, r6
 800bfba:	f7ff ffbd 	bl	800bf38 <__sinit>
 800bfbe:	3648      	adds	r6, #72	; 0x48
 800bfc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	d503      	bpl.n	800bfd0 <__sfp+0x28>
 800bfc8:	6833      	ldr	r3, [r6, #0]
 800bfca:	b30b      	cbz	r3, 800c010 <__sfp+0x68>
 800bfcc:	6836      	ldr	r6, [r6, #0]
 800bfce:	e7f7      	b.n	800bfc0 <__sfp+0x18>
 800bfd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bfd4:	b9d5      	cbnz	r5, 800c00c <__sfp+0x64>
 800bfd6:	4b16      	ldr	r3, [pc, #88]	; (800c030 <__sfp+0x88>)
 800bfd8:	60e3      	str	r3, [r4, #12]
 800bfda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfde:	6665      	str	r5, [r4, #100]	; 0x64
 800bfe0:	f000 fbba 	bl	800c758 <__retarget_lock_init_recursive>
 800bfe4:	f7ff ff96 	bl	800bf14 <__sfp_lock_release>
 800bfe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bff0:	6025      	str	r5, [r4, #0]
 800bff2:	61a5      	str	r5, [r4, #24]
 800bff4:	2208      	movs	r2, #8
 800bff6:	4629      	mov	r1, r5
 800bff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bffc:	f7fd f9ee 	bl	80093dc <memset>
 800c000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c008:	4620      	mov	r0, r4
 800c00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c00c:	3468      	adds	r4, #104	; 0x68
 800c00e:	e7d9      	b.n	800bfc4 <__sfp+0x1c>
 800c010:	2104      	movs	r1, #4
 800c012:	4638      	mov	r0, r7
 800c014:	f7ff ff62 	bl	800bedc <__sfmoreglue>
 800c018:	4604      	mov	r4, r0
 800c01a:	6030      	str	r0, [r6, #0]
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d1d5      	bne.n	800bfcc <__sfp+0x24>
 800c020:	f7ff ff78 	bl	800bf14 <__sfp_lock_release>
 800c024:	230c      	movs	r3, #12
 800c026:	603b      	str	r3, [r7, #0]
 800c028:	e7ee      	b.n	800c008 <__sfp+0x60>
 800c02a:	bf00      	nop
 800c02c:	0800ef00 	.word	0x0800ef00
 800c030:	ffff0001 	.word	0xffff0001

0800c034 <_fwalk_reent>:
 800c034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c038:	4606      	mov	r6, r0
 800c03a:	4688      	mov	r8, r1
 800c03c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c040:	2700      	movs	r7, #0
 800c042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c046:	f1b9 0901 	subs.w	r9, r9, #1
 800c04a:	d505      	bpl.n	800c058 <_fwalk_reent+0x24>
 800c04c:	6824      	ldr	r4, [r4, #0]
 800c04e:	2c00      	cmp	r4, #0
 800c050:	d1f7      	bne.n	800c042 <_fwalk_reent+0xe>
 800c052:	4638      	mov	r0, r7
 800c054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c058:	89ab      	ldrh	r3, [r5, #12]
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d907      	bls.n	800c06e <_fwalk_reent+0x3a>
 800c05e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c062:	3301      	adds	r3, #1
 800c064:	d003      	beq.n	800c06e <_fwalk_reent+0x3a>
 800c066:	4629      	mov	r1, r5
 800c068:	4630      	mov	r0, r6
 800c06a:	47c0      	blx	r8
 800c06c:	4307      	orrs	r7, r0
 800c06e:	3568      	adds	r5, #104	; 0x68
 800c070:	e7e9      	b.n	800c046 <_fwalk_reent+0x12>

0800c072 <rshift>:
 800c072:	6903      	ldr	r3, [r0, #16]
 800c074:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c07c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c080:	f100 0414 	add.w	r4, r0, #20
 800c084:	dd45      	ble.n	800c112 <rshift+0xa0>
 800c086:	f011 011f 	ands.w	r1, r1, #31
 800c08a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c08e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c092:	d10c      	bne.n	800c0ae <rshift+0x3c>
 800c094:	f100 0710 	add.w	r7, r0, #16
 800c098:	4629      	mov	r1, r5
 800c09a:	42b1      	cmp	r1, r6
 800c09c:	d334      	bcc.n	800c108 <rshift+0x96>
 800c09e:	1a9b      	subs	r3, r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	1eea      	subs	r2, r5, #3
 800c0a4:	4296      	cmp	r6, r2
 800c0a6:	bf38      	it	cc
 800c0a8:	2300      	movcc	r3, #0
 800c0aa:	4423      	add	r3, r4
 800c0ac:	e015      	b.n	800c0da <rshift+0x68>
 800c0ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c0b2:	f1c1 0820 	rsb	r8, r1, #32
 800c0b6:	40cf      	lsrs	r7, r1
 800c0b8:	f105 0e04 	add.w	lr, r5, #4
 800c0bc:	46a1      	mov	r9, r4
 800c0be:	4576      	cmp	r6, lr
 800c0c0:	46f4      	mov	ip, lr
 800c0c2:	d815      	bhi.n	800c0f0 <rshift+0x7e>
 800c0c4:	1a9a      	subs	r2, r3, r2
 800c0c6:	0092      	lsls	r2, r2, #2
 800c0c8:	3a04      	subs	r2, #4
 800c0ca:	3501      	adds	r5, #1
 800c0cc:	42ae      	cmp	r6, r5
 800c0ce:	bf38      	it	cc
 800c0d0:	2200      	movcc	r2, #0
 800c0d2:	18a3      	adds	r3, r4, r2
 800c0d4:	50a7      	str	r7, [r4, r2]
 800c0d6:	b107      	cbz	r7, 800c0da <rshift+0x68>
 800c0d8:	3304      	adds	r3, #4
 800c0da:	1b1a      	subs	r2, r3, r4
 800c0dc:	42a3      	cmp	r3, r4
 800c0de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c0e2:	bf08      	it	eq
 800c0e4:	2300      	moveq	r3, #0
 800c0e6:	6102      	str	r2, [r0, #16]
 800c0e8:	bf08      	it	eq
 800c0ea:	6143      	streq	r3, [r0, #20]
 800c0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0f0:	f8dc c000 	ldr.w	ip, [ip]
 800c0f4:	fa0c fc08 	lsl.w	ip, ip, r8
 800c0f8:	ea4c 0707 	orr.w	r7, ip, r7
 800c0fc:	f849 7b04 	str.w	r7, [r9], #4
 800c100:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c104:	40cf      	lsrs	r7, r1
 800c106:	e7da      	b.n	800c0be <rshift+0x4c>
 800c108:	f851 cb04 	ldr.w	ip, [r1], #4
 800c10c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c110:	e7c3      	b.n	800c09a <rshift+0x28>
 800c112:	4623      	mov	r3, r4
 800c114:	e7e1      	b.n	800c0da <rshift+0x68>

0800c116 <__hexdig_fun>:
 800c116:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c11a:	2b09      	cmp	r3, #9
 800c11c:	d802      	bhi.n	800c124 <__hexdig_fun+0xe>
 800c11e:	3820      	subs	r0, #32
 800c120:	b2c0      	uxtb	r0, r0
 800c122:	4770      	bx	lr
 800c124:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c128:	2b05      	cmp	r3, #5
 800c12a:	d801      	bhi.n	800c130 <__hexdig_fun+0x1a>
 800c12c:	3847      	subs	r0, #71	; 0x47
 800c12e:	e7f7      	b.n	800c120 <__hexdig_fun+0xa>
 800c130:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c134:	2b05      	cmp	r3, #5
 800c136:	d801      	bhi.n	800c13c <__hexdig_fun+0x26>
 800c138:	3827      	subs	r0, #39	; 0x27
 800c13a:	e7f1      	b.n	800c120 <__hexdig_fun+0xa>
 800c13c:	2000      	movs	r0, #0
 800c13e:	4770      	bx	lr

0800c140 <__gethex>:
 800c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c144:	ed2d 8b02 	vpush	{d8}
 800c148:	b089      	sub	sp, #36	; 0x24
 800c14a:	ee08 0a10 	vmov	s16, r0
 800c14e:	9304      	str	r3, [sp, #16]
 800c150:	4bb4      	ldr	r3, [pc, #720]	; (800c424 <__gethex+0x2e4>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	9301      	str	r3, [sp, #4]
 800c156:	4618      	mov	r0, r3
 800c158:	468b      	mov	fp, r1
 800c15a:	4690      	mov	r8, r2
 800c15c:	f7f4 f838 	bl	80001d0 <strlen>
 800c160:	9b01      	ldr	r3, [sp, #4]
 800c162:	f8db 2000 	ldr.w	r2, [fp]
 800c166:	4403      	add	r3, r0
 800c168:	4682      	mov	sl, r0
 800c16a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c16e:	9305      	str	r3, [sp, #20]
 800c170:	1c93      	adds	r3, r2, #2
 800c172:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c176:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c17a:	32fe      	adds	r2, #254	; 0xfe
 800c17c:	18d1      	adds	r1, r2, r3
 800c17e:	461f      	mov	r7, r3
 800c180:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c184:	9100      	str	r1, [sp, #0]
 800c186:	2830      	cmp	r0, #48	; 0x30
 800c188:	d0f8      	beq.n	800c17c <__gethex+0x3c>
 800c18a:	f7ff ffc4 	bl	800c116 <__hexdig_fun>
 800c18e:	4604      	mov	r4, r0
 800c190:	2800      	cmp	r0, #0
 800c192:	d13a      	bne.n	800c20a <__gethex+0xca>
 800c194:	9901      	ldr	r1, [sp, #4]
 800c196:	4652      	mov	r2, sl
 800c198:	4638      	mov	r0, r7
 800c19a:	f001 fadc 	bl	800d756 <strncmp>
 800c19e:	4605      	mov	r5, r0
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d168      	bne.n	800c276 <__gethex+0x136>
 800c1a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c1a8:	eb07 060a 	add.w	r6, r7, sl
 800c1ac:	f7ff ffb3 	bl	800c116 <__hexdig_fun>
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	d062      	beq.n	800c27a <__gethex+0x13a>
 800c1b4:	4633      	mov	r3, r6
 800c1b6:	7818      	ldrb	r0, [r3, #0]
 800c1b8:	2830      	cmp	r0, #48	; 0x30
 800c1ba:	461f      	mov	r7, r3
 800c1bc:	f103 0301 	add.w	r3, r3, #1
 800c1c0:	d0f9      	beq.n	800c1b6 <__gethex+0x76>
 800c1c2:	f7ff ffa8 	bl	800c116 <__hexdig_fun>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	fab0 f480 	clz	r4, r0
 800c1cc:	0964      	lsrs	r4, r4, #5
 800c1ce:	4635      	mov	r5, r6
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	463a      	mov	r2, r7
 800c1d4:	4616      	mov	r6, r2
 800c1d6:	3201      	adds	r2, #1
 800c1d8:	7830      	ldrb	r0, [r6, #0]
 800c1da:	f7ff ff9c 	bl	800c116 <__hexdig_fun>
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d1f8      	bne.n	800c1d4 <__gethex+0x94>
 800c1e2:	9901      	ldr	r1, [sp, #4]
 800c1e4:	4652      	mov	r2, sl
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	f001 fab5 	bl	800d756 <strncmp>
 800c1ec:	b980      	cbnz	r0, 800c210 <__gethex+0xd0>
 800c1ee:	b94d      	cbnz	r5, 800c204 <__gethex+0xc4>
 800c1f0:	eb06 050a 	add.w	r5, r6, sl
 800c1f4:	462a      	mov	r2, r5
 800c1f6:	4616      	mov	r6, r2
 800c1f8:	3201      	adds	r2, #1
 800c1fa:	7830      	ldrb	r0, [r6, #0]
 800c1fc:	f7ff ff8b 	bl	800c116 <__hexdig_fun>
 800c200:	2800      	cmp	r0, #0
 800c202:	d1f8      	bne.n	800c1f6 <__gethex+0xb6>
 800c204:	1bad      	subs	r5, r5, r6
 800c206:	00ad      	lsls	r5, r5, #2
 800c208:	e004      	b.n	800c214 <__gethex+0xd4>
 800c20a:	2400      	movs	r4, #0
 800c20c:	4625      	mov	r5, r4
 800c20e:	e7e0      	b.n	800c1d2 <__gethex+0x92>
 800c210:	2d00      	cmp	r5, #0
 800c212:	d1f7      	bne.n	800c204 <__gethex+0xc4>
 800c214:	7833      	ldrb	r3, [r6, #0]
 800c216:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c21a:	2b50      	cmp	r3, #80	; 0x50
 800c21c:	d13b      	bne.n	800c296 <__gethex+0x156>
 800c21e:	7873      	ldrb	r3, [r6, #1]
 800c220:	2b2b      	cmp	r3, #43	; 0x2b
 800c222:	d02c      	beq.n	800c27e <__gethex+0x13e>
 800c224:	2b2d      	cmp	r3, #45	; 0x2d
 800c226:	d02e      	beq.n	800c286 <__gethex+0x146>
 800c228:	1c71      	adds	r1, r6, #1
 800c22a:	f04f 0900 	mov.w	r9, #0
 800c22e:	7808      	ldrb	r0, [r1, #0]
 800c230:	f7ff ff71 	bl	800c116 <__hexdig_fun>
 800c234:	1e43      	subs	r3, r0, #1
 800c236:	b2db      	uxtb	r3, r3
 800c238:	2b18      	cmp	r3, #24
 800c23a:	d82c      	bhi.n	800c296 <__gethex+0x156>
 800c23c:	f1a0 0210 	sub.w	r2, r0, #16
 800c240:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c244:	f7ff ff67 	bl	800c116 <__hexdig_fun>
 800c248:	1e43      	subs	r3, r0, #1
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	2b18      	cmp	r3, #24
 800c24e:	d91d      	bls.n	800c28c <__gethex+0x14c>
 800c250:	f1b9 0f00 	cmp.w	r9, #0
 800c254:	d000      	beq.n	800c258 <__gethex+0x118>
 800c256:	4252      	negs	r2, r2
 800c258:	4415      	add	r5, r2
 800c25a:	f8cb 1000 	str.w	r1, [fp]
 800c25e:	b1e4      	cbz	r4, 800c29a <__gethex+0x15a>
 800c260:	9b00      	ldr	r3, [sp, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	bf14      	ite	ne
 800c266:	2700      	movne	r7, #0
 800c268:	2706      	moveq	r7, #6
 800c26a:	4638      	mov	r0, r7
 800c26c:	b009      	add	sp, #36	; 0x24
 800c26e:	ecbd 8b02 	vpop	{d8}
 800c272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c276:	463e      	mov	r6, r7
 800c278:	4625      	mov	r5, r4
 800c27a:	2401      	movs	r4, #1
 800c27c:	e7ca      	b.n	800c214 <__gethex+0xd4>
 800c27e:	f04f 0900 	mov.w	r9, #0
 800c282:	1cb1      	adds	r1, r6, #2
 800c284:	e7d3      	b.n	800c22e <__gethex+0xee>
 800c286:	f04f 0901 	mov.w	r9, #1
 800c28a:	e7fa      	b.n	800c282 <__gethex+0x142>
 800c28c:	230a      	movs	r3, #10
 800c28e:	fb03 0202 	mla	r2, r3, r2, r0
 800c292:	3a10      	subs	r2, #16
 800c294:	e7d4      	b.n	800c240 <__gethex+0x100>
 800c296:	4631      	mov	r1, r6
 800c298:	e7df      	b.n	800c25a <__gethex+0x11a>
 800c29a:	1bf3      	subs	r3, r6, r7
 800c29c:	3b01      	subs	r3, #1
 800c29e:	4621      	mov	r1, r4
 800c2a0:	2b07      	cmp	r3, #7
 800c2a2:	dc0b      	bgt.n	800c2bc <__gethex+0x17c>
 800c2a4:	ee18 0a10 	vmov	r0, s16
 800c2a8:	f000 fae6 	bl	800c878 <_Balloc>
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	b940      	cbnz	r0, 800c2c2 <__gethex+0x182>
 800c2b0:	4b5d      	ldr	r3, [pc, #372]	; (800c428 <__gethex+0x2e8>)
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	21de      	movs	r1, #222	; 0xde
 800c2b6:	485d      	ldr	r0, [pc, #372]	; (800c42c <__gethex+0x2ec>)
 800c2b8:	f001 fa80 	bl	800d7bc <__assert_func>
 800c2bc:	3101      	adds	r1, #1
 800c2be:	105b      	asrs	r3, r3, #1
 800c2c0:	e7ee      	b.n	800c2a0 <__gethex+0x160>
 800c2c2:	f100 0914 	add.w	r9, r0, #20
 800c2c6:	f04f 0b00 	mov.w	fp, #0
 800c2ca:	f1ca 0301 	rsb	r3, sl, #1
 800c2ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800c2d2:	f8cd b000 	str.w	fp, [sp]
 800c2d6:	9306      	str	r3, [sp, #24]
 800c2d8:	42b7      	cmp	r7, r6
 800c2da:	d340      	bcc.n	800c35e <__gethex+0x21e>
 800c2dc:	9802      	ldr	r0, [sp, #8]
 800c2de:	9b00      	ldr	r3, [sp, #0]
 800c2e0:	f840 3b04 	str.w	r3, [r0], #4
 800c2e4:	eba0 0009 	sub.w	r0, r0, r9
 800c2e8:	1080      	asrs	r0, r0, #2
 800c2ea:	0146      	lsls	r6, r0, #5
 800c2ec:	6120      	str	r0, [r4, #16]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 fbb4 	bl	800ca5c <__hi0bits>
 800c2f4:	1a30      	subs	r0, r6, r0
 800c2f6:	f8d8 6000 	ldr.w	r6, [r8]
 800c2fa:	42b0      	cmp	r0, r6
 800c2fc:	dd63      	ble.n	800c3c6 <__gethex+0x286>
 800c2fe:	1b87      	subs	r7, r0, r6
 800c300:	4639      	mov	r1, r7
 800c302:	4620      	mov	r0, r4
 800c304:	f000 ff58 	bl	800d1b8 <__any_on>
 800c308:	4682      	mov	sl, r0
 800c30a:	b1a8      	cbz	r0, 800c338 <__gethex+0x1f8>
 800c30c:	1e7b      	subs	r3, r7, #1
 800c30e:	1159      	asrs	r1, r3, #5
 800c310:	f003 021f 	and.w	r2, r3, #31
 800c314:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c318:	f04f 0a01 	mov.w	sl, #1
 800c31c:	fa0a f202 	lsl.w	r2, sl, r2
 800c320:	420a      	tst	r2, r1
 800c322:	d009      	beq.n	800c338 <__gethex+0x1f8>
 800c324:	4553      	cmp	r3, sl
 800c326:	dd05      	ble.n	800c334 <__gethex+0x1f4>
 800c328:	1eb9      	subs	r1, r7, #2
 800c32a:	4620      	mov	r0, r4
 800c32c:	f000 ff44 	bl	800d1b8 <__any_on>
 800c330:	2800      	cmp	r0, #0
 800c332:	d145      	bne.n	800c3c0 <__gethex+0x280>
 800c334:	f04f 0a02 	mov.w	sl, #2
 800c338:	4639      	mov	r1, r7
 800c33a:	4620      	mov	r0, r4
 800c33c:	f7ff fe99 	bl	800c072 <rshift>
 800c340:	443d      	add	r5, r7
 800c342:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c346:	42ab      	cmp	r3, r5
 800c348:	da4c      	bge.n	800c3e4 <__gethex+0x2a4>
 800c34a:	ee18 0a10 	vmov	r0, s16
 800c34e:	4621      	mov	r1, r4
 800c350:	f000 fad2 	bl	800c8f8 <_Bfree>
 800c354:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c356:	2300      	movs	r3, #0
 800c358:	6013      	str	r3, [r2, #0]
 800c35a:	27a3      	movs	r7, #163	; 0xa3
 800c35c:	e785      	b.n	800c26a <__gethex+0x12a>
 800c35e:	1e73      	subs	r3, r6, #1
 800c360:	9a05      	ldr	r2, [sp, #20]
 800c362:	9303      	str	r3, [sp, #12]
 800c364:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c368:	4293      	cmp	r3, r2
 800c36a:	d019      	beq.n	800c3a0 <__gethex+0x260>
 800c36c:	f1bb 0f20 	cmp.w	fp, #32
 800c370:	d107      	bne.n	800c382 <__gethex+0x242>
 800c372:	9b02      	ldr	r3, [sp, #8]
 800c374:	9a00      	ldr	r2, [sp, #0]
 800c376:	f843 2b04 	str.w	r2, [r3], #4
 800c37a:	9302      	str	r3, [sp, #8]
 800c37c:	2300      	movs	r3, #0
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	469b      	mov	fp, r3
 800c382:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c386:	f7ff fec6 	bl	800c116 <__hexdig_fun>
 800c38a:	9b00      	ldr	r3, [sp, #0]
 800c38c:	f000 000f 	and.w	r0, r0, #15
 800c390:	fa00 f00b 	lsl.w	r0, r0, fp
 800c394:	4303      	orrs	r3, r0
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	f10b 0b04 	add.w	fp, fp, #4
 800c39c:	9b03      	ldr	r3, [sp, #12]
 800c39e:	e00d      	b.n	800c3bc <__gethex+0x27c>
 800c3a0:	9b03      	ldr	r3, [sp, #12]
 800c3a2:	9a06      	ldr	r2, [sp, #24]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	42bb      	cmp	r3, r7
 800c3a8:	d3e0      	bcc.n	800c36c <__gethex+0x22c>
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	9901      	ldr	r1, [sp, #4]
 800c3ae:	9307      	str	r3, [sp, #28]
 800c3b0:	4652      	mov	r2, sl
 800c3b2:	f001 f9d0 	bl	800d756 <strncmp>
 800c3b6:	9b07      	ldr	r3, [sp, #28]
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d1d7      	bne.n	800c36c <__gethex+0x22c>
 800c3bc:	461e      	mov	r6, r3
 800c3be:	e78b      	b.n	800c2d8 <__gethex+0x198>
 800c3c0:	f04f 0a03 	mov.w	sl, #3
 800c3c4:	e7b8      	b.n	800c338 <__gethex+0x1f8>
 800c3c6:	da0a      	bge.n	800c3de <__gethex+0x29e>
 800c3c8:	1a37      	subs	r7, r6, r0
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	ee18 0a10 	vmov	r0, s16
 800c3d0:	463a      	mov	r2, r7
 800c3d2:	f000 fcad 	bl	800cd30 <__lshift>
 800c3d6:	1bed      	subs	r5, r5, r7
 800c3d8:	4604      	mov	r4, r0
 800c3da:	f100 0914 	add.w	r9, r0, #20
 800c3de:	f04f 0a00 	mov.w	sl, #0
 800c3e2:	e7ae      	b.n	800c342 <__gethex+0x202>
 800c3e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c3e8:	42a8      	cmp	r0, r5
 800c3ea:	dd72      	ble.n	800c4d2 <__gethex+0x392>
 800c3ec:	1b45      	subs	r5, r0, r5
 800c3ee:	42ae      	cmp	r6, r5
 800c3f0:	dc36      	bgt.n	800c460 <__gethex+0x320>
 800c3f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	d02a      	beq.n	800c450 <__gethex+0x310>
 800c3fa:	2b03      	cmp	r3, #3
 800c3fc:	d02c      	beq.n	800c458 <__gethex+0x318>
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d11c      	bne.n	800c43c <__gethex+0x2fc>
 800c402:	42ae      	cmp	r6, r5
 800c404:	d11a      	bne.n	800c43c <__gethex+0x2fc>
 800c406:	2e01      	cmp	r6, #1
 800c408:	d112      	bne.n	800c430 <__gethex+0x2f0>
 800c40a:	9a04      	ldr	r2, [sp, #16]
 800c40c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c410:	6013      	str	r3, [r2, #0]
 800c412:	2301      	movs	r3, #1
 800c414:	6123      	str	r3, [r4, #16]
 800c416:	f8c9 3000 	str.w	r3, [r9]
 800c41a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c41c:	2762      	movs	r7, #98	; 0x62
 800c41e:	601c      	str	r4, [r3, #0]
 800c420:	e723      	b.n	800c26a <__gethex+0x12a>
 800c422:	bf00      	nop
 800c424:	0800f1ec 	.word	0x0800f1ec
 800c428:	0800f110 	.word	0x0800f110
 800c42c:	0800f184 	.word	0x0800f184
 800c430:	1e71      	subs	r1, r6, #1
 800c432:	4620      	mov	r0, r4
 800c434:	f000 fec0 	bl	800d1b8 <__any_on>
 800c438:	2800      	cmp	r0, #0
 800c43a:	d1e6      	bne.n	800c40a <__gethex+0x2ca>
 800c43c:	ee18 0a10 	vmov	r0, s16
 800c440:	4621      	mov	r1, r4
 800c442:	f000 fa59 	bl	800c8f8 <_Bfree>
 800c446:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c448:	2300      	movs	r3, #0
 800c44a:	6013      	str	r3, [r2, #0]
 800c44c:	2750      	movs	r7, #80	; 0x50
 800c44e:	e70c      	b.n	800c26a <__gethex+0x12a>
 800c450:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1f2      	bne.n	800c43c <__gethex+0x2fc>
 800c456:	e7d8      	b.n	800c40a <__gethex+0x2ca>
 800c458:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1d5      	bne.n	800c40a <__gethex+0x2ca>
 800c45e:	e7ed      	b.n	800c43c <__gethex+0x2fc>
 800c460:	1e6f      	subs	r7, r5, #1
 800c462:	f1ba 0f00 	cmp.w	sl, #0
 800c466:	d131      	bne.n	800c4cc <__gethex+0x38c>
 800c468:	b127      	cbz	r7, 800c474 <__gethex+0x334>
 800c46a:	4639      	mov	r1, r7
 800c46c:	4620      	mov	r0, r4
 800c46e:	f000 fea3 	bl	800d1b8 <__any_on>
 800c472:	4682      	mov	sl, r0
 800c474:	117b      	asrs	r3, r7, #5
 800c476:	2101      	movs	r1, #1
 800c478:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c47c:	f007 071f 	and.w	r7, r7, #31
 800c480:	fa01 f707 	lsl.w	r7, r1, r7
 800c484:	421f      	tst	r7, r3
 800c486:	4629      	mov	r1, r5
 800c488:	4620      	mov	r0, r4
 800c48a:	bf18      	it	ne
 800c48c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c490:	1b76      	subs	r6, r6, r5
 800c492:	f7ff fdee 	bl	800c072 <rshift>
 800c496:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c49a:	2702      	movs	r7, #2
 800c49c:	f1ba 0f00 	cmp.w	sl, #0
 800c4a0:	d048      	beq.n	800c534 <__gethex+0x3f4>
 800c4a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d015      	beq.n	800c4d6 <__gethex+0x396>
 800c4aa:	2b03      	cmp	r3, #3
 800c4ac:	d017      	beq.n	800c4de <__gethex+0x39e>
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d109      	bne.n	800c4c6 <__gethex+0x386>
 800c4b2:	f01a 0f02 	tst.w	sl, #2
 800c4b6:	d006      	beq.n	800c4c6 <__gethex+0x386>
 800c4b8:	f8d9 0000 	ldr.w	r0, [r9]
 800c4bc:	ea4a 0a00 	orr.w	sl, sl, r0
 800c4c0:	f01a 0f01 	tst.w	sl, #1
 800c4c4:	d10e      	bne.n	800c4e4 <__gethex+0x3a4>
 800c4c6:	f047 0710 	orr.w	r7, r7, #16
 800c4ca:	e033      	b.n	800c534 <__gethex+0x3f4>
 800c4cc:	f04f 0a01 	mov.w	sl, #1
 800c4d0:	e7d0      	b.n	800c474 <__gethex+0x334>
 800c4d2:	2701      	movs	r7, #1
 800c4d4:	e7e2      	b.n	800c49c <__gethex+0x35c>
 800c4d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4d8:	f1c3 0301 	rsb	r3, r3, #1
 800c4dc:	9315      	str	r3, [sp, #84]	; 0x54
 800c4de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d0f0      	beq.n	800c4c6 <__gethex+0x386>
 800c4e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c4e8:	f104 0314 	add.w	r3, r4, #20
 800c4ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c4f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c4f4:	f04f 0c00 	mov.w	ip, #0
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c502:	d01c      	beq.n	800c53e <__gethex+0x3fe>
 800c504:	3201      	adds	r2, #1
 800c506:	6002      	str	r2, [r0, #0]
 800c508:	2f02      	cmp	r7, #2
 800c50a:	f104 0314 	add.w	r3, r4, #20
 800c50e:	d13f      	bne.n	800c590 <__gethex+0x450>
 800c510:	f8d8 2000 	ldr.w	r2, [r8]
 800c514:	3a01      	subs	r2, #1
 800c516:	42b2      	cmp	r2, r6
 800c518:	d10a      	bne.n	800c530 <__gethex+0x3f0>
 800c51a:	1171      	asrs	r1, r6, #5
 800c51c:	2201      	movs	r2, #1
 800c51e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c522:	f006 061f 	and.w	r6, r6, #31
 800c526:	fa02 f606 	lsl.w	r6, r2, r6
 800c52a:	421e      	tst	r6, r3
 800c52c:	bf18      	it	ne
 800c52e:	4617      	movne	r7, r2
 800c530:	f047 0720 	orr.w	r7, r7, #32
 800c534:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c536:	601c      	str	r4, [r3, #0]
 800c538:	9b04      	ldr	r3, [sp, #16]
 800c53a:	601d      	str	r5, [r3, #0]
 800c53c:	e695      	b.n	800c26a <__gethex+0x12a>
 800c53e:	4299      	cmp	r1, r3
 800c540:	f843 cc04 	str.w	ip, [r3, #-4]
 800c544:	d8d8      	bhi.n	800c4f8 <__gethex+0x3b8>
 800c546:	68a3      	ldr	r3, [r4, #8]
 800c548:	459b      	cmp	fp, r3
 800c54a:	db19      	blt.n	800c580 <__gethex+0x440>
 800c54c:	6861      	ldr	r1, [r4, #4]
 800c54e:	ee18 0a10 	vmov	r0, s16
 800c552:	3101      	adds	r1, #1
 800c554:	f000 f990 	bl	800c878 <_Balloc>
 800c558:	4681      	mov	r9, r0
 800c55a:	b918      	cbnz	r0, 800c564 <__gethex+0x424>
 800c55c:	4b1a      	ldr	r3, [pc, #104]	; (800c5c8 <__gethex+0x488>)
 800c55e:	4602      	mov	r2, r0
 800c560:	2184      	movs	r1, #132	; 0x84
 800c562:	e6a8      	b.n	800c2b6 <__gethex+0x176>
 800c564:	6922      	ldr	r2, [r4, #16]
 800c566:	3202      	adds	r2, #2
 800c568:	f104 010c 	add.w	r1, r4, #12
 800c56c:	0092      	lsls	r2, r2, #2
 800c56e:	300c      	adds	r0, #12
 800c570:	f000 f974 	bl	800c85c <memcpy>
 800c574:	4621      	mov	r1, r4
 800c576:	ee18 0a10 	vmov	r0, s16
 800c57a:	f000 f9bd 	bl	800c8f8 <_Bfree>
 800c57e:	464c      	mov	r4, r9
 800c580:	6923      	ldr	r3, [r4, #16]
 800c582:	1c5a      	adds	r2, r3, #1
 800c584:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c588:	6122      	str	r2, [r4, #16]
 800c58a:	2201      	movs	r2, #1
 800c58c:	615a      	str	r2, [r3, #20]
 800c58e:	e7bb      	b.n	800c508 <__gethex+0x3c8>
 800c590:	6922      	ldr	r2, [r4, #16]
 800c592:	455a      	cmp	r2, fp
 800c594:	dd0b      	ble.n	800c5ae <__gethex+0x46e>
 800c596:	2101      	movs	r1, #1
 800c598:	4620      	mov	r0, r4
 800c59a:	f7ff fd6a 	bl	800c072 <rshift>
 800c59e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5a2:	3501      	adds	r5, #1
 800c5a4:	42ab      	cmp	r3, r5
 800c5a6:	f6ff aed0 	blt.w	800c34a <__gethex+0x20a>
 800c5aa:	2701      	movs	r7, #1
 800c5ac:	e7c0      	b.n	800c530 <__gethex+0x3f0>
 800c5ae:	f016 061f 	ands.w	r6, r6, #31
 800c5b2:	d0fa      	beq.n	800c5aa <__gethex+0x46a>
 800c5b4:	4453      	add	r3, sl
 800c5b6:	f1c6 0620 	rsb	r6, r6, #32
 800c5ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c5be:	f000 fa4d 	bl	800ca5c <__hi0bits>
 800c5c2:	42b0      	cmp	r0, r6
 800c5c4:	dbe7      	blt.n	800c596 <__gethex+0x456>
 800c5c6:	e7f0      	b.n	800c5aa <__gethex+0x46a>
 800c5c8:	0800f110 	.word	0x0800f110

0800c5cc <L_shift>:
 800c5cc:	f1c2 0208 	rsb	r2, r2, #8
 800c5d0:	0092      	lsls	r2, r2, #2
 800c5d2:	b570      	push	{r4, r5, r6, lr}
 800c5d4:	f1c2 0620 	rsb	r6, r2, #32
 800c5d8:	6843      	ldr	r3, [r0, #4]
 800c5da:	6804      	ldr	r4, [r0, #0]
 800c5dc:	fa03 f506 	lsl.w	r5, r3, r6
 800c5e0:	432c      	orrs	r4, r5
 800c5e2:	40d3      	lsrs	r3, r2
 800c5e4:	6004      	str	r4, [r0, #0]
 800c5e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c5ea:	4288      	cmp	r0, r1
 800c5ec:	d3f4      	bcc.n	800c5d8 <L_shift+0xc>
 800c5ee:	bd70      	pop	{r4, r5, r6, pc}

0800c5f0 <__match>:
 800c5f0:	b530      	push	{r4, r5, lr}
 800c5f2:	6803      	ldr	r3, [r0, #0]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5fa:	b914      	cbnz	r4, 800c602 <__match+0x12>
 800c5fc:	6003      	str	r3, [r0, #0]
 800c5fe:	2001      	movs	r0, #1
 800c600:	bd30      	pop	{r4, r5, pc}
 800c602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c606:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c60a:	2d19      	cmp	r5, #25
 800c60c:	bf98      	it	ls
 800c60e:	3220      	addls	r2, #32
 800c610:	42a2      	cmp	r2, r4
 800c612:	d0f0      	beq.n	800c5f6 <__match+0x6>
 800c614:	2000      	movs	r0, #0
 800c616:	e7f3      	b.n	800c600 <__match+0x10>

0800c618 <__hexnan>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	680b      	ldr	r3, [r1, #0]
 800c61e:	115e      	asrs	r6, r3, #5
 800c620:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c624:	f013 031f 	ands.w	r3, r3, #31
 800c628:	b087      	sub	sp, #28
 800c62a:	bf18      	it	ne
 800c62c:	3604      	addne	r6, #4
 800c62e:	2500      	movs	r5, #0
 800c630:	1f37      	subs	r7, r6, #4
 800c632:	4690      	mov	r8, r2
 800c634:	6802      	ldr	r2, [r0, #0]
 800c636:	9301      	str	r3, [sp, #4]
 800c638:	4682      	mov	sl, r0
 800c63a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c63e:	46b9      	mov	r9, r7
 800c640:	463c      	mov	r4, r7
 800c642:	9502      	str	r5, [sp, #8]
 800c644:	46ab      	mov	fp, r5
 800c646:	7851      	ldrb	r1, [r2, #1]
 800c648:	1c53      	adds	r3, r2, #1
 800c64a:	9303      	str	r3, [sp, #12]
 800c64c:	b341      	cbz	r1, 800c6a0 <__hexnan+0x88>
 800c64e:	4608      	mov	r0, r1
 800c650:	9205      	str	r2, [sp, #20]
 800c652:	9104      	str	r1, [sp, #16]
 800c654:	f7ff fd5f 	bl	800c116 <__hexdig_fun>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d14f      	bne.n	800c6fc <__hexnan+0xe4>
 800c65c:	9904      	ldr	r1, [sp, #16]
 800c65e:	9a05      	ldr	r2, [sp, #20]
 800c660:	2920      	cmp	r1, #32
 800c662:	d818      	bhi.n	800c696 <__hexnan+0x7e>
 800c664:	9b02      	ldr	r3, [sp, #8]
 800c666:	459b      	cmp	fp, r3
 800c668:	dd13      	ble.n	800c692 <__hexnan+0x7a>
 800c66a:	454c      	cmp	r4, r9
 800c66c:	d206      	bcs.n	800c67c <__hexnan+0x64>
 800c66e:	2d07      	cmp	r5, #7
 800c670:	dc04      	bgt.n	800c67c <__hexnan+0x64>
 800c672:	462a      	mov	r2, r5
 800c674:	4649      	mov	r1, r9
 800c676:	4620      	mov	r0, r4
 800c678:	f7ff ffa8 	bl	800c5cc <L_shift>
 800c67c:	4544      	cmp	r4, r8
 800c67e:	d950      	bls.n	800c722 <__hexnan+0x10a>
 800c680:	2300      	movs	r3, #0
 800c682:	f1a4 0904 	sub.w	r9, r4, #4
 800c686:	f844 3c04 	str.w	r3, [r4, #-4]
 800c68a:	f8cd b008 	str.w	fp, [sp, #8]
 800c68e:	464c      	mov	r4, r9
 800c690:	461d      	mov	r5, r3
 800c692:	9a03      	ldr	r2, [sp, #12]
 800c694:	e7d7      	b.n	800c646 <__hexnan+0x2e>
 800c696:	2929      	cmp	r1, #41	; 0x29
 800c698:	d156      	bne.n	800c748 <__hexnan+0x130>
 800c69a:	3202      	adds	r2, #2
 800c69c:	f8ca 2000 	str.w	r2, [sl]
 800c6a0:	f1bb 0f00 	cmp.w	fp, #0
 800c6a4:	d050      	beq.n	800c748 <__hexnan+0x130>
 800c6a6:	454c      	cmp	r4, r9
 800c6a8:	d206      	bcs.n	800c6b8 <__hexnan+0xa0>
 800c6aa:	2d07      	cmp	r5, #7
 800c6ac:	dc04      	bgt.n	800c6b8 <__hexnan+0xa0>
 800c6ae:	462a      	mov	r2, r5
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7ff ff8a 	bl	800c5cc <L_shift>
 800c6b8:	4544      	cmp	r4, r8
 800c6ba:	d934      	bls.n	800c726 <__hexnan+0x10e>
 800c6bc:	f1a8 0204 	sub.w	r2, r8, #4
 800c6c0:	4623      	mov	r3, r4
 800c6c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c6c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c6ca:	429f      	cmp	r7, r3
 800c6cc:	d2f9      	bcs.n	800c6c2 <__hexnan+0xaa>
 800c6ce:	1b3b      	subs	r3, r7, r4
 800c6d0:	f023 0303 	bic.w	r3, r3, #3
 800c6d4:	3304      	adds	r3, #4
 800c6d6:	3401      	adds	r4, #1
 800c6d8:	3e03      	subs	r6, #3
 800c6da:	42b4      	cmp	r4, r6
 800c6dc:	bf88      	it	hi
 800c6de:	2304      	movhi	r3, #4
 800c6e0:	4443      	add	r3, r8
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f843 2b04 	str.w	r2, [r3], #4
 800c6e8:	429f      	cmp	r7, r3
 800c6ea:	d2fb      	bcs.n	800c6e4 <__hexnan+0xcc>
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	b91b      	cbnz	r3, 800c6f8 <__hexnan+0xe0>
 800c6f0:	4547      	cmp	r7, r8
 800c6f2:	d127      	bne.n	800c744 <__hexnan+0x12c>
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	603b      	str	r3, [r7, #0]
 800c6f8:	2005      	movs	r0, #5
 800c6fa:	e026      	b.n	800c74a <__hexnan+0x132>
 800c6fc:	3501      	adds	r5, #1
 800c6fe:	2d08      	cmp	r5, #8
 800c700:	f10b 0b01 	add.w	fp, fp, #1
 800c704:	dd06      	ble.n	800c714 <__hexnan+0xfc>
 800c706:	4544      	cmp	r4, r8
 800c708:	d9c3      	bls.n	800c692 <__hexnan+0x7a>
 800c70a:	2300      	movs	r3, #0
 800c70c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c710:	2501      	movs	r5, #1
 800c712:	3c04      	subs	r4, #4
 800c714:	6822      	ldr	r2, [r4, #0]
 800c716:	f000 000f 	and.w	r0, r0, #15
 800c71a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c71e:	6022      	str	r2, [r4, #0]
 800c720:	e7b7      	b.n	800c692 <__hexnan+0x7a>
 800c722:	2508      	movs	r5, #8
 800c724:	e7b5      	b.n	800c692 <__hexnan+0x7a>
 800c726:	9b01      	ldr	r3, [sp, #4]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d0df      	beq.n	800c6ec <__hexnan+0xd4>
 800c72c:	f04f 32ff 	mov.w	r2, #4294967295
 800c730:	f1c3 0320 	rsb	r3, r3, #32
 800c734:	fa22 f303 	lsr.w	r3, r2, r3
 800c738:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c73c:	401a      	ands	r2, r3
 800c73e:	f846 2c04 	str.w	r2, [r6, #-4]
 800c742:	e7d3      	b.n	800c6ec <__hexnan+0xd4>
 800c744:	3f04      	subs	r7, #4
 800c746:	e7d1      	b.n	800c6ec <__hexnan+0xd4>
 800c748:	2004      	movs	r0, #4
 800c74a:	b007      	add	sp, #28
 800c74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c750 <_localeconv_r>:
 800c750:	4800      	ldr	r0, [pc, #0]	; (800c754 <_localeconv_r+0x4>)
 800c752:	4770      	bx	lr
 800c754:	200002f8 	.word	0x200002f8

0800c758 <__retarget_lock_init_recursive>:
 800c758:	4770      	bx	lr

0800c75a <__retarget_lock_acquire_recursive>:
 800c75a:	4770      	bx	lr

0800c75c <__retarget_lock_release_recursive>:
 800c75c:	4770      	bx	lr

0800c75e <__swhatbuf_r>:
 800c75e:	b570      	push	{r4, r5, r6, lr}
 800c760:	460e      	mov	r6, r1
 800c762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c766:	2900      	cmp	r1, #0
 800c768:	b096      	sub	sp, #88	; 0x58
 800c76a:	4614      	mov	r4, r2
 800c76c:	461d      	mov	r5, r3
 800c76e:	da08      	bge.n	800c782 <__swhatbuf_r+0x24>
 800c770:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c774:	2200      	movs	r2, #0
 800c776:	602a      	str	r2, [r5, #0]
 800c778:	061a      	lsls	r2, r3, #24
 800c77a:	d410      	bmi.n	800c79e <__swhatbuf_r+0x40>
 800c77c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c780:	e00e      	b.n	800c7a0 <__swhatbuf_r+0x42>
 800c782:	466a      	mov	r2, sp
 800c784:	f001 f85a 	bl	800d83c <_fstat_r>
 800c788:	2800      	cmp	r0, #0
 800c78a:	dbf1      	blt.n	800c770 <__swhatbuf_r+0x12>
 800c78c:	9a01      	ldr	r2, [sp, #4]
 800c78e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c792:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c796:	425a      	negs	r2, r3
 800c798:	415a      	adcs	r2, r3
 800c79a:	602a      	str	r2, [r5, #0]
 800c79c:	e7ee      	b.n	800c77c <__swhatbuf_r+0x1e>
 800c79e:	2340      	movs	r3, #64	; 0x40
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	6023      	str	r3, [r4, #0]
 800c7a4:	b016      	add	sp, #88	; 0x58
 800c7a6:	bd70      	pop	{r4, r5, r6, pc}

0800c7a8 <__smakebuf_r>:
 800c7a8:	898b      	ldrh	r3, [r1, #12]
 800c7aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7ac:	079d      	lsls	r5, r3, #30
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	460c      	mov	r4, r1
 800c7b2:	d507      	bpl.n	800c7c4 <__smakebuf_r+0x1c>
 800c7b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	6123      	str	r3, [r4, #16]
 800c7bc:	2301      	movs	r3, #1
 800c7be:	6163      	str	r3, [r4, #20]
 800c7c0:	b002      	add	sp, #8
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}
 800c7c4:	ab01      	add	r3, sp, #4
 800c7c6:	466a      	mov	r2, sp
 800c7c8:	f7ff ffc9 	bl	800c75e <__swhatbuf_r>
 800c7cc:	9900      	ldr	r1, [sp, #0]
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f000 fd95 	bl	800d300 <_malloc_r>
 800c7d6:	b948      	cbnz	r0, 800c7ec <__smakebuf_r+0x44>
 800c7d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7dc:	059a      	lsls	r2, r3, #22
 800c7de:	d4ef      	bmi.n	800c7c0 <__smakebuf_r+0x18>
 800c7e0:	f023 0303 	bic.w	r3, r3, #3
 800c7e4:	f043 0302 	orr.w	r3, r3, #2
 800c7e8:	81a3      	strh	r3, [r4, #12]
 800c7ea:	e7e3      	b.n	800c7b4 <__smakebuf_r+0xc>
 800c7ec:	4b0d      	ldr	r3, [pc, #52]	; (800c824 <__smakebuf_r+0x7c>)
 800c7ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	6020      	str	r0, [r4, #0]
 800c7f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7f8:	81a3      	strh	r3, [r4, #12]
 800c7fa:	9b00      	ldr	r3, [sp, #0]
 800c7fc:	6163      	str	r3, [r4, #20]
 800c7fe:	9b01      	ldr	r3, [sp, #4]
 800c800:	6120      	str	r0, [r4, #16]
 800c802:	b15b      	cbz	r3, 800c81c <__smakebuf_r+0x74>
 800c804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c808:	4630      	mov	r0, r6
 800c80a:	f001 f829 	bl	800d860 <_isatty_r>
 800c80e:	b128      	cbz	r0, 800c81c <__smakebuf_r+0x74>
 800c810:	89a3      	ldrh	r3, [r4, #12]
 800c812:	f023 0303 	bic.w	r3, r3, #3
 800c816:	f043 0301 	orr.w	r3, r3, #1
 800c81a:	81a3      	strh	r3, [r4, #12]
 800c81c:	89a0      	ldrh	r0, [r4, #12]
 800c81e:	4305      	orrs	r5, r0
 800c820:	81a5      	strh	r5, [r4, #12]
 800c822:	e7cd      	b.n	800c7c0 <__smakebuf_r+0x18>
 800c824:	0800bed1 	.word	0x0800bed1

0800c828 <malloc>:
 800c828:	4b02      	ldr	r3, [pc, #8]	; (800c834 <malloc+0xc>)
 800c82a:	4601      	mov	r1, r0
 800c82c:	6818      	ldr	r0, [r3, #0]
 800c82e:	f000 bd67 	b.w	800d300 <_malloc_r>
 800c832:	bf00      	nop
 800c834:	200001a0 	.word	0x200001a0

0800c838 <__ascii_mbtowc>:
 800c838:	b082      	sub	sp, #8
 800c83a:	b901      	cbnz	r1, 800c83e <__ascii_mbtowc+0x6>
 800c83c:	a901      	add	r1, sp, #4
 800c83e:	b142      	cbz	r2, 800c852 <__ascii_mbtowc+0x1a>
 800c840:	b14b      	cbz	r3, 800c856 <__ascii_mbtowc+0x1e>
 800c842:	7813      	ldrb	r3, [r2, #0]
 800c844:	600b      	str	r3, [r1, #0]
 800c846:	7812      	ldrb	r2, [r2, #0]
 800c848:	1e10      	subs	r0, r2, #0
 800c84a:	bf18      	it	ne
 800c84c:	2001      	movne	r0, #1
 800c84e:	b002      	add	sp, #8
 800c850:	4770      	bx	lr
 800c852:	4610      	mov	r0, r2
 800c854:	e7fb      	b.n	800c84e <__ascii_mbtowc+0x16>
 800c856:	f06f 0001 	mvn.w	r0, #1
 800c85a:	e7f8      	b.n	800c84e <__ascii_mbtowc+0x16>

0800c85c <memcpy>:
 800c85c:	440a      	add	r2, r1
 800c85e:	4291      	cmp	r1, r2
 800c860:	f100 33ff 	add.w	r3, r0, #4294967295
 800c864:	d100      	bne.n	800c868 <memcpy+0xc>
 800c866:	4770      	bx	lr
 800c868:	b510      	push	{r4, lr}
 800c86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c86e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c872:	4291      	cmp	r1, r2
 800c874:	d1f9      	bne.n	800c86a <memcpy+0xe>
 800c876:	bd10      	pop	{r4, pc}

0800c878 <_Balloc>:
 800c878:	b570      	push	{r4, r5, r6, lr}
 800c87a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c87c:	4604      	mov	r4, r0
 800c87e:	460d      	mov	r5, r1
 800c880:	b976      	cbnz	r6, 800c8a0 <_Balloc+0x28>
 800c882:	2010      	movs	r0, #16
 800c884:	f7ff ffd0 	bl	800c828 <malloc>
 800c888:	4602      	mov	r2, r0
 800c88a:	6260      	str	r0, [r4, #36]	; 0x24
 800c88c:	b920      	cbnz	r0, 800c898 <_Balloc+0x20>
 800c88e:	4b18      	ldr	r3, [pc, #96]	; (800c8f0 <_Balloc+0x78>)
 800c890:	4818      	ldr	r0, [pc, #96]	; (800c8f4 <_Balloc+0x7c>)
 800c892:	2166      	movs	r1, #102	; 0x66
 800c894:	f000 ff92 	bl	800d7bc <__assert_func>
 800c898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c89c:	6006      	str	r6, [r0, #0]
 800c89e:	60c6      	str	r6, [r0, #12]
 800c8a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c8a2:	68f3      	ldr	r3, [r6, #12]
 800c8a4:	b183      	cbz	r3, 800c8c8 <_Balloc+0x50>
 800c8a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c8ae:	b9b8      	cbnz	r0, 800c8e0 <_Balloc+0x68>
 800c8b0:	2101      	movs	r1, #1
 800c8b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c8b6:	1d72      	adds	r2, r6, #5
 800c8b8:	0092      	lsls	r2, r2, #2
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	f000 fc9d 	bl	800d1fa <_calloc_r>
 800c8c0:	b160      	cbz	r0, 800c8dc <_Balloc+0x64>
 800c8c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c8c6:	e00e      	b.n	800c8e6 <_Balloc+0x6e>
 800c8c8:	2221      	movs	r2, #33	; 0x21
 800c8ca:	2104      	movs	r1, #4
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 fc94 	bl	800d1fa <_calloc_r>
 800c8d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8d4:	60f0      	str	r0, [r6, #12]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1e4      	bne.n	800c8a6 <_Balloc+0x2e>
 800c8dc:	2000      	movs	r0, #0
 800c8de:	bd70      	pop	{r4, r5, r6, pc}
 800c8e0:	6802      	ldr	r2, [r0, #0]
 800c8e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8ec:	e7f7      	b.n	800c8de <_Balloc+0x66>
 800c8ee:	bf00      	nop
 800c8f0:	0800f09e 	.word	0x0800f09e
 800c8f4:	0800f200 	.word	0x0800f200

0800c8f8 <_Bfree>:
 800c8f8:	b570      	push	{r4, r5, r6, lr}
 800c8fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c8fc:	4605      	mov	r5, r0
 800c8fe:	460c      	mov	r4, r1
 800c900:	b976      	cbnz	r6, 800c920 <_Bfree+0x28>
 800c902:	2010      	movs	r0, #16
 800c904:	f7ff ff90 	bl	800c828 <malloc>
 800c908:	4602      	mov	r2, r0
 800c90a:	6268      	str	r0, [r5, #36]	; 0x24
 800c90c:	b920      	cbnz	r0, 800c918 <_Bfree+0x20>
 800c90e:	4b09      	ldr	r3, [pc, #36]	; (800c934 <_Bfree+0x3c>)
 800c910:	4809      	ldr	r0, [pc, #36]	; (800c938 <_Bfree+0x40>)
 800c912:	218a      	movs	r1, #138	; 0x8a
 800c914:	f000 ff52 	bl	800d7bc <__assert_func>
 800c918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c91c:	6006      	str	r6, [r0, #0]
 800c91e:	60c6      	str	r6, [r0, #12]
 800c920:	b13c      	cbz	r4, 800c932 <_Bfree+0x3a>
 800c922:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c924:	6862      	ldr	r2, [r4, #4]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c92c:	6021      	str	r1, [r4, #0]
 800c92e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c932:	bd70      	pop	{r4, r5, r6, pc}
 800c934:	0800f09e 	.word	0x0800f09e
 800c938:	0800f200 	.word	0x0800f200

0800c93c <__multadd>:
 800c93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c940:	690d      	ldr	r5, [r1, #16]
 800c942:	4607      	mov	r7, r0
 800c944:	460c      	mov	r4, r1
 800c946:	461e      	mov	r6, r3
 800c948:	f101 0c14 	add.w	ip, r1, #20
 800c94c:	2000      	movs	r0, #0
 800c94e:	f8dc 3000 	ldr.w	r3, [ip]
 800c952:	b299      	uxth	r1, r3
 800c954:	fb02 6101 	mla	r1, r2, r1, r6
 800c958:	0c1e      	lsrs	r6, r3, #16
 800c95a:	0c0b      	lsrs	r3, r1, #16
 800c95c:	fb02 3306 	mla	r3, r2, r6, r3
 800c960:	b289      	uxth	r1, r1
 800c962:	3001      	adds	r0, #1
 800c964:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c968:	4285      	cmp	r5, r0
 800c96a:	f84c 1b04 	str.w	r1, [ip], #4
 800c96e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c972:	dcec      	bgt.n	800c94e <__multadd+0x12>
 800c974:	b30e      	cbz	r6, 800c9ba <__multadd+0x7e>
 800c976:	68a3      	ldr	r3, [r4, #8]
 800c978:	42ab      	cmp	r3, r5
 800c97a:	dc19      	bgt.n	800c9b0 <__multadd+0x74>
 800c97c:	6861      	ldr	r1, [r4, #4]
 800c97e:	4638      	mov	r0, r7
 800c980:	3101      	adds	r1, #1
 800c982:	f7ff ff79 	bl	800c878 <_Balloc>
 800c986:	4680      	mov	r8, r0
 800c988:	b928      	cbnz	r0, 800c996 <__multadd+0x5a>
 800c98a:	4602      	mov	r2, r0
 800c98c:	4b0c      	ldr	r3, [pc, #48]	; (800c9c0 <__multadd+0x84>)
 800c98e:	480d      	ldr	r0, [pc, #52]	; (800c9c4 <__multadd+0x88>)
 800c990:	21b5      	movs	r1, #181	; 0xb5
 800c992:	f000 ff13 	bl	800d7bc <__assert_func>
 800c996:	6922      	ldr	r2, [r4, #16]
 800c998:	3202      	adds	r2, #2
 800c99a:	f104 010c 	add.w	r1, r4, #12
 800c99e:	0092      	lsls	r2, r2, #2
 800c9a0:	300c      	adds	r0, #12
 800c9a2:	f7ff ff5b 	bl	800c85c <memcpy>
 800c9a6:	4621      	mov	r1, r4
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	f7ff ffa5 	bl	800c8f8 <_Bfree>
 800c9ae:	4644      	mov	r4, r8
 800c9b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c9b4:	3501      	adds	r5, #1
 800c9b6:	615e      	str	r6, [r3, #20]
 800c9b8:	6125      	str	r5, [r4, #16]
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c0:	0800f110 	.word	0x0800f110
 800c9c4:	0800f200 	.word	0x0800f200

0800c9c8 <__s2b>:
 800c9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	4615      	mov	r5, r2
 800c9d0:	461f      	mov	r7, r3
 800c9d2:	2209      	movs	r2, #9
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9dc:	2100      	movs	r1, #0
 800c9de:	2201      	movs	r2, #1
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	db09      	blt.n	800c9f8 <__s2b+0x30>
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7ff ff47 	bl	800c878 <_Balloc>
 800c9ea:	b940      	cbnz	r0, 800c9fe <__s2b+0x36>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	4b19      	ldr	r3, [pc, #100]	; (800ca54 <__s2b+0x8c>)
 800c9f0:	4819      	ldr	r0, [pc, #100]	; (800ca58 <__s2b+0x90>)
 800c9f2:	21ce      	movs	r1, #206	; 0xce
 800c9f4:	f000 fee2 	bl	800d7bc <__assert_func>
 800c9f8:	0052      	lsls	r2, r2, #1
 800c9fa:	3101      	adds	r1, #1
 800c9fc:	e7f0      	b.n	800c9e0 <__s2b+0x18>
 800c9fe:	9b08      	ldr	r3, [sp, #32]
 800ca00:	6143      	str	r3, [r0, #20]
 800ca02:	2d09      	cmp	r5, #9
 800ca04:	f04f 0301 	mov.w	r3, #1
 800ca08:	6103      	str	r3, [r0, #16]
 800ca0a:	dd16      	ble.n	800ca3a <__s2b+0x72>
 800ca0c:	f104 0909 	add.w	r9, r4, #9
 800ca10:	46c8      	mov	r8, r9
 800ca12:	442c      	add	r4, r5
 800ca14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca18:	4601      	mov	r1, r0
 800ca1a:	3b30      	subs	r3, #48	; 0x30
 800ca1c:	220a      	movs	r2, #10
 800ca1e:	4630      	mov	r0, r6
 800ca20:	f7ff ff8c 	bl	800c93c <__multadd>
 800ca24:	45a0      	cmp	r8, r4
 800ca26:	d1f5      	bne.n	800ca14 <__s2b+0x4c>
 800ca28:	f1a5 0408 	sub.w	r4, r5, #8
 800ca2c:	444c      	add	r4, r9
 800ca2e:	1b2d      	subs	r5, r5, r4
 800ca30:	1963      	adds	r3, r4, r5
 800ca32:	42bb      	cmp	r3, r7
 800ca34:	db04      	blt.n	800ca40 <__s2b+0x78>
 800ca36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca3a:	340a      	adds	r4, #10
 800ca3c:	2509      	movs	r5, #9
 800ca3e:	e7f6      	b.n	800ca2e <__s2b+0x66>
 800ca40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca44:	4601      	mov	r1, r0
 800ca46:	3b30      	subs	r3, #48	; 0x30
 800ca48:	220a      	movs	r2, #10
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	f7ff ff76 	bl	800c93c <__multadd>
 800ca50:	e7ee      	b.n	800ca30 <__s2b+0x68>
 800ca52:	bf00      	nop
 800ca54:	0800f110 	.word	0x0800f110
 800ca58:	0800f200 	.word	0x0800f200

0800ca5c <__hi0bits>:
 800ca5c:	0c03      	lsrs	r3, r0, #16
 800ca5e:	041b      	lsls	r3, r3, #16
 800ca60:	b9d3      	cbnz	r3, 800ca98 <__hi0bits+0x3c>
 800ca62:	0400      	lsls	r0, r0, #16
 800ca64:	2310      	movs	r3, #16
 800ca66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ca6a:	bf04      	itt	eq
 800ca6c:	0200      	lsleq	r0, r0, #8
 800ca6e:	3308      	addeq	r3, #8
 800ca70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ca74:	bf04      	itt	eq
 800ca76:	0100      	lsleq	r0, r0, #4
 800ca78:	3304      	addeq	r3, #4
 800ca7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ca7e:	bf04      	itt	eq
 800ca80:	0080      	lsleq	r0, r0, #2
 800ca82:	3302      	addeq	r3, #2
 800ca84:	2800      	cmp	r0, #0
 800ca86:	db05      	blt.n	800ca94 <__hi0bits+0x38>
 800ca88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ca8c:	f103 0301 	add.w	r3, r3, #1
 800ca90:	bf08      	it	eq
 800ca92:	2320      	moveq	r3, #32
 800ca94:	4618      	mov	r0, r3
 800ca96:	4770      	bx	lr
 800ca98:	2300      	movs	r3, #0
 800ca9a:	e7e4      	b.n	800ca66 <__hi0bits+0xa>

0800ca9c <__lo0bits>:
 800ca9c:	6803      	ldr	r3, [r0, #0]
 800ca9e:	f013 0207 	ands.w	r2, r3, #7
 800caa2:	4601      	mov	r1, r0
 800caa4:	d00b      	beq.n	800cabe <__lo0bits+0x22>
 800caa6:	07da      	lsls	r2, r3, #31
 800caa8:	d423      	bmi.n	800caf2 <__lo0bits+0x56>
 800caaa:	0798      	lsls	r0, r3, #30
 800caac:	bf49      	itett	mi
 800caae:	085b      	lsrmi	r3, r3, #1
 800cab0:	089b      	lsrpl	r3, r3, #2
 800cab2:	2001      	movmi	r0, #1
 800cab4:	600b      	strmi	r3, [r1, #0]
 800cab6:	bf5c      	itt	pl
 800cab8:	600b      	strpl	r3, [r1, #0]
 800caba:	2002      	movpl	r0, #2
 800cabc:	4770      	bx	lr
 800cabe:	b298      	uxth	r0, r3
 800cac0:	b9a8      	cbnz	r0, 800caee <__lo0bits+0x52>
 800cac2:	0c1b      	lsrs	r3, r3, #16
 800cac4:	2010      	movs	r0, #16
 800cac6:	b2da      	uxtb	r2, r3
 800cac8:	b90a      	cbnz	r2, 800cace <__lo0bits+0x32>
 800caca:	3008      	adds	r0, #8
 800cacc:	0a1b      	lsrs	r3, r3, #8
 800cace:	071a      	lsls	r2, r3, #28
 800cad0:	bf04      	itt	eq
 800cad2:	091b      	lsreq	r3, r3, #4
 800cad4:	3004      	addeq	r0, #4
 800cad6:	079a      	lsls	r2, r3, #30
 800cad8:	bf04      	itt	eq
 800cada:	089b      	lsreq	r3, r3, #2
 800cadc:	3002      	addeq	r0, #2
 800cade:	07da      	lsls	r2, r3, #31
 800cae0:	d403      	bmi.n	800caea <__lo0bits+0x4e>
 800cae2:	085b      	lsrs	r3, r3, #1
 800cae4:	f100 0001 	add.w	r0, r0, #1
 800cae8:	d005      	beq.n	800caf6 <__lo0bits+0x5a>
 800caea:	600b      	str	r3, [r1, #0]
 800caec:	4770      	bx	lr
 800caee:	4610      	mov	r0, r2
 800caf0:	e7e9      	b.n	800cac6 <__lo0bits+0x2a>
 800caf2:	2000      	movs	r0, #0
 800caf4:	4770      	bx	lr
 800caf6:	2020      	movs	r0, #32
 800caf8:	4770      	bx	lr
	...

0800cafc <__i2b>:
 800cafc:	b510      	push	{r4, lr}
 800cafe:	460c      	mov	r4, r1
 800cb00:	2101      	movs	r1, #1
 800cb02:	f7ff feb9 	bl	800c878 <_Balloc>
 800cb06:	4602      	mov	r2, r0
 800cb08:	b928      	cbnz	r0, 800cb16 <__i2b+0x1a>
 800cb0a:	4b05      	ldr	r3, [pc, #20]	; (800cb20 <__i2b+0x24>)
 800cb0c:	4805      	ldr	r0, [pc, #20]	; (800cb24 <__i2b+0x28>)
 800cb0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb12:	f000 fe53 	bl	800d7bc <__assert_func>
 800cb16:	2301      	movs	r3, #1
 800cb18:	6144      	str	r4, [r0, #20]
 800cb1a:	6103      	str	r3, [r0, #16]
 800cb1c:	bd10      	pop	{r4, pc}
 800cb1e:	bf00      	nop
 800cb20:	0800f110 	.word	0x0800f110
 800cb24:	0800f200 	.word	0x0800f200

0800cb28 <__multiply>:
 800cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2c:	4691      	mov	r9, r2
 800cb2e:	690a      	ldr	r2, [r1, #16]
 800cb30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	bfb8      	it	lt
 800cb38:	460b      	movlt	r3, r1
 800cb3a:	460c      	mov	r4, r1
 800cb3c:	bfbc      	itt	lt
 800cb3e:	464c      	movlt	r4, r9
 800cb40:	4699      	movlt	r9, r3
 800cb42:	6927      	ldr	r7, [r4, #16]
 800cb44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cb48:	68a3      	ldr	r3, [r4, #8]
 800cb4a:	6861      	ldr	r1, [r4, #4]
 800cb4c:	eb07 060a 	add.w	r6, r7, sl
 800cb50:	42b3      	cmp	r3, r6
 800cb52:	b085      	sub	sp, #20
 800cb54:	bfb8      	it	lt
 800cb56:	3101      	addlt	r1, #1
 800cb58:	f7ff fe8e 	bl	800c878 <_Balloc>
 800cb5c:	b930      	cbnz	r0, 800cb6c <__multiply+0x44>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	4b44      	ldr	r3, [pc, #272]	; (800cc74 <__multiply+0x14c>)
 800cb62:	4845      	ldr	r0, [pc, #276]	; (800cc78 <__multiply+0x150>)
 800cb64:	f240 115d 	movw	r1, #349	; 0x15d
 800cb68:	f000 fe28 	bl	800d7bc <__assert_func>
 800cb6c:	f100 0514 	add.w	r5, r0, #20
 800cb70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cb74:	462b      	mov	r3, r5
 800cb76:	2200      	movs	r2, #0
 800cb78:	4543      	cmp	r3, r8
 800cb7a:	d321      	bcc.n	800cbc0 <__multiply+0x98>
 800cb7c:	f104 0314 	add.w	r3, r4, #20
 800cb80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cb84:	f109 0314 	add.w	r3, r9, #20
 800cb88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cb8c:	9202      	str	r2, [sp, #8]
 800cb8e:	1b3a      	subs	r2, r7, r4
 800cb90:	3a15      	subs	r2, #21
 800cb92:	f022 0203 	bic.w	r2, r2, #3
 800cb96:	3204      	adds	r2, #4
 800cb98:	f104 0115 	add.w	r1, r4, #21
 800cb9c:	428f      	cmp	r7, r1
 800cb9e:	bf38      	it	cc
 800cba0:	2204      	movcc	r2, #4
 800cba2:	9201      	str	r2, [sp, #4]
 800cba4:	9a02      	ldr	r2, [sp, #8]
 800cba6:	9303      	str	r3, [sp, #12]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d80c      	bhi.n	800cbc6 <__multiply+0x9e>
 800cbac:	2e00      	cmp	r6, #0
 800cbae:	dd03      	ble.n	800cbb8 <__multiply+0x90>
 800cbb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d05a      	beq.n	800cc6e <__multiply+0x146>
 800cbb8:	6106      	str	r6, [r0, #16]
 800cbba:	b005      	add	sp, #20
 800cbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc0:	f843 2b04 	str.w	r2, [r3], #4
 800cbc4:	e7d8      	b.n	800cb78 <__multiply+0x50>
 800cbc6:	f8b3 a000 	ldrh.w	sl, [r3]
 800cbca:	f1ba 0f00 	cmp.w	sl, #0
 800cbce:	d024      	beq.n	800cc1a <__multiply+0xf2>
 800cbd0:	f104 0e14 	add.w	lr, r4, #20
 800cbd4:	46a9      	mov	r9, r5
 800cbd6:	f04f 0c00 	mov.w	ip, #0
 800cbda:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cbde:	f8d9 1000 	ldr.w	r1, [r9]
 800cbe2:	fa1f fb82 	uxth.w	fp, r2
 800cbe6:	b289      	uxth	r1, r1
 800cbe8:	fb0a 110b 	mla	r1, sl, fp, r1
 800cbec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cbf0:	f8d9 2000 	ldr.w	r2, [r9]
 800cbf4:	4461      	add	r1, ip
 800cbf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cbfa:	fb0a c20b 	mla	r2, sl, fp, ip
 800cbfe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc02:	b289      	uxth	r1, r1
 800cc04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cc08:	4577      	cmp	r7, lr
 800cc0a:	f849 1b04 	str.w	r1, [r9], #4
 800cc0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc12:	d8e2      	bhi.n	800cbda <__multiply+0xb2>
 800cc14:	9a01      	ldr	r2, [sp, #4]
 800cc16:	f845 c002 	str.w	ip, [r5, r2]
 800cc1a:	9a03      	ldr	r2, [sp, #12]
 800cc1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc20:	3304      	adds	r3, #4
 800cc22:	f1b9 0f00 	cmp.w	r9, #0
 800cc26:	d020      	beq.n	800cc6a <__multiply+0x142>
 800cc28:	6829      	ldr	r1, [r5, #0]
 800cc2a:	f104 0c14 	add.w	ip, r4, #20
 800cc2e:	46ae      	mov	lr, r5
 800cc30:	f04f 0a00 	mov.w	sl, #0
 800cc34:	f8bc b000 	ldrh.w	fp, [ip]
 800cc38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cc3c:	fb09 220b 	mla	r2, r9, fp, r2
 800cc40:	4492      	add	sl, r2
 800cc42:	b289      	uxth	r1, r1
 800cc44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cc48:	f84e 1b04 	str.w	r1, [lr], #4
 800cc4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cc50:	f8be 1000 	ldrh.w	r1, [lr]
 800cc54:	0c12      	lsrs	r2, r2, #16
 800cc56:	fb09 1102 	mla	r1, r9, r2, r1
 800cc5a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cc5e:	4567      	cmp	r7, ip
 800cc60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cc64:	d8e6      	bhi.n	800cc34 <__multiply+0x10c>
 800cc66:	9a01      	ldr	r2, [sp, #4]
 800cc68:	50a9      	str	r1, [r5, r2]
 800cc6a:	3504      	adds	r5, #4
 800cc6c:	e79a      	b.n	800cba4 <__multiply+0x7c>
 800cc6e:	3e01      	subs	r6, #1
 800cc70:	e79c      	b.n	800cbac <__multiply+0x84>
 800cc72:	bf00      	nop
 800cc74:	0800f110 	.word	0x0800f110
 800cc78:	0800f200 	.word	0x0800f200

0800cc7c <__pow5mult>:
 800cc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc80:	4615      	mov	r5, r2
 800cc82:	f012 0203 	ands.w	r2, r2, #3
 800cc86:	4606      	mov	r6, r0
 800cc88:	460f      	mov	r7, r1
 800cc8a:	d007      	beq.n	800cc9c <__pow5mult+0x20>
 800cc8c:	4c25      	ldr	r4, [pc, #148]	; (800cd24 <__pow5mult+0xa8>)
 800cc8e:	3a01      	subs	r2, #1
 800cc90:	2300      	movs	r3, #0
 800cc92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc96:	f7ff fe51 	bl	800c93c <__multadd>
 800cc9a:	4607      	mov	r7, r0
 800cc9c:	10ad      	asrs	r5, r5, #2
 800cc9e:	d03d      	beq.n	800cd1c <__pow5mult+0xa0>
 800cca0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cca2:	b97c      	cbnz	r4, 800ccc4 <__pow5mult+0x48>
 800cca4:	2010      	movs	r0, #16
 800cca6:	f7ff fdbf 	bl	800c828 <malloc>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	6270      	str	r0, [r6, #36]	; 0x24
 800ccae:	b928      	cbnz	r0, 800ccbc <__pow5mult+0x40>
 800ccb0:	4b1d      	ldr	r3, [pc, #116]	; (800cd28 <__pow5mult+0xac>)
 800ccb2:	481e      	ldr	r0, [pc, #120]	; (800cd2c <__pow5mult+0xb0>)
 800ccb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ccb8:	f000 fd80 	bl	800d7bc <__assert_func>
 800ccbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ccc0:	6004      	str	r4, [r0, #0]
 800ccc2:	60c4      	str	r4, [r0, #12]
 800ccc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ccc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cccc:	b94c      	cbnz	r4, 800cce2 <__pow5mult+0x66>
 800ccce:	f240 2171 	movw	r1, #625	; 0x271
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	f7ff ff12 	bl	800cafc <__i2b>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	f8c8 0008 	str.w	r0, [r8, #8]
 800ccde:	4604      	mov	r4, r0
 800cce0:	6003      	str	r3, [r0, #0]
 800cce2:	f04f 0900 	mov.w	r9, #0
 800cce6:	07eb      	lsls	r3, r5, #31
 800cce8:	d50a      	bpl.n	800cd00 <__pow5mult+0x84>
 800ccea:	4639      	mov	r1, r7
 800ccec:	4622      	mov	r2, r4
 800ccee:	4630      	mov	r0, r6
 800ccf0:	f7ff ff1a 	bl	800cb28 <__multiply>
 800ccf4:	4639      	mov	r1, r7
 800ccf6:	4680      	mov	r8, r0
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	f7ff fdfd 	bl	800c8f8 <_Bfree>
 800ccfe:	4647      	mov	r7, r8
 800cd00:	106d      	asrs	r5, r5, #1
 800cd02:	d00b      	beq.n	800cd1c <__pow5mult+0xa0>
 800cd04:	6820      	ldr	r0, [r4, #0]
 800cd06:	b938      	cbnz	r0, 800cd18 <__pow5mult+0x9c>
 800cd08:	4622      	mov	r2, r4
 800cd0a:	4621      	mov	r1, r4
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	f7ff ff0b 	bl	800cb28 <__multiply>
 800cd12:	6020      	str	r0, [r4, #0]
 800cd14:	f8c0 9000 	str.w	r9, [r0]
 800cd18:	4604      	mov	r4, r0
 800cd1a:	e7e4      	b.n	800cce6 <__pow5mult+0x6a>
 800cd1c:	4638      	mov	r0, r7
 800cd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd22:	bf00      	nop
 800cd24:	0800f350 	.word	0x0800f350
 800cd28:	0800f09e 	.word	0x0800f09e
 800cd2c:	0800f200 	.word	0x0800f200

0800cd30 <__lshift>:
 800cd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd34:	460c      	mov	r4, r1
 800cd36:	6849      	ldr	r1, [r1, #4]
 800cd38:	6923      	ldr	r3, [r4, #16]
 800cd3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd3e:	68a3      	ldr	r3, [r4, #8]
 800cd40:	4607      	mov	r7, r0
 800cd42:	4691      	mov	r9, r2
 800cd44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd48:	f108 0601 	add.w	r6, r8, #1
 800cd4c:	42b3      	cmp	r3, r6
 800cd4e:	db0b      	blt.n	800cd68 <__lshift+0x38>
 800cd50:	4638      	mov	r0, r7
 800cd52:	f7ff fd91 	bl	800c878 <_Balloc>
 800cd56:	4605      	mov	r5, r0
 800cd58:	b948      	cbnz	r0, 800cd6e <__lshift+0x3e>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	4b2a      	ldr	r3, [pc, #168]	; (800ce08 <__lshift+0xd8>)
 800cd5e:	482b      	ldr	r0, [pc, #172]	; (800ce0c <__lshift+0xdc>)
 800cd60:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cd64:	f000 fd2a 	bl	800d7bc <__assert_func>
 800cd68:	3101      	adds	r1, #1
 800cd6a:	005b      	lsls	r3, r3, #1
 800cd6c:	e7ee      	b.n	800cd4c <__lshift+0x1c>
 800cd6e:	2300      	movs	r3, #0
 800cd70:	f100 0114 	add.w	r1, r0, #20
 800cd74:	f100 0210 	add.w	r2, r0, #16
 800cd78:	4618      	mov	r0, r3
 800cd7a:	4553      	cmp	r3, sl
 800cd7c:	db37      	blt.n	800cdee <__lshift+0xbe>
 800cd7e:	6920      	ldr	r0, [r4, #16]
 800cd80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd84:	f104 0314 	add.w	r3, r4, #20
 800cd88:	f019 091f 	ands.w	r9, r9, #31
 800cd8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cd94:	d02f      	beq.n	800cdf6 <__lshift+0xc6>
 800cd96:	f1c9 0e20 	rsb	lr, r9, #32
 800cd9a:	468a      	mov	sl, r1
 800cd9c:	f04f 0c00 	mov.w	ip, #0
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	fa02 f209 	lsl.w	r2, r2, r9
 800cda6:	ea42 020c 	orr.w	r2, r2, ip
 800cdaa:	f84a 2b04 	str.w	r2, [sl], #4
 800cdae:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdb2:	4298      	cmp	r0, r3
 800cdb4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cdb8:	d8f2      	bhi.n	800cda0 <__lshift+0x70>
 800cdba:	1b03      	subs	r3, r0, r4
 800cdbc:	3b15      	subs	r3, #21
 800cdbe:	f023 0303 	bic.w	r3, r3, #3
 800cdc2:	3304      	adds	r3, #4
 800cdc4:	f104 0215 	add.w	r2, r4, #21
 800cdc8:	4290      	cmp	r0, r2
 800cdca:	bf38      	it	cc
 800cdcc:	2304      	movcc	r3, #4
 800cdce:	f841 c003 	str.w	ip, [r1, r3]
 800cdd2:	f1bc 0f00 	cmp.w	ip, #0
 800cdd6:	d001      	beq.n	800cddc <__lshift+0xac>
 800cdd8:	f108 0602 	add.w	r6, r8, #2
 800cddc:	3e01      	subs	r6, #1
 800cdde:	4638      	mov	r0, r7
 800cde0:	612e      	str	r6, [r5, #16]
 800cde2:	4621      	mov	r1, r4
 800cde4:	f7ff fd88 	bl	800c8f8 <_Bfree>
 800cde8:	4628      	mov	r0, r5
 800cdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdee:	f842 0f04 	str.w	r0, [r2, #4]!
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	e7c1      	b.n	800cd7a <__lshift+0x4a>
 800cdf6:	3904      	subs	r1, #4
 800cdf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdfc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce00:	4298      	cmp	r0, r3
 800ce02:	d8f9      	bhi.n	800cdf8 <__lshift+0xc8>
 800ce04:	e7ea      	b.n	800cddc <__lshift+0xac>
 800ce06:	bf00      	nop
 800ce08:	0800f110 	.word	0x0800f110
 800ce0c:	0800f200 	.word	0x0800f200

0800ce10 <__mcmp>:
 800ce10:	b530      	push	{r4, r5, lr}
 800ce12:	6902      	ldr	r2, [r0, #16]
 800ce14:	690c      	ldr	r4, [r1, #16]
 800ce16:	1b12      	subs	r2, r2, r4
 800ce18:	d10e      	bne.n	800ce38 <__mcmp+0x28>
 800ce1a:	f100 0314 	add.w	r3, r0, #20
 800ce1e:	3114      	adds	r1, #20
 800ce20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce30:	42a5      	cmp	r5, r4
 800ce32:	d003      	beq.n	800ce3c <__mcmp+0x2c>
 800ce34:	d305      	bcc.n	800ce42 <__mcmp+0x32>
 800ce36:	2201      	movs	r2, #1
 800ce38:	4610      	mov	r0, r2
 800ce3a:	bd30      	pop	{r4, r5, pc}
 800ce3c:	4283      	cmp	r3, r0
 800ce3e:	d3f3      	bcc.n	800ce28 <__mcmp+0x18>
 800ce40:	e7fa      	b.n	800ce38 <__mcmp+0x28>
 800ce42:	f04f 32ff 	mov.w	r2, #4294967295
 800ce46:	e7f7      	b.n	800ce38 <__mcmp+0x28>

0800ce48 <__mdiff>:
 800ce48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce4c:	460c      	mov	r4, r1
 800ce4e:	4606      	mov	r6, r0
 800ce50:	4611      	mov	r1, r2
 800ce52:	4620      	mov	r0, r4
 800ce54:	4690      	mov	r8, r2
 800ce56:	f7ff ffdb 	bl	800ce10 <__mcmp>
 800ce5a:	1e05      	subs	r5, r0, #0
 800ce5c:	d110      	bne.n	800ce80 <__mdiff+0x38>
 800ce5e:	4629      	mov	r1, r5
 800ce60:	4630      	mov	r0, r6
 800ce62:	f7ff fd09 	bl	800c878 <_Balloc>
 800ce66:	b930      	cbnz	r0, 800ce76 <__mdiff+0x2e>
 800ce68:	4b3a      	ldr	r3, [pc, #232]	; (800cf54 <__mdiff+0x10c>)
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	f240 2132 	movw	r1, #562	; 0x232
 800ce70:	4839      	ldr	r0, [pc, #228]	; (800cf58 <__mdiff+0x110>)
 800ce72:	f000 fca3 	bl	800d7bc <__assert_func>
 800ce76:	2301      	movs	r3, #1
 800ce78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ce7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce80:	bfa4      	itt	ge
 800ce82:	4643      	movge	r3, r8
 800ce84:	46a0      	movge	r8, r4
 800ce86:	4630      	mov	r0, r6
 800ce88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ce8c:	bfa6      	itte	ge
 800ce8e:	461c      	movge	r4, r3
 800ce90:	2500      	movge	r5, #0
 800ce92:	2501      	movlt	r5, #1
 800ce94:	f7ff fcf0 	bl	800c878 <_Balloc>
 800ce98:	b920      	cbnz	r0, 800cea4 <__mdiff+0x5c>
 800ce9a:	4b2e      	ldr	r3, [pc, #184]	; (800cf54 <__mdiff+0x10c>)
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cea2:	e7e5      	b.n	800ce70 <__mdiff+0x28>
 800cea4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cea8:	6926      	ldr	r6, [r4, #16]
 800ceaa:	60c5      	str	r5, [r0, #12]
 800ceac:	f104 0914 	add.w	r9, r4, #20
 800ceb0:	f108 0514 	add.w	r5, r8, #20
 800ceb4:	f100 0e14 	add.w	lr, r0, #20
 800ceb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cebc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cec0:	f108 0210 	add.w	r2, r8, #16
 800cec4:	46f2      	mov	sl, lr
 800cec6:	2100      	movs	r1, #0
 800cec8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cecc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ced0:	fa1f f883 	uxth.w	r8, r3
 800ced4:	fa11 f18b 	uxtah	r1, r1, fp
 800ced8:	0c1b      	lsrs	r3, r3, #16
 800ceda:	eba1 0808 	sub.w	r8, r1, r8
 800cede:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cee2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cee6:	fa1f f888 	uxth.w	r8, r8
 800ceea:	1419      	asrs	r1, r3, #16
 800ceec:	454e      	cmp	r6, r9
 800ceee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cef2:	f84a 3b04 	str.w	r3, [sl], #4
 800cef6:	d8e7      	bhi.n	800cec8 <__mdiff+0x80>
 800cef8:	1b33      	subs	r3, r6, r4
 800cefa:	3b15      	subs	r3, #21
 800cefc:	f023 0303 	bic.w	r3, r3, #3
 800cf00:	3304      	adds	r3, #4
 800cf02:	3415      	adds	r4, #21
 800cf04:	42a6      	cmp	r6, r4
 800cf06:	bf38      	it	cc
 800cf08:	2304      	movcc	r3, #4
 800cf0a:	441d      	add	r5, r3
 800cf0c:	4473      	add	r3, lr
 800cf0e:	469e      	mov	lr, r3
 800cf10:	462e      	mov	r6, r5
 800cf12:	4566      	cmp	r6, ip
 800cf14:	d30e      	bcc.n	800cf34 <__mdiff+0xec>
 800cf16:	f10c 0203 	add.w	r2, ip, #3
 800cf1a:	1b52      	subs	r2, r2, r5
 800cf1c:	f022 0203 	bic.w	r2, r2, #3
 800cf20:	3d03      	subs	r5, #3
 800cf22:	45ac      	cmp	ip, r5
 800cf24:	bf38      	it	cc
 800cf26:	2200      	movcc	r2, #0
 800cf28:	441a      	add	r2, r3
 800cf2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cf2e:	b17b      	cbz	r3, 800cf50 <__mdiff+0x108>
 800cf30:	6107      	str	r7, [r0, #16]
 800cf32:	e7a3      	b.n	800ce7c <__mdiff+0x34>
 800cf34:	f856 8b04 	ldr.w	r8, [r6], #4
 800cf38:	fa11 f288 	uxtah	r2, r1, r8
 800cf3c:	1414      	asrs	r4, r2, #16
 800cf3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cf42:	b292      	uxth	r2, r2
 800cf44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cf48:	f84e 2b04 	str.w	r2, [lr], #4
 800cf4c:	1421      	asrs	r1, r4, #16
 800cf4e:	e7e0      	b.n	800cf12 <__mdiff+0xca>
 800cf50:	3f01      	subs	r7, #1
 800cf52:	e7ea      	b.n	800cf2a <__mdiff+0xe2>
 800cf54:	0800f110 	.word	0x0800f110
 800cf58:	0800f200 	.word	0x0800f200

0800cf5c <__ulp>:
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	ed8d 0b00 	vstr	d0, [sp]
 800cf62:	9b01      	ldr	r3, [sp, #4]
 800cf64:	4912      	ldr	r1, [pc, #72]	; (800cfb0 <__ulp+0x54>)
 800cf66:	4019      	ands	r1, r3
 800cf68:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cf6c:	2900      	cmp	r1, #0
 800cf6e:	dd05      	ble.n	800cf7c <__ulp+0x20>
 800cf70:	2200      	movs	r2, #0
 800cf72:	460b      	mov	r3, r1
 800cf74:	ec43 2b10 	vmov	d0, r2, r3
 800cf78:	b002      	add	sp, #8
 800cf7a:	4770      	bx	lr
 800cf7c:	4249      	negs	r1, r1
 800cf7e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cf82:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cf86:	f04f 0200 	mov.w	r2, #0
 800cf8a:	f04f 0300 	mov.w	r3, #0
 800cf8e:	da04      	bge.n	800cf9a <__ulp+0x3e>
 800cf90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cf94:	fa41 f300 	asr.w	r3, r1, r0
 800cf98:	e7ec      	b.n	800cf74 <__ulp+0x18>
 800cf9a:	f1a0 0114 	sub.w	r1, r0, #20
 800cf9e:	291e      	cmp	r1, #30
 800cfa0:	bfda      	itte	le
 800cfa2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cfa6:	fa20 f101 	lsrle.w	r1, r0, r1
 800cfaa:	2101      	movgt	r1, #1
 800cfac:	460a      	mov	r2, r1
 800cfae:	e7e1      	b.n	800cf74 <__ulp+0x18>
 800cfb0:	7ff00000 	.word	0x7ff00000

0800cfb4 <__b2d>:
 800cfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb6:	6905      	ldr	r5, [r0, #16]
 800cfb8:	f100 0714 	add.w	r7, r0, #20
 800cfbc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cfc0:	1f2e      	subs	r6, r5, #4
 800cfc2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f7ff fd48 	bl	800ca5c <__hi0bits>
 800cfcc:	f1c0 0320 	rsb	r3, r0, #32
 800cfd0:	280a      	cmp	r0, #10
 800cfd2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d050 <__b2d+0x9c>
 800cfd6:	600b      	str	r3, [r1, #0]
 800cfd8:	dc14      	bgt.n	800d004 <__b2d+0x50>
 800cfda:	f1c0 0e0b 	rsb	lr, r0, #11
 800cfde:	fa24 f10e 	lsr.w	r1, r4, lr
 800cfe2:	42b7      	cmp	r7, r6
 800cfe4:	ea41 030c 	orr.w	r3, r1, ip
 800cfe8:	bf34      	ite	cc
 800cfea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cfee:	2100      	movcs	r1, #0
 800cff0:	3015      	adds	r0, #21
 800cff2:	fa04 f000 	lsl.w	r0, r4, r0
 800cff6:	fa21 f10e 	lsr.w	r1, r1, lr
 800cffa:	ea40 0201 	orr.w	r2, r0, r1
 800cffe:	ec43 2b10 	vmov	d0, r2, r3
 800d002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d004:	42b7      	cmp	r7, r6
 800d006:	bf3a      	itte	cc
 800d008:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d00c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d010:	2100      	movcs	r1, #0
 800d012:	380b      	subs	r0, #11
 800d014:	d017      	beq.n	800d046 <__b2d+0x92>
 800d016:	f1c0 0c20 	rsb	ip, r0, #32
 800d01a:	fa04 f500 	lsl.w	r5, r4, r0
 800d01e:	42be      	cmp	r6, r7
 800d020:	fa21 f40c 	lsr.w	r4, r1, ip
 800d024:	ea45 0504 	orr.w	r5, r5, r4
 800d028:	bf8c      	ite	hi
 800d02a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d02e:	2400      	movls	r4, #0
 800d030:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d034:	fa01 f000 	lsl.w	r0, r1, r0
 800d038:	fa24 f40c 	lsr.w	r4, r4, ip
 800d03c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d040:	ea40 0204 	orr.w	r2, r0, r4
 800d044:	e7db      	b.n	800cffe <__b2d+0x4a>
 800d046:	ea44 030c 	orr.w	r3, r4, ip
 800d04a:	460a      	mov	r2, r1
 800d04c:	e7d7      	b.n	800cffe <__b2d+0x4a>
 800d04e:	bf00      	nop
 800d050:	3ff00000 	.word	0x3ff00000

0800d054 <__d2b>:
 800d054:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d058:	4689      	mov	r9, r1
 800d05a:	2101      	movs	r1, #1
 800d05c:	ec57 6b10 	vmov	r6, r7, d0
 800d060:	4690      	mov	r8, r2
 800d062:	f7ff fc09 	bl	800c878 <_Balloc>
 800d066:	4604      	mov	r4, r0
 800d068:	b930      	cbnz	r0, 800d078 <__d2b+0x24>
 800d06a:	4602      	mov	r2, r0
 800d06c:	4b25      	ldr	r3, [pc, #148]	; (800d104 <__d2b+0xb0>)
 800d06e:	4826      	ldr	r0, [pc, #152]	; (800d108 <__d2b+0xb4>)
 800d070:	f240 310a 	movw	r1, #778	; 0x30a
 800d074:	f000 fba2 	bl	800d7bc <__assert_func>
 800d078:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d07c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d080:	bb35      	cbnz	r5, 800d0d0 <__d2b+0x7c>
 800d082:	2e00      	cmp	r6, #0
 800d084:	9301      	str	r3, [sp, #4]
 800d086:	d028      	beq.n	800d0da <__d2b+0x86>
 800d088:	4668      	mov	r0, sp
 800d08a:	9600      	str	r6, [sp, #0]
 800d08c:	f7ff fd06 	bl	800ca9c <__lo0bits>
 800d090:	9900      	ldr	r1, [sp, #0]
 800d092:	b300      	cbz	r0, 800d0d6 <__d2b+0x82>
 800d094:	9a01      	ldr	r2, [sp, #4]
 800d096:	f1c0 0320 	rsb	r3, r0, #32
 800d09a:	fa02 f303 	lsl.w	r3, r2, r3
 800d09e:	430b      	orrs	r3, r1
 800d0a0:	40c2      	lsrs	r2, r0
 800d0a2:	6163      	str	r3, [r4, #20]
 800d0a4:	9201      	str	r2, [sp, #4]
 800d0a6:	9b01      	ldr	r3, [sp, #4]
 800d0a8:	61a3      	str	r3, [r4, #24]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	bf14      	ite	ne
 800d0ae:	2202      	movne	r2, #2
 800d0b0:	2201      	moveq	r2, #1
 800d0b2:	6122      	str	r2, [r4, #16]
 800d0b4:	b1d5      	cbz	r5, 800d0ec <__d2b+0x98>
 800d0b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d0ba:	4405      	add	r5, r0
 800d0bc:	f8c9 5000 	str.w	r5, [r9]
 800d0c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d0c4:	f8c8 0000 	str.w	r0, [r8]
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	b003      	add	sp, #12
 800d0cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0d4:	e7d5      	b.n	800d082 <__d2b+0x2e>
 800d0d6:	6161      	str	r1, [r4, #20]
 800d0d8:	e7e5      	b.n	800d0a6 <__d2b+0x52>
 800d0da:	a801      	add	r0, sp, #4
 800d0dc:	f7ff fcde 	bl	800ca9c <__lo0bits>
 800d0e0:	9b01      	ldr	r3, [sp, #4]
 800d0e2:	6163      	str	r3, [r4, #20]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	6122      	str	r2, [r4, #16]
 800d0e8:	3020      	adds	r0, #32
 800d0ea:	e7e3      	b.n	800d0b4 <__d2b+0x60>
 800d0ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d0f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d0f4:	f8c9 0000 	str.w	r0, [r9]
 800d0f8:	6918      	ldr	r0, [r3, #16]
 800d0fa:	f7ff fcaf 	bl	800ca5c <__hi0bits>
 800d0fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d102:	e7df      	b.n	800d0c4 <__d2b+0x70>
 800d104:	0800f110 	.word	0x0800f110
 800d108:	0800f200 	.word	0x0800f200

0800d10c <__ratio>:
 800d10c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d110:	4688      	mov	r8, r1
 800d112:	4669      	mov	r1, sp
 800d114:	4681      	mov	r9, r0
 800d116:	f7ff ff4d 	bl	800cfb4 <__b2d>
 800d11a:	a901      	add	r1, sp, #4
 800d11c:	4640      	mov	r0, r8
 800d11e:	ec55 4b10 	vmov	r4, r5, d0
 800d122:	f7ff ff47 	bl	800cfb4 <__b2d>
 800d126:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d12a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d12e:	eba3 0c02 	sub.w	ip, r3, r2
 800d132:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d136:	1a9b      	subs	r3, r3, r2
 800d138:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d13c:	ec51 0b10 	vmov	r0, r1, d0
 800d140:	2b00      	cmp	r3, #0
 800d142:	bfd6      	itet	le
 800d144:	460a      	movle	r2, r1
 800d146:	462a      	movgt	r2, r5
 800d148:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d14c:	468b      	mov	fp, r1
 800d14e:	462f      	mov	r7, r5
 800d150:	bfd4      	ite	le
 800d152:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d156:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d15a:	4620      	mov	r0, r4
 800d15c:	ee10 2a10 	vmov	r2, s0
 800d160:	465b      	mov	r3, fp
 800d162:	4639      	mov	r1, r7
 800d164:	f7f3 fb72 	bl	800084c <__aeabi_ddiv>
 800d168:	ec41 0b10 	vmov	d0, r0, r1
 800d16c:	b003      	add	sp, #12
 800d16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d172 <__copybits>:
 800d172:	3901      	subs	r1, #1
 800d174:	b570      	push	{r4, r5, r6, lr}
 800d176:	1149      	asrs	r1, r1, #5
 800d178:	6914      	ldr	r4, [r2, #16]
 800d17a:	3101      	adds	r1, #1
 800d17c:	f102 0314 	add.w	r3, r2, #20
 800d180:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d184:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d188:	1f05      	subs	r5, r0, #4
 800d18a:	42a3      	cmp	r3, r4
 800d18c:	d30c      	bcc.n	800d1a8 <__copybits+0x36>
 800d18e:	1aa3      	subs	r3, r4, r2
 800d190:	3b11      	subs	r3, #17
 800d192:	f023 0303 	bic.w	r3, r3, #3
 800d196:	3211      	adds	r2, #17
 800d198:	42a2      	cmp	r2, r4
 800d19a:	bf88      	it	hi
 800d19c:	2300      	movhi	r3, #0
 800d19e:	4418      	add	r0, r3
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4288      	cmp	r0, r1
 800d1a4:	d305      	bcc.n	800d1b2 <__copybits+0x40>
 800d1a6:	bd70      	pop	{r4, r5, r6, pc}
 800d1a8:	f853 6b04 	ldr.w	r6, [r3], #4
 800d1ac:	f845 6f04 	str.w	r6, [r5, #4]!
 800d1b0:	e7eb      	b.n	800d18a <__copybits+0x18>
 800d1b2:	f840 3b04 	str.w	r3, [r0], #4
 800d1b6:	e7f4      	b.n	800d1a2 <__copybits+0x30>

0800d1b8 <__any_on>:
 800d1b8:	f100 0214 	add.w	r2, r0, #20
 800d1bc:	6900      	ldr	r0, [r0, #16]
 800d1be:	114b      	asrs	r3, r1, #5
 800d1c0:	4298      	cmp	r0, r3
 800d1c2:	b510      	push	{r4, lr}
 800d1c4:	db11      	blt.n	800d1ea <__any_on+0x32>
 800d1c6:	dd0a      	ble.n	800d1de <__any_on+0x26>
 800d1c8:	f011 011f 	ands.w	r1, r1, #31
 800d1cc:	d007      	beq.n	800d1de <__any_on+0x26>
 800d1ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d1d2:	fa24 f001 	lsr.w	r0, r4, r1
 800d1d6:	fa00 f101 	lsl.w	r1, r0, r1
 800d1da:	428c      	cmp	r4, r1
 800d1dc:	d10b      	bne.n	800d1f6 <__any_on+0x3e>
 800d1de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d803      	bhi.n	800d1ee <__any_on+0x36>
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	bd10      	pop	{r4, pc}
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	e7f7      	b.n	800d1de <__any_on+0x26>
 800d1ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1f2:	2900      	cmp	r1, #0
 800d1f4:	d0f5      	beq.n	800d1e2 <__any_on+0x2a>
 800d1f6:	2001      	movs	r0, #1
 800d1f8:	e7f6      	b.n	800d1e8 <__any_on+0x30>

0800d1fa <_calloc_r>:
 800d1fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1fc:	fba1 2402 	umull	r2, r4, r1, r2
 800d200:	b94c      	cbnz	r4, 800d216 <_calloc_r+0x1c>
 800d202:	4611      	mov	r1, r2
 800d204:	9201      	str	r2, [sp, #4]
 800d206:	f000 f87b 	bl	800d300 <_malloc_r>
 800d20a:	9a01      	ldr	r2, [sp, #4]
 800d20c:	4605      	mov	r5, r0
 800d20e:	b930      	cbnz	r0, 800d21e <_calloc_r+0x24>
 800d210:	4628      	mov	r0, r5
 800d212:	b003      	add	sp, #12
 800d214:	bd30      	pop	{r4, r5, pc}
 800d216:	220c      	movs	r2, #12
 800d218:	6002      	str	r2, [r0, #0]
 800d21a:	2500      	movs	r5, #0
 800d21c:	e7f8      	b.n	800d210 <_calloc_r+0x16>
 800d21e:	4621      	mov	r1, r4
 800d220:	f7fc f8dc 	bl	80093dc <memset>
 800d224:	e7f4      	b.n	800d210 <_calloc_r+0x16>
	...

0800d228 <_free_r>:
 800d228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d22a:	2900      	cmp	r1, #0
 800d22c:	d044      	beq.n	800d2b8 <_free_r+0x90>
 800d22e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d232:	9001      	str	r0, [sp, #4]
 800d234:	2b00      	cmp	r3, #0
 800d236:	f1a1 0404 	sub.w	r4, r1, #4
 800d23a:	bfb8      	it	lt
 800d23c:	18e4      	addlt	r4, r4, r3
 800d23e:	f000 fb4b 	bl	800d8d8 <__malloc_lock>
 800d242:	4a1e      	ldr	r2, [pc, #120]	; (800d2bc <_free_r+0x94>)
 800d244:	9801      	ldr	r0, [sp, #4]
 800d246:	6813      	ldr	r3, [r2, #0]
 800d248:	b933      	cbnz	r3, 800d258 <_free_r+0x30>
 800d24a:	6063      	str	r3, [r4, #4]
 800d24c:	6014      	str	r4, [r2, #0]
 800d24e:	b003      	add	sp, #12
 800d250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d254:	f000 bb46 	b.w	800d8e4 <__malloc_unlock>
 800d258:	42a3      	cmp	r3, r4
 800d25a:	d908      	bls.n	800d26e <_free_r+0x46>
 800d25c:	6825      	ldr	r5, [r4, #0]
 800d25e:	1961      	adds	r1, r4, r5
 800d260:	428b      	cmp	r3, r1
 800d262:	bf01      	itttt	eq
 800d264:	6819      	ldreq	r1, [r3, #0]
 800d266:	685b      	ldreq	r3, [r3, #4]
 800d268:	1949      	addeq	r1, r1, r5
 800d26a:	6021      	streq	r1, [r4, #0]
 800d26c:	e7ed      	b.n	800d24a <_free_r+0x22>
 800d26e:	461a      	mov	r2, r3
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	b10b      	cbz	r3, 800d278 <_free_r+0x50>
 800d274:	42a3      	cmp	r3, r4
 800d276:	d9fa      	bls.n	800d26e <_free_r+0x46>
 800d278:	6811      	ldr	r1, [r2, #0]
 800d27a:	1855      	adds	r5, r2, r1
 800d27c:	42a5      	cmp	r5, r4
 800d27e:	d10b      	bne.n	800d298 <_free_r+0x70>
 800d280:	6824      	ldr	r4, [r4, #0]
 800d282:	4421      	add	r1, r4
 800d284:	1854      	adds	r4, r2, r1
 800d286:	42a3      	cmp	r3, r4
 800d288:	6011      	str	r1, [r2, #0]
 800d28a:	d1e0      	bne.n	800d24e <_free_r+0x26>
 800d28c:	681c      	ldr	r4, [r3, #0]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	6053      	str	r3, [r2, #4]
 800d292:	4421      	add	r1, r4
 800d294:	6011      	str	r1, [r2, #0]
 800d296:	e7da      	b.n	800d24e <_free_r+0x26>
 800d298:	d902      	bls.n	800d2a0 <_free_r+0x78>
 800d29a:	230c      	movs	r3, #12
 800d29c:	6003      	str	r3, [r0, #0]
 800d29e:	e7d6      	b.n	800d24e <_free_r+0x26>
 800d2a0:	6825      	ldr	r5, [r4, #0]
 800d2a2:	1961      	adds	r1, r4, r5
 800d2a4:	428b      	cmp	r3, r1
 800d2a6:	bf04      	itt	eq
 800d2a8:	6819      	ldreq	r1, [r3, #0]
 800d2aa:	685b      	ldreq	r3, [r3, #4]
 800d2ac:	6063      	str	r3, [r4, #4]
 800d2ae:	bf04      	itt	eq
 800d2b0:	1949      	addeq	r1, r1, r5
 800d2b2:	6021      	streq	r1, [r4, #0]
 800d2b4:	6054      	str	r4, [r2, #4]
 800d2b6:	e7ca      	b.n	800d24e <_free_r+0x26>
 800d2b8:	b003      	add	sp, #12
 800d2ba:	bd30      	pop	{r4, r5, pc}
 800d2bc:	20000aa4 	.word	0x20000aa4

0800d2c0 <sbrk_aligned>:
 800d2c0:	b570      	push	{r4, r5, r6, lr}
 800d2c2:	4e0e      	ldr	r6, [pc, #56]	; (800d2fc <sbrk_aligned+0x3c>)
 800d2c4:	460c      	mov	r4, r1
 800d2c6:	6831      	ldr	r1, [r6, #0]
 800d2c8:	4605      	mov	r5, r0
 800d2ca:	b911      	cbnz	r1, 800d2d2 <sbrk_aligned+0x12>
 800d2cc:	f000 f9f0 	bl	800d6b0 <_sbrk_r>
 800d2d0:	6030      	str	r0, [r6, #0]
 800d2d2:	4621      	mov	r1, r4
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	f000 f9eb 	bl	800d6b0 <_sbrk_r>
 800d2da:	1c43      	adds	r3, r0, #1
 800d2dc:	d00a      	beq.n	800d2f4 <sbrk_aligned+0x34>
 800d2de:	1cc4      	adds	r4, r0, #3
 800d2e0:	f024 0403 	bic.w	r4, r4, #3
 800d2e4:	42a0      	cmp	r0, r4
 800d2e6:	d007      	beq.n	800d2f8 <sbrk_aligned+0x38>
 800d2e8:	1a21      	subs	r1, r4, r0
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f000 f9e0 	bl	800d6b0 <_sbrk_r>
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	d101      	bne.n	800d2f8 <sbrk_aligned+0x38>
 800d2f4:	f04f 34ff 	mov.w	r4, #4294967295
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	bd70      	pop	{r4, r5, r6, pc}
 800d2fc:	20000aa8 	.word	0x20000aa8

0800d300 <_malloc_r>:
 800d300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d304:	1ccd      	adds	r5, r1, #3
 800d306:	f025 0503 	bic.w	r5, r5, #3
 800d30a:	3508      	adds	r5, #8
 800d30c:	2d0c      	cmp	r5, #12
 800d30e:	bf38      	it	cc
 800d310:	250c      	movcc	r5, #12
 800d312:	2d00      	cmp	r5, #0
 800d314:	4607      	mov	r7, r0
 800d316:	db01      	blt.n	800d31c <_malloc_r+0x1c>
 800d318:	42a9      	cmp	r1, r5
 800d31a:	d905      	bls.n	800d328 <_malloc_r+0x28>
 800d31c:	230c      	movs	r3, #12
 800d31e:	603b      	str	r3, [r7, #0]
 800d320:	2600      	movs	r6, #0
 800d322:	4630      	mov	r0, r6
 800d324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d328:	4e2e      	ldr	r6, [pc, #184]	; (800d3e4 <_malloc_r+0xe4>)
 800d32a:	f000 fad5 	bl	800d8d8 <__malloc_lock>
 800d32e:	6833      	ldr	r3, [r6, #0]
 800d330:	461c      	mov	r4, r3
 800d332:	bb34      	cbnz	r4, 800d382 <_malloc_r+0x82>
 800d334:	4629      	mov	r1, r5
 800d336:	4638      	mov	r0, r7
 800d338:	f7ff ffc2 	bl	800d2c0 <sbrk_aligned>
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	4604      	mov	r4, r0
 800d340:	d14d      	bne.n	800d3de <_malloc_r+0xde>
 800d342:	6834      	ldr	r4, [r6, #0]
 800d344:	4626      	mov	r6, r4
 800d346:	2e00      	cmp	r6, #0
 800d348:	d140      	bne.n	800d3cc <_malloc_r+0xcc>
 800d34a:	6823      	ldr	r3, [r4, #0]
 800d34c:	4631      	mov	r1, r6
 800d34e:	4638      	mov	r0, r7
 800d350:	eb04 0803 	add.w	r8, r4, r3
 800d354:	f000 f9ac 	bl	800d6b0 <_sbrk_r>
 800d358:	4580      	cmp	r8, r0
 800d35a:	d13a      	bne.n	800d3d2 <_malloc_r+0xd2>
 800d35c:	6821      	ldr	r1, [r4, #0]
 800d35e:	3503      	adds	r5, #3
 800d360:	1a6d      	subs	r5, r5, r1
 800d362:	f025 0503 	bic.w	r5, r5, #3
 800d366:	3508      	adds	r5, #8
 800d368:	2d0c      	cmp	r5, #12
 800d36a:	bf38      	it	cc
 800d36c:	250c      	movcc	r5, #12
 800d36e:	4629      	mov	r1, r5
 800d370:	4638      	mov	r0, r7
 800d372:	f7ff ffa5 	bl	800d2c0 <sbrk_aligned>
 800d376:	3001      	adds	r0, #1
 800d378:	d02b      	beq.n	800d3d2 <_malloc_r+0xd2>
 800d37a:	6823      	ldr	r3, [r4, #0]
 800d37c:	442b      	add	r3, r5
 800d37e:	6023      	str	r3, [r4, #0]
 800d380:	e00e      	b.n	800d3a0 <_malloc_r+0xa0>
 800d382:	6822      	ldr	r2, [r4, #0]
 800d384:	1b52      	subs	r2, r2, r5
 800d386:	d41e      	bmi.n	800d3c6 <_malloc_r+0xc6>
 800d388:	2a0b      	cmp	r2, #11
 800d38a:	d916      	bls.n	800d3ba <_malloc_r+0xba>
 800d38c:	1961      	adds	r1, r4, r5
 800d38e:	42a3      	cmp	r3, r4
 800d390:	6025      	str	r5, [r4, #0]
 800d392:	bf18      	it	ne
 800d394:	6059      	strne	r1, [r3, #4]
 800d396:	6863      	ldr	r3, [r4, #4]
 800d398:	bf08      	it	eq
 800d39a:	6031      	streq	r1, [r6, #0]
 800d39c:	5162      	str	r2, [r4, r5]
 800d39e:	604b      	str	r3, [r1, #4]
 800d3a0:	4638      	mov	r0, r7
 800d3a2:	f104 060b 	add.w	r6, r4, #11
 800d3a6:	f000 fa9d 	bl	800d8e4 <__malloc_unlock>
 800d3aa:	f026 0607 	bic.w	r6, r6, #7
 800d3ae:	1d23      	adds	r3, r4, #4
 800d3b0:	1af2      	subs	r2, r6, r3
 800d3b2:	d0b6      	beq.n	800d322 <_malloc_r+0x22>
 800d3b4:	1b9b      	subs	r3, r3, r6
 800d3b6:	50a3      	str	r3, [r4, r2]
 800d3b8:	e7b3      	b.n	800d322 <_malloc_r+0x22>
 800d3ba:	6862      	ldr	r2, [r4, #4]
 800d3bc:	42a3      	cmp	r3, r4
 800d3be:	bf0c      	ite	eq
 800d3c0:	6032      	streq	r2, [r6, #0]
 800d3c2:	605a      	strne	r2, [r3, #4]
 800d3c4:	e7ec      	b.n	800d3a0 <_malloc_r+0xa0>
 800d3c6:	4623      	mov	r3, r4
 800d3c8:	6864      	ldr	r4, [r4, #4]
 800d3ca:	e7b2      	b.n	800d332 <_malloc_r+0x32>
 800d3cc:	4634      	mov	r4, r6
 800d3ce:	6876      	ldr	r6, [r6, #4]
 800d3d0:	e7b9      	b.n	800d346 <_malloc_r+0x46>
 800d3d2:	230c      	movs	r3, #12
 800d3d4:	603b      	str	r3, [r7, #0]
 800d3d6:	4638      	mov	r0, r7
 800d3d8:	f000 fa84 	bl	800d8e4 <__malloc_unlock>
 800d3dc:	e7a1      	b.n	800d322 <_malloc_r+0x22>
 800d3de:	6025      	str	r5, [r4, #0]
 800d3e0:	e7de      	b.n	800d3a0 <_malloc_r+0xa0>
 800d3e2:	bf00      	nop
 800d3e4:	20000aa4 	.word	0x20000aa4

0800d3e8 <__ssputs_r>:
 800d3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3ec:	688e      	ldr	r6, [r1, #8]
 800d3ee:	429e      	cmp	r6, r3
 800d3f0:	4682      	mov	sl, r0
 800d3f2:	460c      	mov	r4, r1
 800d3f4:	4690      	mov	r8, r2
 800d3f6:	461f      	mov	r7, r3
 800d3f8:	d838      	bhi.n	800d46c <__ssputs_r+0x84>
 800d3fa:	898a      	ldrh	r2, [r1, #12]
 800d3fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d400:	d032      	beq.n	800d468 <__ssputs_r+0x80>
 800d402:	6825      	ldr	r5, [r4, #0]
 800d404:	6909      	ldr	r1, [r1, #16]
 800d406:	eba5 0901 	sub.w	r9, r5, r1
 800d40a:	6965      	ldr	r5, [r4, #20]
 800d40c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d410:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d414:	3301      	adds	r3, #1
 800d416:	444b      	add	r3, r9
 800d418:	106d      	asrs	r5, r5, #1
 800d41a:	429d      	cmp	r5, r3
 800d41c:	bf38      	it	cc
 800d41e:	461d      	movcc	r5, r3
 800d420:	0553      	lsls	r3, r2, #21
 800d422:	d531      	bpl.n	800d488 <__ssputs_r+0xa0>
 800d424:	4629      	mov	r1, r5
 800d426:	f7ff ff6b 	bl	800d300 <_malloc_r>
 800d42a:	4606      	mov	r6, r0
 800d42c:	b950      	cbnz	r0, 800d444 <__ssputs_r+0x5c>
 800d42e:	230c      	movs	r3, #12
 800d430:	f8ca 3000 	str.w	r3, [sl]
 800d434:	89a3      	ldrh	r3, [r4, #12]
 800d436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d43a:	81a3      	strh	r3, [r4, #12]
 800d43c:	f04f 30ff 	mov.w	r0, #4294967295
 800d440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d444:	6921      	ldr	r1, [r4, #16]
 800d446:	464a      	mov	r2, r9
 800d448:	f7ff fa08 	bl	800c85c <memcpy>
 800d44c:	89a3      	ldrh	r3, [r4, #12]
 800d44e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d456:	81a3      	strh	r3, [r4, #12]
 800d458:	6126      	str	r6, [r4, #16]
 800d45a:	6165      	str	r5, [r4, #20]
 800d45c:	444e      	add	r6, r9
 800d45e:	eba5 0509 	sub.w	r5, r5, r9
 800d462:	6026      	str	r6, [r4, #0]
 800d464:	60a5      	str	r5, [r4, #8]
 800d466:	463e      	mov	r6, r7
 800d468:	42be      	cmp	r6, r7
 800d46a:	d900      	bls.n	800d46e <__ssputs_r+0x86>
 800d46c:	463e      	mov	r6, r7
 800d46e:	6820      	ldr	r0, [r4, #0]
 800d470:	4632      	mov	r2, r6
 800d472:	4641      	mov	r1, r8
 800d474:	f000 fa16 	bl	800d8a4 <memmove>
 800d478:	68a3      	ldr	r3, [r4, #8]
 800d47a:	1b9b      	subs	r3, r3, r6
 800d47c:	60a3      	str	r3, [r4, #8]
 800d47e:	6823      	ldr	r3, [r4, #0]
 800d480:	4433      	add	r3, r6
 800d482:	6023      	str	r3, [r4, #0]
 800d484:	2000      	movs	r0, #0
 800d486:	e7db      	b.n	800d440 <__ssputs_r+0x58>
 800d488:	462a      	mov	r2, r5
 800d48a:	f000 fa31 	bl	800d8f0 <_realloc_r>
 800d48e:	4606      	mov	r6, r0
 800d490:	2800      	cmp	r0, #0
 800d492:	d1e1      	bne.n	800d458 <__ssputs_r+0x70>
 800d494:	6921      	ldr	r1, [r4, #16]
 800d496:	4650      	mov	r0, sl
 800d498:	f7ff fec6 	bl	800d228 <_free_r>
 800d49c:	e7c7      	b.n	800d42e <__ssputs_r+0x46>
	...

0800d4a0 <_svfiprintf_r>:
 800d4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a4:	4698      	mov	r8, r3
 800d4a6:	898b      	ldrh	r3, [r1, #12]
 800d4a8:	061b      	lsls	r3, r3, #24
 800d4aa:	b09d      	sub	sp, #116	; 0x74
 800d4ac:	4607      	mov	r7, r0
 800d4ae:	460d      	mov	r5, r1
 800d4b0:	4614      	mov	r4, r2
 800d4b2:	d50e      	bpl.n	800d4d2 <_svfiprintf_r+0x32>
 800d4b4:	690b      	ldr	r3, [r1, #16]
 800d4b6:	b963      	cbnz	r3, 800d4d2 <_svfiprintf_r+0x32>
 800d4b8:	2140      	movs	r1, #64	; 0x40
 800d4ba:	f7ff ff21 	bl	800d300 <_malloc_r>
 800d4be:	6028      	str	r0, [r5, #0]
 800d4c0:	6128      	str	r0, [r5, #16]
 800d4c2:	b920      	cbnz	r0, 800d4ce <_svfiprintf_r+0x2e>
 800d4c4:	230c      	movs	r3, #12
 800d4c6:	603b      	str	r3, [r7, #0]
 800d4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4cc:	e0d1      	b.n	800d672 <_svfiprintf_r+0x1d2>
 800d4ce:	2340      	movs	r3, #64	; 0x40
 800d4d0:	616b      	str	r3, [r5, #20]
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4d6:	2320      	movs	r3, #32
 800d4d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4e0:	2330      	movs	r3, #48	; 0x30
 800d4e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d68c <_svfiprintf_r+0x1ec>
 800d4e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4ea:	f04f 0901 	mov.w	r9, #1
 800d4ee:	4623      	mov	r3, r4
 800d4f0:	469a      	mov	sl, r3
 800d4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4f6:	b10a      	cbz	r2, 800d4fc <_svfiprintf_r+0x5c>
 800d4f8:	2a25      	cmp	r2, #37	; 0x25
 800d4fa:	d1f9      	bne.n	800d4f0 <_svfiprintf_r+0x50>
 800d4fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d500:	d00b      	beq.n	800d51a <_svfiprintf_r+0x7a>
 800d502:	465b      	mov	r3, fp
 800d504:	4622      	mov	r2, r4
 800d506:	4629      	mov	r1, r5
 800d508:	4638      	mov	r0, r7
 800d50a:	f7ff ff6d 	bl	800d3e8 <__ssputs_r>
 800d50e:	3001      	adds	r0, #1
 800d510:	f000 80aa 	beq.w	800d668 <_svfiprintf_r+0x1c8>
 800d514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d516:	445a      	add	r2, fp
 800d518:	9209      	str	r2, [sp, #36]	; 0x24
 800d51a:	f89a 3000 	ldrb.w	r3, [sl]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f000 80a2 	beq.w	800d668 <_svfiprintf_r+0x1c8>
 800d524:	2300      	movs	r3, #0
 800d526:	f04f 32ff 	mov.w	r2, #4294967295
 800d52a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d52e:	f10a 0a01 	add.w	sl, sl, #1
 800d532:	9304      	str	r3, [sp, #16]
 800d534:	9307      	str	r3, [sp, #28]
 800d536:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d53a:	931a      	str	r3, [sp, #104]	; 0x68
 800d53c:	4654      	mov	r4, sl
 800d53e:	2205      	movs	r2, #5
 800d540:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d544:	4851      	ldr	r0, [pc, #324]	; (800d68c <_svfiprintf_r+0x1ec>)
 800d546:	f7f2 fe4b 	bl	80001e0 <memchr>
 800d54a:	9a04      	ldr	r2, [sp, #16]
 800d54c:	b9d8      	cbnz	r0, 800d586 <_svfiprintf_r+0xe6>
 800d54e:	06d0      	lsls	r0, r2, #27
 800d550:	bf44      	itt	mi
 800d552:	2320      	movmi	r3, #32
 800d554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d558:	0711      	lsls	r1, r2, #28
 800d55a:	bf44      	itt	mi
 800d55c:	232b      	movmi	r3, #43	; 0x2b
 800d55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d562:	f89a 3000 	ldrb.w	r3, [sl]
 800d566:	2b2a      	cmp	r3, #42	; 0x2a
 800d568:	d015      	beq.n	800d596 <_svfiprintf_r+0xf6>
 800d56a:	9a07      	ldr	r2, [sp, #28]
 800d56c:	4654      	mov	r4, sl
 800d56e:	2000      	movs	r0, #0
 800d570:	f04f 0c0a 	mov.w	ip, #10
 800d574:	4621      	mov	r1, r4
 800d576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d57a:	3b30      	subs	r3, #48	; 0x30
 800d57c:	2b09      	cmp	r3, #9
 800d57e:	d94e      	bls.n	800d61e <_svfiprintf_r+0x17e>
 800d580:	b1b0      	cbz	r0, 800d5b0 <_svfiprintf_r+0x110>
 800d582:	9207      	str	r2, [sp, #28]
 800d584:	e014      	b.n	800d5b0 <_svfiprintf_r+0x110>
 800d586:	eba0 0308 	sub.w	r3, r0, r8
 800d58a:	fa09 f303 	lsl.w	r3, r9, r3
 800d58e:	4313      	orrs	r3, r2
 800d590:	9304      	str	r3, [sp, #16]
 800d592:	46a2      	mov	sl, r4
 800d594:	e7d2      	b.n	800d53c <_svfiprintf_r+0x9c>
 800d596:	9b03      	ldr	r3, [sp, #12]
 800d598:	1d19      	adds	r1, r3, #4
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	9103      	str	r1, [sp, #12]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	bfbb      	ittet	lt
 800d5a2:	425b      	neglt	r3, r3
 800d5a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d5a8:	9307      	strge	r3, [sp, #28]
 800d5aa:	9307      	strlt	r3, [sp, #28]
 800d5ac:	bfb8      	it	lt
 800d5ae:	9204      	strlt	r2, [sp, #16]
 800d5b0:	7823      	ldrb	r3, [r4, #0]
 800d5b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d5b4:	d10c      	bne.n	800d5d0 <_svfiprintf_r+0x130>
 800d5b6:	7863      	ldrb	r3, [r4, #1]
 800d5b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d5ba:	d135      	bne.n	800d628 <_svfiprintf_r+0x188>
 800d5bc:	9b03      	ldr	r3, [sp, #12]
 800d5be:	1d1a      	adds	r2, r3, #4
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	9203      	str	r2, [sp, #12]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	bfb8      	it	lt
 800d5c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5cc:	3402      	adds	r4, #2
 800d5ce:	9305      	str	r3, [sp, #20]
 800d5d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d69c <_svfiprintf_r+0x1fc>
 800d5d4:	7821      	ldrb	r1, [r4, #0]
 800d5d6:	2203      	movs	r2, #3
 800d5d8:	4650      	mov	r0, sl
 800d5da:	f7f2 fe01 	bl	80001e0 <memchr>
 800d5de:	b140      	cbz	r0, 800d5f2 <_svfiprintf_r+0x152>
 800d5e0:	2340      	movs	r3, #64	; 0x40
 800d5e2:	eba0 000a 	sub.w	r0, r0, sl
 800d5e6:	fa03 f000 	lsl.w	r0, r3, r0
 800d5ea:	9b04      	ldr	r3, [sp, #16]
 800d5ec:	4303      	orrs	r3, r0
 800d5ee:	3401      	adds	r4, #1
 800d5f0:	9304      	str	r3, [sp, #16]
 800d5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5f6:	4826      	ldr	r0, [pc, #152]	; (800d690 <_svfiprintf_r+0x1f0>)
 800d5f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5fc:	2206      	movs	r2, #6
 800d5fe:	f7f2 fdef 	bl	80001e0 <memchr>
 800d602:	2800      	cmp	r0, #0
 800d604:	d038      	beq.n	800d678 <_svfiprintf_r+0x1d8>
 800d606:	4b23      	ldr	r3, [pc, #140]	; (800d694 <_svfiprintf_r+0x1f4>)
 800d608:	bb1b      	cbnz	r3, 800d652 <_svfiprintf_r+0x1b2>
 800d60a:	9b03      	ldr	r3, [sp, #12]
 800d60c:	3307      	adds	r3, #7
 800d60e:	f023 0307 	bic.w	r3, r3, #7
 800d612:	3308      	adds	r3, #8
 800d614:	9303      	str	r3, [sp, #12]
 800d616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d618:	4433      	add	r3, r6
 800d61a:	9309      	str	r3, [sp, #36]	; 0x24
 800d61c:	e767      	b.n	800d4ee <_svfiprintf_r+0x4e>
 800d61e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d622:	460c      	mov	r4, r1
 800d624:	2001      	movs	r0, #1
 800d626:	e7a5      	b.n	800d574 <_svfiprintf_r+0xd4>
 800d628:	2300      	movs	r3, #0
 800d62a:	3401      	adds	r4, #1
 800d62c:	9305      	str	r3, [sp, #20]
 800d62e:	4619      	mov	r1, r3
 800d630:	f04f 0c0a 	mov.w	ip, #10
 800d634:	4620      	mov	r0, r4
 800d636:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d63a:	3a30      	subs	r2, #48	; 0x30
 800d63c:	2a09      	cmp	r2, #9
 800d63e:	d903      	bls.n	800d648 <_svfiprintf_r+0x1a8>
 800d640:	2b00      	cmp	r3, #0
 800d642:	d0c5      	beq.n	800d5d0 <_svfiprintf_r+0x130>
 800d644:	9105      	str	r1, [sp, #20]
 800d646:	e7c3      	b.n	800d5d0 <_svfiprintf_r+0x130>
 800d648:	fb0c 2101 	mla	r1, ip, r1, r2
 800d64c:	4604      	mov	r4, r0
 800d64e:	2301      	movs	r3, #1
 800d650:	e7f0      	b.n	800d634 <_svfiprintf_r+0x194>
 800d652:	ab03      	add	r3, sp, #12
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	462a      	mov	r2, r5
 800d658:	4b0f      	ldr	r3, [pc, #60]	; (800d698 <_svfiprintf_r+0x1f8>)
 800d65a:	a904      	add	r1, sp, #16
 800d65c:	4638      	mov	r0, r7
 800d65e:	f7fb ff65 	bl	800952c <_printf_float>
 800d662:	1c42      	adds	r2, r0, #1
 800d664:	4606      	mov	r6, r0
 800d666:	d1d6      	bne.n	800d616 <_svfiprintf_r+0x176>
 800d668:	89ab      	ldrh	r3, [r5, #12]
 800d66a:	065b      	lsls	r3, r3, #25
 800d66c:	f53f af2c 	bmi.w	800d4c8 <_svfiprintf_r+0x28>
 800d670:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d672:	b01d      	add	sp, #116	; 0x74
 800d674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d678:	ab03      	add	r3, sp, #12
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	462a      	mov	r2, r5
 800d67e:	4b06      	ldr	r3, [pc, #24]	; (800d698 <_svfiprintf_r+0x1f8>)
 800d680:	a904      	add	r1, sp, #16
 800d682:	4638      	mov	r0, r7
 800d684:	f7fc f9f6 	bl	8009a74 <_printf_i>
 800d688:	e7eb      	b.n	800d662 <_svfiprintf_r+0x1c2>
 800d68a:	bf00      	nop
 800d68c:	0800f35c 	.word	0x0800f35c
 800d690:	0800f366 	.word	0x0800f366
 800d694:	0800952d 	.word	0x0800952d
 800d698:	0800d3e9 	.word	0x0800d3e9
 800d69c:	0800f362 	.word	0x0800f362

0800d6a0 <nan>:
 800d6a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d6a8 <nan+0x8>
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	00000000 	.word	0x00000000
 800d6ac:	7ff80000 	.word	0x7ff80000

0800d6b0 <_sbrk_r>:
 800d6b0:	b538      	push	{r3, r4, r5, lr}
 800d6b2:	4d06      	ldr	r5, [pc, #24]	; (800d6cc <_sbrk_r+0x1c>)
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	4608      	mov	r0, r1
 800d6ba:	602b      	str	r3, [r5, #0]
 800d6bc:	f7f4 fa8e 	bl	8001bdc <_sbrk>
 800d6c0:	1c43      	adds	r3, r0, #1
 800d6c2:	d102      	bne.n	800d6ca <_sbrk_r+0x1a>
 800d6c4:	682b      	ldr	r3, [r5, #0]
 800d6c6:	b103      	cbz	r3, 800d6ca <_sbrk_r+0x1a>
 800d6c8:	6023      	str	r3, [r4, #0]
 800d6ca:	bd38      	pop	{r3, r4, r5, pc}
 800d6cc:	20000aac 	.word	0x20000aac

0800d6d0 <__sread>:
 800d6d0:	b510      	push	{r4, lr}
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6d8:	f000 fa92 	bl	800dc00 <_read_r>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	bfab      	itete	ge
 800d6e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d6e2:	89a3      	ldrhlt	r3, [r4, #12]
 800d6e4:	181b      	addge	r3, r3, r0
 800d6e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d6ea:	bfac      	ite	ge
 800d6ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800d6ee:	81a3      	strhlt	r3, [r4, #12]
 800d6f0:	bd10      	pop	{r4, pc}

0800d6f2 <__swrite>:
 800d6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f6:	461f      	mov	r7, r3
 800d6f8:	898b      	ldrh	r3, [r1, #12]
 800d6fa:	05db      	lsls	r3, r3, #23
 800d6fc:	4605      	mov	r5, r0
 800d6fe:	460c      	mov	r4, r1
 800d700:	4616      	mov	r6, r2
 800d702:	d505      	bpl.n	800d710 <__swrite+0x1e>
 800d704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d708:	2302      	movs	r3, #2
 800d70a:	2200      	movs	r2, #0
 800d70c:	f000 f8b8 	bl	800d880 <_lseek_r>
 800d710:	89a3      	ldrh	r3, [r4, #12]
 800d712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d71a:	81a3      	strh	r3, [r4, #12]
 800d71c:	4632      	mov	r2, r6
 800d71e:	463b      	mov	r3, r7
 800d720:	4628      	mov	r0, r5
 800d722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d726:	f000 b837 	b.w	800d798 <_write_r>

0800d72a <__sseek>:
 800d72a:	b510      	push	{r4, lr}
 800d72c:	460c      	mov	r4, r1
 800d72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d732:	f000 f8a5 	bl	800d880 <_lseek_r>
 800d736:	1c43      	adds	r3, r0, #1
 800d738:	89a3      	ldrh	r3, [r4, #12]
 800d73a:	bf15      	itete	ne
 800d73c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d73e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d746:	81a3      	strheq	r3, [r4, #12]
 800d748:	bf18      	it	ne
 800d74a:	81a3      	strhne	r3, [r4, #12]
 800d74c:	bd10      	pop	{r4, pc}

0800d74e <__sclose>:
 800d74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d752:	f000 b851 	b.w	800d7f8 <_close_r>

0800d756 <strncmp>:
 800d756:	b510      	push	{r4, lr}
 800d758:	b17a      	cbz	r2, 800d77a <strncmp+0x24>
 800d75a:	4603      	mov	r3, r0
 800d75c:	3901      	subs	r1, #1
 800d75e:	1884      	adds	r4, r0, r2
 800d760:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d764:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d768:	4290      	cmp	r0, r2
 800d76a:	d101      	bne.n	800d770 <strncmp+0x1a>
 800d76c:	42a3      	cmp	r3, r4
 800d76e:	d101      	bne.n	800d774 <strncmp+0x1e>
 800d770:	1a80      	subs	r0, r0, r2
 800d772:	bd10      	pop	{r4, pc}
 800d774:	2800      	cmp	r0, #0
 800d776:	d1f3      	bne.n	800d760 <strncmp+0xa>
 800d778:	e7fa      	b.n	800d770 <strncmp+0x1a>
 800d77a:	4610      	mov	r0, r2
 800d77c:	e7f9      	b.n	800d772 <strncmp+0x1c>

0800d77e <__ascii_wctomb>:
 800d77e:	b149      	cbz	r1, 800d794 <__ascii_wctomb+0x16>
 800d780:	2aff      	cmp	r2, #255	; 0xff
 800d782:	bf85      	ittet	hi
 800d784:	238a      	movhi	r3, #138	; 0x8a
 800d786:	6003      	strhi	r3, [r0, #0]
 800d788:	700a      	strbls	r2, [r1, #0]
 800d78a:	f04f 30ff 	movhi.w	r0, #4294967295
 800d78e:	bf98      	it	ls
 800d790:	2001      	movls	r0, #1
 800d792:	4770      	bx	lr
 800d794:	4608      	mov	r0, r1
 800d796:	4770      	bx	lr

0800d798 <_write_r>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	4d07      	ldr	r5, [pc, #28]	; (800d7b8 <_write_r+0x20>)
 800d79c:	4604      	mov	r4, r0
 800d79e:	4608      	mov	r0, r1
 800d7a0:	4611      	mov	r1, r2
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	602a      	str	r2, [r5, #0]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	f7f3 ff1c 	bl	80015e4 <_write>
 800d7ac:	1c43      	adds	r3, r0, #1
 800d7ae:	d102      	bne.n	800d7b6 <_write_r+0x1e>
 800d7b0:	682b      	ldr	r3, [r5, #0]
 800d7b2:	b103      	cbz	r3, 800d7b6 <_write_r+0x1e>
 800d7b4:	6023      	str	r3, [r4, #0]
 800d7b6:	bd38      	pop	{r3, r4, r5, pc}
 800d7b8:	20000aac 	.word	0x20000aac

0800d7bc <__assert_func>:
 800d7bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7be:	4614      	mov	r4, r2
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	4b09      	ldr	r3, [pc, #36]	; (800d7e8 <__assert_func+0x2c>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4605      	mov	r5, r0
 800d7c8:	68d8      	ldr	r0, [r3, #12]
 800d7ca:	b14c      	cbz	r4, 800d7e0 <__assert_func+0x24>
 800d7cc:	4b07      	ldr	r3, [pc, #28]	; (800d7ec <__assert_func+0x30>)
 800d7ce:	9100      	str	r1, [sp, #0]
 800d7d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7d4:	4906      	ldr	r1, [pc, #24]	; (800d7f0 <__assert_func+0x34>)
 800d7d6:	462b      	mov	r3, r5
 800d7d8:	f000 f81e 	bl	800d818 <fiprintf>
 800d7dc:	f000 fae2 	bl	800dda4 <abort>
 800d7e0:	4b04      	ldr	r3, [pc, #16]	; (800d7f4 <__assert_func+0x38>)
 800d7e2:	461c      	mov	r4, r3
 800d7e4:	e7f3      	b.n	800d7ce <__assert_func+0x12>
 800d7e6:	bf00      	nop
 800d7e8:	200001a0 	.word	0x200001a0
 800d7ec:	0800f36d 	.word	0x0800f36d
 800d7f0:	0800f37a 	.word	0x0800f37a
 800d7f4:	0800f3a8 	.word	0x0800f3a8

0800d7f8 <_close_r>:
 800d7f8:	b538      	push	{r3, r4, r5, lr}
 800d7fa:	4d06      	ldr	r5, [pc, #24]	; (800d814 <_close_r+0x1c>)
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	4604      	mov	r4, r0
 800d800:	4608      	mov	r0, r1
 800d802:	602b      	str	r3, [r5, #0]
 800d804:	f7f3 ff1a 	bl	800163c <_close>
 800d808:	1c43      	adds	r3, r0, #1
 800d80a:	d102      	bne.n	800d812 <_close_r+0x1a>
 800d80c:	682b      	ldr	r3, [r5, #0]
 800d80e:	b103      	cbz	r3, 800d812 <_close_r+0x1a>
 800d810:	6023      	str	r3, [r4, #0]
 800d812:	bd38      	pop	{r3, r4, r5, pc}
 800d814:	20000aac 	.word	0x20000aac

0800d818 <fiprintf>:
 800d818:	b40e      	push	{r1, r2, r3}
 800d81a:	b503      	push	{r0, r1, lr}
 800d81c:	4601      	mov	r1, r0
 800d81e:	ab03      	add	r3, sp, #12
 800d820:	4805      	ldr	r0, [pc, #20]	; (800d838 <fiprintf+0x20>)
 800d822:	f853 2b04 	ldr.w	r2, [r3], #4
 800d826:	6800      	ldr	r0, [r0, #0]
 800d828:	9301      	str	r3, [sp, #4]
 800d82a:	f000 f8b9 	bl	800d9a0 <_vfiprintf_r>
 800d82e:	b002      	add	sp, #8
 800d830:	f85d eb04 	ldr.w	lr, [sp], #4
 800d834:	b003      	add	sp, #12
 800d836:	4770      	bx	lr
 800d838:	200001a0 	.word	0x200001a0

0800d83c <_fstat_r>:
 800d83c:	b538      	push	{r3, r4, r5, lr}
 800d83e:	4d07      	ldr	r5, [pc, #28]	; (800d85c <_fstat_r+0x20>)
 800d840:	2300      	movs	r3, #0
 800d842:	4604      	mov	r4, r0
 800d844:	4608      	mov	r0, r1
 800d846:	4611      	mov	r1, r2
 800d848:	602b      	str	r3, [r5, #0]
 800d84a:	f7f3 ff47 	bl	80016dc <_fstat>
 800d84e:	1c43      	adds	r3, r0, #1
 800d850:	d102      	bne.n	800d858 <_fstat_r+0x1c>
 800d852:	682b      	ldr	r3, [r5, #0]
 800d854:	b103      	cbz	r3, 800d858 <_fstat_r+0x1c>
 800d856:	6023      	str	r3, [r4, #0]
 800d858:	bd38      	pop	{r3, r4, r5, pc}
 800d85a:	bf00      	nop
 800d85c:	20000aac 	.word	0x20000aac

0800d860 <_isatty_r>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	4d06      	ldr	r5, [pc, #24]	; (800d87c <_isatty_r+0x1c>)
 800d864:	2300      	movs	r3, #0
 800d866:	4604      	mov	r4, r0
 800d868:	4608      	mov	r0, r1
 800d86a:	602b      	str	r3, [r5, #0]
 800d86c:	f7f3 fea4 	bl	80015b8 <_isatty>
 800d870:	1c43      	adds	r3, r0, #1
 800d872:	d102      	bne.n	800d87a <_isatty_r+0x1a>
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	b103      	cbz	r3, 800d87a <_isatty_r+0x1a>
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	bd38      	pop	{r3, r4, r5, pc}
 800d87c:	20000aac 	.word	0x20000aac

0800d880 <_lseek_r>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4d07      	ldr	r5, [pc, #28]	; (800d8a0 <_lseek_r+0x20>)
 800d884:	4604      	mov	r4, r0
 800d886:	4608      	mov	r0, r1
 800d888:	4611      	mov	r1, r2
 800d88a:	2200      	movs	r2, #0
 800d88c:	602a      	str	r2, [r5, #0]
 800d88e:	461a      	mov	r2, r3
 800d890:	f7f3 feeb 	bl	800166a <_lseek>
 800d894:	1c43      	adds	r3, r0, #1
 800d896:	d102      	bne.n	800d89e <_lseek_r+0x1e>
 800d898:	682b      	ldr	r3, [r5, #0]
 800d89a:	b103      	cbz	r3, 800d89e <_lseek_r+0x1e>
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	bd38      	pop	{r3, r4, r5, pc}
 800d8a0:	20000aac 	.word	0x20000aac

0800d8a4 <memmove>:
 800d8a4:	4288      	cmp	r0, r1
 800d8a6:	b510      	push	{r4, lr}
 800d8a8:	eb01 0402 	add.w	r4, r1, r2
 800d8ac:	d902      	bls.n	800d8b4 <memmove+0x10>
 800d8ae:	4284      	cmp	r4, r0
 800d8b0:	4623      	mov	r3, r4
 800d8b2:	d807      	bhi.n	800d8c4 <memmove+0x20>
 800d8b4:	1e43      	subs	r3, r0, #1
 800d8b6:	42a1      	cmp	r1, r4
 800d8b8:	d008      	beq.n	800d8cc <memmove+0x28>
 800d8ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8c2:	e7f8      	b.n	800d8b6 <memmove+0x12>
 800d8c4:	4402      	add	r2, r0
 800d8c6:	4601      	mov	r1, r0
 800d8c8:	428a      	cmp	r2, r1
 800d8ca:	d100      	bne.n	800d8ce <memmove+0x2a>
 800d8cc:	bd10      	pop	{r4, pc}
 800d8ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8d6:	e7f7      	b.n	800d8c8 <memmove+0x24>

0800d8d8 <__malloc_lock>:
 800d8d8:	4801      	ldr	r0, [pc, #4]	; (800d8e0 <__malloc_lock+0x8>)
 800d8da:	f7fe bf3e 	b.w	800c75a <__retarget_lock_acquire_recursive>
 800d8de:	bf00      	nop
 800d8e0:	20000a9e 	.word	0x20000a9e

0800d8e4 <__malloc_unlock>:
 800d8e4:	4801      	ldr	r0, [pc, #4]	; (800d8ec <__malloc_unlock+0x8>)
 800d8e6:	f7fe bf39 	b.w	800c75c <__retarget_lock_release_recursive>
 800d8ea:	bf00      	nop
 800d8ec:	20000a9e 	.word	0x20000a9e

0800d8f0 <_realloc_r>:
 800d8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f4:	4680      	mov	r8, r0
 800d8f6:	4614      	mov	r4, r2
 800d8f8:	460e      	mov	r6, r1
 800d8fa:	b921      	cbnz	r1, 800d906 <_realloc_r+0x16>
 800d8fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d900:	4611      	mov	r1, r2
 800d902:	f7ff bcfd 	b.w	800d300 <_malloc_r>
 800d906:	b92a      	cbnz	r2, 800d914 <_realloc_r+0x24>
 800d908:	f7ff fc8e 	bl	800d228 <_free_r>
 800d90c:	4625      	mov	r5, r4
 800d90e:	4628      	mov	r0, r5
 800d910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d914:	f000 fa4d 	bl	800ddb2 <_malloc_usable_size_r>
 800d918:	4284      	cmp	r4, r0
 800d91a:	4607      	mov	r7, r0
 800d91c:	d802      	bhi.n	800d924 <_realloc_r+0x34>
 800d91e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d922:	d812      	bhi.n	800d94a <_realloc_r+0x5a>
 800d924:	4621      	mov	r1, r4
 800d926:	4640      	mov	r0, r8
 800d928:	f7ff fcea 	bl	800d300 <_malloc_r>
 800d92c:	4605      	mov	r5, r0
 800d92e:	2800      	cmp	r0, #0
 800d930:	d0ed      	beq.n	800d90e <_realloc_r+0x1e>
 800d932:	42bc      	cmp	r4, r7
 800d934:	4622      	mov	r2, r4
 800d936:	4631      	mov	r1, r6
 800d938:	bf28      	it	cs
 800d93a:	463a      	movcs	r2, r7
 800d93c:	f7fe ff8e 	bl	800c85c <memcpy>
 800d940:	4631      	mov	r1, r6
 800d942:	4640      	mov	r0, r8
 800d944:	f7ff fc70 	bl	800d228 <_free_r>
 800d948:	e7e1      	b.n	800d90e <_realloc_r+0x1e>
 800d94a:	4635      	mov	r5, r6
 800d94c:	e7df      	b.n	800d90e <_realloc_r+0x1e>

0800d94e <__sfputc_r>:
 800d94e:	6893      	ldr	r3, [r2, #8]
 800d950:	3b01      	subs	r3, #1
 800d952:	2b00      	cmp	r3, #0
 800d954:	b410      	push	{r4}
 800d956:	6093      	str	r3, [r2, #8]
 800d958:	da08      	bge.n	800d96c <__sfputc_r+0x1e>
 800d95a:	6994      	ldr	r4, [r2, #24]
 800d95c:	42a3      	cmp	r3, r4
 800d95e:	db01      	blt.n	800d964 <__sfputc_r+0x16>
 800d960:	290a      	cmp	r1, #10
 800d962:	d103      	bne.n	800d96c <__sfputc_r+0x1e>
 800d964:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d968:	f000 b95c 	b.w	800dc24 <__swbuf_r>
 800d96c:	6813      	ldr	r3, [r2, #0]
 800d96e:	1c58      	adds	r0, r3, #1
 800d970:	6010      	str	r0, [r2, #0]
 800d972:	7019      	strb	r1, [r3, #0]
 800d974:	4608      	mov	r0, r1
 800d976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <__sfputs_r>:
 800d97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d97e:	4606      	mov	r6, r0
 800d980:	460f      	mov	r7, r1
 800d982:	4614      	mov	r4, r2
 800d984:	18d5      	adds	r5, r2, r3
 800d986:	42ac      	cmp	r4, r5
 800d988:	d101      	bne.n	800d98e <__sfputs_r+0x12>
 800d98a:	2000      	movs	r0, #0
 800d98c:	e007      	b.n	800d99e <__sfputs_r+0x22>
 800d98e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d992:	463a      	mov	r2, r7
 800d994:	4630      	mov	r0, r6
 800d996:	f7ff ffda 	bl	800d94e <__sfputc_r>
 800d99a:	1c43      	adds	r3, r0, #1
 800d99c:	d1f3      	bne.n	800d986 <__sfputs_r+0xa>
 800d99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d9a0 <_vfiprintf_r>:
 800d9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a4:	460d      	mov	r5, r1
 800d9a6:	b09d      	sub	sp, #116	; 0x74
 800d9a8:	4614      	mov	r4, r2
 800d9aa:	4698      	mov	r8, r3
 800d9ac:	4606      	mov	r6, r0
 800d9ae:	b118      	cbz	r0, 800d9b8 <_vfiprintf_r+0x18>
 800d9b0:	6983      	ldr	r3, [r0, #24]
 800d9b2:	b90b      	cbnz	r3, 800d9b8 <_vfiprintf_r+0x18>
 800d9b4:	f7fe fac0 	bl	800bf38 <__sinit>
 800d9b8:	4b89      	ldr	r3, [pc, #548]	; (800dbe0 <_vfiprintf_r+0x240>)
 800d9ba:	429d      	cmp	r5, r3
 800d9bc:	d11b      	bne.n	800d9f6 <_vfiprintf_r+0x56>
 800d9be:	6875      	ldr	r5, [r6, #4]
 800d9c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9c2:	07d9      	lsls	r1, r3, #31
 800d9c4:	d405      	bmi.n	800d9d2 <_vfiprintf_r+0x32>
 800d9c6:	89ab      	ldrh	r3, [r5, #12]
 800d9c8:	059a      	lsls	r2, r3, #22
 800d9ca:	d402      	bmi.n	800d9d2 <_vfiprintf_r+0x32>
 800d9cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9ce:	f7fe fec4 	bl	800c75a <__retarget_lock_acquire_recursive>
 800d9d2:	89ab      	ldrh	r3, [r5, #12]
 800d9d4:	071b      	lsls	r3, r3, #28
 800d9d6:	d501      	bpl.n	800d9dc <_vfiprintf_r+0x3c>
 800d9d8:	692b      	ldr	r3, [r5, #16]
 800d9da:	b9eb      	cbnz	r3, 800da18 <_vfiprintf_r+0x78>
 800d9dc:	4629      	mov	r1, r5
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f000 f972 	bl	800dcc8 <__swsetup_r>
 800d9e4:	b1c0      	cbz	r0, 800da18 <_vfiprintf_r+0x78>
 800d9e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9e8:	07dc      	lsls	r4, r3, #31
 800d9ea:	d50e      	bpl.n	800da0a <_vfiprintf_r+0x6a>
 800d9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f0:	b01d      	add	sp, #116	; 0x74
 800d9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f6:	4b7b      	ldr	r3, [pc, #492]	; (800dbe4 <_vfiprintf_r+0x244>)
 800d9f8:	429d      	cmp	r5, r3
 800d9fa:	d101      	bne.n	800da00 <_vfiprintf_r+0x60>
 800d9fc:	68b5      	ldr	r5, [r6, #8]
 800d9fe:	e7df      	b.n	800d9c0 <_vfiprintf_r+0x20>
 800da00:	4b79      	ldr	r3, [pc, #484]	; (800dbe8 <_vfiprintf_r+0x248>)
 800da02:	429d      	cmp	r5, r3
 800da04:	bf08      	it	eq
 800da06:	68f5      	ldreq	r5, [r6, #12]
 800da08:	e7da      	b.n	800d9c0 <_vfiprintf_r+0x20>
 800da0a:	89ab      	ldrh	r3, [r5, #12]
 800da0c:	0598      	lsls	r0, r3, #22
 800da0e:	d4ed      	bmi.n	800d9ec <_vfiprintf_r+0x4c>
 800da10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da12:	f7fe fea3 	bl	800c75c <__retarget_lock_release_recursive>
 800da16:	e7e9      	b.n	800d9ec <_vfiprintf_r+0x4c>
 800da18:	2300      	movs	r3, #0
 800da1a:	9309      	str	r3, [sp, #36]	; 0x24
 800da1c:	2320      	movs	r3, #32
 800da1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da22:	f8cd 800c 	str.w	r8, [sp, #12]
 800da26:	2330      	movs	r3, #48	; 0x30
 800da28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dbec <_vfiprintf_r+0x24c>
 800da2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da30:	f04f 0901 	mov.w	r9, #1
 800da34:	4623      	mov	r3, r4
 800da36:	469a      	mov	sl, r3
 800da38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da3c:	b10a      	cbz	r2, 800da42 <_vfiprintf_r+0xa2>
 800da3e:	2a25      	cmp	r2, #37	; 0x25
 800da40:	d1f9      	bne.n	800da36 <_vfiprintf_r+0x96>
 800da42:	ebba 0b04 	subs.w	fp, sl, r4
 800da46:	d00b      	beq.n	800da60 <_vfiprintf_r+0xc0>
 800da48:	465b      	mov	r3, fp
 800da4a:	4622      	mov	r2, r4
 800da4c:	4629      	mov	r1, r5
 800da4e:	4630      	mov	r0, r6
 800da50:	f7ff ff94 	bl	800d97c <__sfputs_r>
 800da54:	3001      	adds	r0, #1
 800da56:	f000 80aa 	beq.w	800dbae <_vfiprintf_r+0x20e>
 800da5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da5c:	445a      	add	r2, fp
 800da5e:	9209      	str	r2, [sp, #36]	; 0x24
 800da60:	f89a 3000 	ldrb.w	r3, [sl]
 800da64:	2b00      	cmp	r3, #0
 800da66:	f000 80a2 	beq.w	800dbae <_vfiprintf_r+0x20e>
 800da6a:	2300      	movs	r3, #0
 800da6c:	f04f 32ff 	mov.w	r2, #4294967295
 800da70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da74:	f10a 0a01 	add.w	sl, sl, #1
 800da78:	9304      	str	r3, [sp, #16]
 800da7a:	9307      	str	r3, [sp, #28]
 800da7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da80:	931a      	str	r3, [sp, #104]	; 0x68
 800da82:	4654      	mov	r4, sl
 800da84:	2205      	movs	r2, #5
 800da86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da8a:	4858      	ldr	r0, [pc, #352]	; (800dbec <_vfiprintf_r+0x24c>)
 800da8c:	f7f2 fba8 	bl	80001e0 <memchr>
 800da90:	9a04      	ldr	r2, [sp, #16]
 800da92:	b9d8      	cbnz	r0, 800dacc <_vfiprintf_r+0x12c>
 800da94:	06d1      	lsls	r1, r2, #27
 800da96:	bf44      	itt	mi
 800da98:	2320      	movmi	r3, #32
 800da9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da9e:	0713      	lsls	r3, r2, #28
 800daa0:	bf44      	itt	mi
 800daa2:	232b      	movmi	r3, #43	; 0x2b
 800daa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daa8:	f89a 3000 	ldrb.w	r3, [sl]
 800daac:	2b2a      	cmp	r3, #42	; 0x2a
 800daae:	d015      	beq.n	800dadc <_vfiprintf_r+0x13c>
 800dab0:	9a07      	ldr	r2, [sp, #28]
 800dab2:	4654      	mov	r4, sl
 800dab4:	2000      	movs	r0, #0
 800dab6:	f04f 0c0a 	mov.w	ip, #10
 800daba:	4621      	mov	r1, r4
 800dabc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dac0:	3b30      	subs	r3, #48	; 0x30
 800dac2:	2b09      	cmp	r3, #9
 800dac4:	d94e      	bls.n	800db64 <_vfiprintf_r+0x1c4>
 800dac6:	b1b0      	cbz	r0, 800daf6 <_vfiprintf_r+0x156>
 800dac8:	9207      	str	r2, [sp, #28]
 800daca:	e014      	b.n	800daf6 <_vfiprintf_r+0x156>
 800dacc:	eba0 0308 	sub.w	r3, r0, r8
 800dad0:	fa09 f303 	lsl.w	r3, r9, r3
 800dad4:	4313      	orrs	r3, r2
 800dad6:	9304      	str	r3, [sp, #16]
 800dad8:	46a2      	mov	sl, r4
 800dada:	e7d2      	b.n	800da82 <_vfiprintf_r+0xe2>
 800dadc:	9b03      	ldr	r3, [sp, #12]
 800dade:	1d19      	adds	r1, r3, #4
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	9103      	str	r1, [sp, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	bfbb      	ittet	lt
 800dae8:	425b      	neglt	r3, r3
 800daea:	f042 0202 	orrlt.w	r2, r2, #2
 800daee:	9307      	strge	r3, [sp, #28]
 800daf0:	9307      	strlt	r3, [sp, #28]
 800daf2:	bfb8      	it	lt
 800daf4:	9204      	strlt	r2, [sp, #16]
 800daf6:	7823      	ldrb	r3, [r4, #0]
 800daf8:	2b2e      	cmp	r3, #46	; 0x2e
 800dafa:	d10c      	bne.n	800db16 <_vfiprintf_r+0x176>
 800dafc:	7863      	ldrb	r3, [r4, #1]
 800dafe:	2b2a      	cmp	r3, #42	; 0x2a
 800db00:	d135      	bne.n	800db6e <_vfiprintf_r+0x1ce>
 800db02:	9b03      	ldr	r3, [sp, #12]
 800db04:	1d1a      	adds	r2, r3, #4
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	9203      	str	r2, [sp, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	bfb8      	it	lt
 800db0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800db12:	3402      	adds	r4, #2
 800db14:	9305      	str	r3, [sp, #20]
 800db16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dbfc <_vfiprintf_r+0x25c>
 800db1a:	7821      	ldrb	r1, [r4, #0]
 800db1c:	2203      	movs	r2, #3
 800db1e:	4650      	mov	r0, sl
 800db20:	f7f2 fb5e 	bl	80001e0 <memchr>
 800db24:	b140      	cbz	r0, 800db38 <_vfiprintf_r+0x198>
 800db26:	2340      	movs	r3, #64	; 0x40
 800db28:	eba0 000a 	sub.w	r0, r0, sl
 800db2c:	fa03 f000 	lsl.w	r0, r3, r0
 800db30:	9b04      	ldr	r3, [sp, #16]
 800db32:	4303      	orrs	r3, r0
 800db34:	3401      	adds	r4, #1
 800db36:	9304      	str	r3, [sp, #16]
 800db38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db3c:	482c      	ldr	r0, [pc, #176]	; (800dbf0 <_vfiprintf_r+0x250>)
 800db3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db42:	2206      	movs	r2, #6
 800db44:	f7f2 fb4c 	bl	80001e0 <memchr>
 800db48:	2800      	cmp	r0, #0
 800db4a:	d03f      	beq.n	800dbcc <_vfiprintf_r+0x22c>
 800db4c:	4b29      	ldr	r3, [pc, #164]	; (800dbf4 <_vfiprintf_r+0x254>)
 800db4e:	bb1b      	cbnz	r3, 800db98 <_vfiprintf_r+0x1f8>
 800db50:	9b03      	ldr	r3, [sp, #12]
 800db52:	3307      	adds	r3, #7
 800db54:	f023 0307 	bic.w	r3, r3, #7
 800db58:	3308      	adds	r3, #8
 800db5a:	9303      	str	r3, [sp, #12]
 800db5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db5e:	443b      	add	r3, r7
 800db60:	9309      	str	r3, [sp, #36]	; 0x24
 800db62:	e767      	b.n	800da34 <_vfiprintf_r+0x94>
 800db64:	fb0c 3202 	mla	r2, ip, r2, r3
 800db68:	460c      	mov	r4, r1
 800db6a:	2001      	movs	r0, #1
 800db6c:	e7a5      	b.n	800daba <_vfiprintf_r+0x11a>
 800db6e:	2300      	movs	r3, #0
 800db70:	3401      	adds	r4, #1
 800db72:	9305      	str	r3, [sp, #20]
 800db74:	4619      	mov	r1, r3
 800db76:	f04f 0c0a 	mov.w	ip, #10
 800db7a:	4620      	mov	r0, r4
 800db7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db80:	3a30      	subs	r2, #48	; 0x30
 800db82:	2a09      	cmp	r2, #9
 800db84:	d903      	bls.n	800db8e <_vfiprintf_r+0x1ee>
 800db86:	2b00      	cmp	r3, #0
 800db88:	d0c5      	beq.n	800db16 <_vfiprintf_r+0x176>
 800db8a:	9105      	str	r1, [sp, #20]
 800db8c:	e7c3      	b.n	800db16 <_vfiprintf_r+0x176>
 800db8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800db92:	4604      	mov	r4, r0
 800db94:	2301      	movs	r3, #1
 800db96:	e7f0      	b.n	800db7a <_vfiprintf_r+0x1da>
 800db98:	ab03      	add	r3, sp, #12
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	462a      	mov	r2, r5
 800db9e:	4b16      	ldr	r3, [pc, #88]	; (800dbf8 <_vfiprintf_r+0x258>)
 800dba0:	a904      	add	r1, sp, #16
 800dba2:	4630      	mov	r0, r6
 800dba4:	f7fb fcc2 	bl	800952c <_printf_float>
 800dba8:	4607      	mov	r7, r0
 800dbaa:	1c78      	adds	r0, r7, #1
 800dbac:	d1d6      	bne.n	800db5c <_vfiprintf_r+0x1bc>
 800dbae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbb0:	07d9      	lsls	r1, r3, #31
 800dbb2:	d405      	bmi.n	800dbc0 <_vfiprintf_r+0x220>
 800dbb4:	89ab      	ldrh	r3, [r5, #12]
 800dbb6:	059a      	lsls	r2, r3, #22
 800dbb8:	d402      	bmi.n	800dbc0 <_vfiprintf_r+0x220>
 800dbba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbbc:	f7fe fdce 	bl	800c75c <__retarget_lock_release_recursive>
 800dbc0:	89ab      	ldrh	r3, [r5, #12]
 800dbc2:	065b      	lsls	r3, r3, #25
 800dbc4:	f53f af12 	bmi.w	800d9ec <_vfiprintf_r+0x4c>
 800dbc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbca:	e711      	b.n	800d9f0 <_vfiprintf_r+0x50>
 800dbcc:	ab03      	add	r3, sp, #12
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	462a      	mov	r2, r5
 800dbd2:	4b09      	ldr	r3, [pc, #36]	; (800dbf8 <_vfiprintf_r+0x258>)
 800dbd4:	a904      	add	r1, sp, #16
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	f7fb ff4c 	bl	8009a74 <_printf_i>
 800dbdc:	e7e4      	b.n	800dba8 <_vfiprintf_r+0x208>
 800dbde:	bf00      	nop
 800dbe0:	0800f144 	.word	0x0800f144
 800dbe4:	0800f164 	.word	0x0800f164
 800dbe8:	0800f124 	.word	0x0800f124
 800dbec:	0800f35c 	.word	0x0800f35c
 800dbf0:	0800f366 	.word	0x0800f366
 800dbf4:	0800952d 	.word	0x0800952d
 800dbf8:	0800d97d 	.word	0x0800d97d
 800dbfc:	0800f362 	.word	0x0800f362

0800dc00 <_read_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	4d07      	ldr	r5, [pc, #28]	; (800dc20 <_read_r+0x20>)
 800dc04:	4604      	mov	r4, r0
 800dc06:	4608      	mov	r0, r1
 800dc08:	4611      	mov	r1, r2
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	602a      	str	r2, [r5, #0]
 800dc0e:	461a      	mov	r2, r3
 800dc10:	f7f3 fd3c 	bl	800168c <_read>
 800dc14:	1c43      	adds	r3, r0, #1
 800dc16:	d102      	bne.n	800dc1e <_read_r+0x1e>
 800dc18:	682b      	ldr	r3, [r5, #0]
 800dc1a:	b103      	cbz	r3, 800dc1e <_read_r+0x1e>
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	20000aac 	.word	0x20000aac

0800dc24 <__swbuf_r>:
 800dc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc26:	460e      	mov	r6, r1
 800dc28:	4614      	mov	r4, r2
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	b118      	cbz	r0, 800dc36 <__swbuf_r+0x12>
 800dc2e:	6983      	ldr	r3, [r0, #24]
 800dc30:	b90b      	cbnz	r3, 800dc36 <__swbuf_r+0x12>
 800dc32:	f7fe f981 	bl	800bf38 <__sinit>
 800dc36:	4b21      	ldr	r3, [pc, #132]	; (800dcbc <__swbuf_r+0x98>)
 800dc38:	429c      	cmp	r4, r3
 800dc3a:	d12b      	bne.n	800dc94 <__swbuf_r+0x70>
 800dc3c:	686c      	ldr	r4, [r5, #4]
 800dc3e:	69a3      	ldr	r3, [r4, #24]
 800dc40:	60a3      	str	r3, [r4, #8]
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	071a      	lsls	r2, r3, #28
 800dc46:	d52f      	bpl.n	800dca8 <__swbuf_r+0x84>
 800dc48:	6923      	ldr	r3, [r4, #16]
 800dc4a:	b36b      	cbz	r3, 800dca8 <__swbuf_r+0x84>
 800dc4c:	6923      	ldr	r3, [r4, #16]
 800dc4e:	6820      	ldr	r0, [r4, #0]
 800dc50:	1ac0      	subs	r0, r0, r3
 800dc52:	6963      	ldr	r3, [r4, #20]
 800dc54:	b2f6      	uxtb	r6, r6
 800dc56:	4283      	cmp	r3, r0
 800dc58:	4637      	mov	r7, r6
 800dc5a:	dc04      	bgt.n	800dc66 <__swbuf_r+0x42>
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	4628      	mov	r0, r5
 800dc60:	f7fe f8d6 	bl	800be10 <_fflush_r>
 800dc64:	bb30      	cbnz	r0, 800dcb4 <__swbuf_r+0x90>
 800dc66:	68a3      	ldr	r3, [r4, #8]
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	60a3      	str	r3, [r4, #8]
 800dc6c:	6823      	ldr	r3, [r4, #0]
 800dc6e:	1c5a      	adds	r2, r3, #1
 800dc70:	6022      	str	r2, [r4, #0]
 800dc72:	701e      	strb	r6, [r3, #0]
 800dc74:	6963      	ldr	r3, [r4, #20]
 800dc76:	3001      	adds	r0, #1
 800dc78:	4283      	cmp	r3, r0
 800dc7a:	d004      	beq.n	800dc86 <__swbuf_r+0x62>
 800dc7c:	89a3      	ldrh	r3, [r4, #12]
 800dc7e:	07db      	lsls	r3, r3, #31
 800dc80:	d506      	bpl.n	800dc90 <__swbuf_r+0x6c>
 800dc82:	2e0a      	cmp	r6, #10
 800dc84:	d104      	bne.n	800dc90 <__swbuf_r+0x6c>
 800dc86:	4621      	mov	r1, r4
 800dc88:	4628      	mov	r0, r5
 800dc8a:	f7fe f8c1 	bl	800be10 <_fflush_r>
 800dc8e:	b988      	cbnz	r0, 800dcb4 <__swbuf_r+0x90>
 800dc90:	4638      	mov	r0, r7
 800dc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc94:	4b0a      	ldr	r3, [pc, #40]	; (800dcc0 <__swbuf_r+0x9c>)
 800dc96:	429c      	cmp	r4, r3
 800dc98:	d101      	bne.n	800dc9e <__swbuf_r+0x7a>
 800dc9a:	68ac      	ldr	r4, [r5, #8]
 800dc9c:	e7cf      	b.n	800dc3e <__swbuf_r+0x1a>
 800dc9e:	4b09      	ldr	r3, [pc, #36]	; (800dcc4 <__swbuf_r+0xa0>)
 800dca0:	429c      	cmp	r4, r3
 800dca2:	bf08      	it	eq
 800dca4:	68ec      	ldreq	r4, [r5, #12]
 800dca6:	e7ca      	b.n	800dc3e <__swbuf_r+0x1a>
 800dca8:	4621      	mov	r1, r4
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f000 f80c 	bl	800dcc8 <__swsetup_r>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	d0cb      	beq.n	800dc4c <__swbuf_r+0x28>
 800dcb4:	f04f 37ff 	mov.w	r7, #4294967295
 800dcb8:	e7ea      	b.n	800dc90 <__swbuf_r+0x6c>
 800dcba:	bf00      	nop
 800dcbc:	0800f144 	.word	0x0800f144
 800dcc0:	0800f164 	.word	0x0800f164
 800dcc4:	0800f124 	.word	0x0800f124

0800dcc8 <__swsetup_r>:
 800dcc8:	4b32      	ldr	r3, [pc, #200]	; (800dd94 <__swsetup_r+0xcc>)
 800dcca:	b570      	push	{r4, r5, r6, lr}
 800dccc:	681d      	ldr	r5, [r3, #0]
 800dcce:	4606      	mov	r6, r0
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	b125      	cbz	r5, 800dcde <__swsetup_r+0x16>
 800dcd4:	69ab      	ldr	r3, [r5, #24]
 800dcd6:	b913      	cbnz	r3, 800dcde <__swsetup_r+0x16>
 800dcd8:	4628      	mov	r0, r5
 800dcda:	f7fe f92d 	bl	800bf38 <__sinit>
 800dcde:	4b2e      	ldr	r3, [pc, #184]	; (800dd98 <__swsetup_r+0xd0>)
 800dce0:	429c      	cmp	r4, r3
 800dce2:	d10f      	bne.n	800dd04 <__swsetup_r+0x3c>
 800dce4:	686c      	ldr	r4, [r5, #4]
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcec:	0719      	lsls	r1, r3, #28
 800dcee:	d42c      	bmi.n	800dd4a <__swsetup_r+0x82>
 800dcf0:	06dd      	lsls	r5, r3, #27
 800dcf2:	d411      	bmi.n	800dd18 <__swsetup_r+0x50>
 800dcf4:	2309      	movs	r3, #9
 800dcf6:	6033      	str	r3, [r6, #0]
 800dcf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dcfc:	81a3      	strh	r3, [r4, #12]
 800dcfe:	f04f 30ff 	mov.w	r0, #4294967295
 800dd02:	e03e      	b.n	800dd82 <__swsetup_r+0xba>
 800dd04:	4b25      	ldr	r3, [pc, #148]	; (800dd9c <__swsetup_r+0xd4>)
 800dd06:	429c      	cmp	r4, r3
 800dd08:	d101      	bne.n	800dd0e <__swsetup_r+0x46>
 800dd0a:	68ac      	ldr	r4, [r5, #8]
 800dd0c:	e7eb      	b.n	800dce6 <__swsetup_r+0x1e>
 800dd0e:	4b24      	ldr	r3, [pc, #144]	; (800dda0 <__swsetup_r+0xd8>)
 800dd10:	429c      	cmp	r4, r3
 800dd12:	bf08      	it	eq
 800dd14:	68ec      	ldreq	r4, [r5, #12]
 800dd16:	e7e6      	b.n	800dce6 <__swsetup_r+0x1e>
 800dd18:	0758      	lsls	r0, r3, #29
 800dd1a:	d512      	bpl.n	800dd42 <__swsetup_r+0x7a>
 800dd1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd1e:	b141      	cbz	r1, 800dd32 <__swsetup_r+0x6a>
 800dd20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd24:	4299      	cmp	r1, r3
 800dd26:	d002      	beq.n	800dd2e <__swsetup_r+0x66>
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f7ff fa7d 	bl	800d228 <_free_r>
 800dd2e:	2300      	movs	r3, #0
 800dd30:	6363      	str	r3, [r4, #52]	; 0x34
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd38:	81a3      	strh	r3, [r4, #12]
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	6063      	str	r3, [r4, #4]
 800dd3e:	6923      	ldr	r3, [r4, #16]
 800dd40:	6023      	str	r3, [r4, #0]
 800dd42:	89a3      	ldrh	r3, [r4, #12]
 800dd44:	f043 0308 	orr.w	r3, r3, #8
 800dd48:	81a3      	strh	r3, [r4, #12]
 800dd4a:	6923      	ldr	r3, [r4, #16]
 800dd4c:	b94b      	cbnz	r3, 800dd62 <__swsetup_r+0x9a>
 800dd4e:	89a3      	ldrh	r3, [r4, #12]
 800dd50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd58:	d003      	beq.n	800dd62 <__swsetup_r+0x9a>
 800dd5a:	4621      	mov	r1, r4
 800dd5c:	4630      	mov	r0, r6
 800dd5e:	f7fe fd23 	bl	800c7a8 <__smakebuf_r>
 800dd62:	89a0      	ldrh	r0, [r4, #12]
 800dd64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd68:	f010 0301 	ands.w	r3, r0, #1
 800dd6c:	d00a      	beq.n	800dd84 <__swsetup_r+0xbc>
 800dd6e:	2300      	movs	r3, #0
 800dd70:	60a3      	str	r3, [r4, #8]
 800dd72:	6963      	ldr	r3, [r4, #20]
 800dd74:	425b      	negs	r3, r3
 800dd76:	61a3      	str	r3, [r4, #24]
 800dd78:	6923      	ldr	r3, [r4, #16]
 800dd7a:	b943      	cbnz	r3, 800dd8e <__swsetup_r+0xc6>
 800dd7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd80:	d1ba      	bne.n	800dcf8 <__swsetup_r+0x30>
 800dd82:	bd70      	pop	{r4, r5, r6, pc}
 800dd84:	0781      	lsls	r1, r0, #30
 800dd86:	bf58      	it	pl
 800dd88:	6963      	ldrpl	r3, [r4, #20]
 800dd8a:	60a3      	str	r3, [r4, #8]
 800dd8c:	e7f4      	b.n	800dd78 <__swsetup_r+0xb0>
 800dd8e:	2000      	movs	r0, #0
 800dd90:	e7f7      	b.n	800dd82 <__swsetup_r+0xba>
 800dd92:	bf00      	nop
 800dd94:	200001a0 	.word	0x200001a0
 800dd98:	0800f144 	.word	0x0800f144
 800dd9c:	0800f164 	.word	0x0800f164
 800dda0:	0800f124 	.word	0x0800f124

0800dda4 <abort>:
 800dda4:	b508      	push	{r3, lr}
 800dda6:	2006      	movs	r0, #6
 800dda8:	f000 f834 	bl	800de14 <raise>
 800ddac:	2001      	movs	r0, #1
 800ddae:	f001 f889 	bl	800eec4 <_exit>

0800ddb2 <_malloc_usable_size_r>:
 800ddb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddb6:	1f18      	subs	r0, r3, #4
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	bfbc      	itt	lt
 800ddbc:	580b      	ldrlt	r3, [r1, r0]
 800ddbe:	18c0      	addlt	r0, r0, r3
 800ddc0:	4770      	bx	lr

0800ddc2 <_raise_r>:
 800ddc2:	291f      	cmp	r1, #31
 800ddc4:	b538      	push	{r3, r4, r5, lr}
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	460d      	mov	r5, r1
 800ddca:	d904      	bls.n	800ddd6 <_raise_r+0x14>
 800ddcc:	2316      	movs	r3, #22
 800ddce:	6003      	str	r3, [r0, #0]
 800ddd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd4:	bd38      	pop	{r3, r4, r5, pc}
 800ddd6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ddd8:	b112      	cbz	r2, 800dde0 <_raise_r+0x1e>
 800ddda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ddde:	b94b      	cbnz	r3, 800ddf4 <_raise_r+0x32>
 800dde0:	4620      	mov	r0, r4
 800dde2:	f000 f831 	bl	800de48 <_getpid_r>
 800dde6:	462a      	mov	r2, r5
 800dde8:	4601      	mov	r1, r0
 800ddea:	4620      	mov	r0, r4
 800ddec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddf0:	f000 b818 	b.w	800de24 <_kill_r>
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d00a      	beq.n	800de0e <_raise_r+0x4c>
 800ddf8:	1c59      	adds	r1, r3, #1
 800ddfa:	d103      	bne.n	800de04 <_raise_r+0x42>
 800ddfc:	2316      	movs	r3, #22
 800ddfe:	6003      	str	r3, [r0, #0]
 800de00:	2001      	movs	r0, #1
 800de02:	e7e7      	b.n	800ddd4 <_raise_r+0x12>
 800de04:	2400      	movs	r4, #0
 800de06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de0a:	4628      	mov	r0, r5
 800de0c:	4798      	blx	r3
 800de0e:	2000      	movs	r0, #0
 800de10:	e7e0      	b.n	800ddd4 <_raise_r+0x12>
	...

0800de14 <raise>:
 800de14:	4b02      	ldr	r3, [pc, #8]	; (800de20 <raise+0xc>)
 800de16:	4601      	mov	r1, r0
 800de18:	6818      	ldr	r0, [r3, #0]
 800de1a:	f7ff bfd2 	b.w	800ddc2 <_raise_r>
 800de1e:	bf00      	nop
 800de20:	200001a0 	.word	0x200001a0

0800de24 <_kill_r>:
 800de24:	b538      	push	{r3, r4, r5, lr}
 800de26:	4d07      	ldr	r5, [pc, #28]	; (800de44 <_kill_r+0x20>)
 800de28:	2300      	movs	r3, #0
 800de2a:	4604      	mov	r4, r0
 800de2c:	4608      	mov	r0, r1
 800de2e:	4611      	mov	r1, r2
 800de30:	602b      	str	r3, [r5, #0]
 800de32:	f001 f83f 	bl	800eeb4 <_kill>
 800de36:	1c43      	adds	r3, r0, #1
 800de38:	d102      	bne.n	800de40 <_kill_r+0x1c>
 800de3a:	682b      	ldr	r3, [r5, #0]
 800de3c:	b103      	cbz	r3, 800de40 <_kill_r+0x1c>
 800de3e:	6023      	str	r3, [r4, #0]
 800de40:	bd38      	pop	{r3, r4, r5, pc}
 800de42:	bf00      	nop
 800de44:	20000aac 	.word	0x20000aac

0800de48 <_getpid_r>:
 800de48:	f001 b82c 	b.w	800eea4 <_getpid>

0800de4c <cosf>:
 800de4c:	ee10 3a10 	vmov	r3, s0
 800de50:	b507      	push	{r0, r1, r2, lr}
 800de52:	4a1e      	ldr	r2, [pc, #120]	; (800decc <cosf+0x80>)
 800de54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de58:	4293      	cmp	r3, r2
 800de5a:	dc06      	bgt.n	800de6a <cosf+0x1e>
 800de5c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800ded0 <cosf+0x84>
 800de60:	b003      	add	sp, #12
 800de62:	f85d eb04 	ldr.w	lr, [sp], #4
 800de66:	f000 bb6f 	b.w	800e548 <__kernel_cosf>
 800de6a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800de6e:	db04      	blt.n	800de7a <cosf+0x2e>
 800de70:	ee30 0a40 	vsub.f32	s0, s0, s0
 800de74:	b003      	add	sp, #12
 800de76:	f85d fb04 	ldr.w	pc, [sp], #4
 800de7a:	4668      	mov	r0, sp
 800de7c:	f000 fa24 	bl	800e2c8 <__ieee754_rem_pio2f>
 800de80:	f000 0003 	and.w	r0, r0, #3
 800de84:	2801      	cmp	r0, #1
 800de86:	d009      	beq.n	800de9c <cosf+0x50>
 800de88:	2802      	cmp	r0, #2
 800de8a:	d010      	beq.n	800deae <cosf+0x62>
 800de8c:	b9b0      	cbnz	r0, 800debc <cosf+0x70>
 800de8e:	eddd 0a01 	vldr	s1, [sp, #4]
 800de92:	ed9d 0a00 	vldr	s0, [sp]
 800de96:	f000 fb57 	bl	800e548 <__kernel_cosf>
 800de9a:	e7eb      	b.n	800de74 <cosf+0x28>
 800de9c:	eddd 0a01 	vldr	s1, [sp, #4]
 800dea0:	ed9d 0a00 	vldr	s0, [sp]
 800dea4:	f000 fe26 	bl	800eaf4 <__kernel_sinf>
 800dea8:	eeb1 0a40 	vneg.f32	s0, s0
 800deac:	e7e2      	b.n	800de74 <cosf+0x28>
 800deae:	eddd 0a01 	vldr	s1, [sp, #4]
 800deb2:	ed9d 0a00 	vldr	s0, [sp]
 800deb6:	f000 fb47 	bl	800e548 <__kernel_cosf>
 800deba:	e7f5      	b.n	800dea8 <cosf+0x5c>
 800debc:	eddd 0a01 	vldr	s1, [sp, #4]
 800dec0:	ed9d 0a00 	vldr	s0, [sp]
 800dec4:	2001      	movs	r0, #1
 800dec6:	f000 fe15 	bl	800eaf4 <__kernel_sinf>
 800deca:	e7d3      	b.n	800de74 <cosf+0x28>
 800decc:	3f490fd8 	.word	0x3f490fd8
 800ded0:	00000000 	.word	0x00000000

0800ded4 <sinf>:
 800ded4:	ee10 3a10 	vmov	r3, s0
 800ded8:	b507      	push	{r0, r1, r2, lr}
 800deda:	4a1f      	ldr	r2, [pc, #124]	; (800df58 <sinf+0x84>)
 800dedc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dee0:	4293      	cmp	r3, r2
 800dee2:	dc07      	bgt.n	800def4 <sinf+0x20>
 800dee4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800df5c <sinf+0x88>
 800dee8:	2000      	movs	r0, #0
 800deea:	b003      	add	sp, #12
 800deec:	f85d eb04 	ldr.w	lr, [sp], #4
 800def0:	f000 be00 	b.w	800eaf4 <__kernel_sinf>
 800def4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800def8:	db04      	blt.n	800df04 <sinf+0x30>
 800defa:	ee30 0a40 	vsub.f32	s0, s0, s0
 800defe:	b003      	add	sp, #12
 800df00:	f85d fb04 	ldr.w	pc, [sp], #4
 800df04:	4668      	mov	r0, sp
 800df06:	f000 f9df 	bl	800e2c8 <__ieee754_rem_pio2f>
 800df0a:	f000 0003 	and.w	r0, r0, #3
 800df0e:	2801      	cmp	r0, #1
 800df10:	d00a      	beq.n	800df28 <sinf+0x54>
 800df12:	2802      	cmp	r0, #2
 800df14:	d00f      	beq.n	800df36 <sinf+0x62>
 800df16:	b9c0      	cbnz	r0, 800df4a <sinf+0x76>
 800df18:	eddd 0a01 	vldr	s1, [sp, #4]
 800df1c:	ed9d 0a00 	vldr	s0, [sp]
 800df20:	2001      	movs	r0, #1
 800df22:	f000 fde7 	bl	800eaf4 <__kernel_sinf>
 800df26:	e7ea      	b.n	800defe <sinf+0x2a>
 800df28:	eddd 0a01 	vldr	s1, [sp, #4]
 800df2c:	ed9d 0a00 	vldr	s0, [sp]
 800df30:	f000 fb0a 	bl	800e548 <__kernel_cosf>
 800df34:	e7e3      	b.n	800defe <sinf+0x2a>
 800df36:	eddd 0a01 	vldr	s1, [sp, #4]
 800df3a:	ed9d 0a00 	vldr	s0, [sp]
 800df3e:	2001      	movs	r0, #1
 800df40:	f000 fdd8 	bl	800eaf4 <__kernel_sinf>
 800df44:	eeb1 0a40 	vneg.f32	s0, s0
 800df48:	e7d9      	b.n	800defe <sinf+0x2a>
 800df4a:	eddd 0a01 	vldr	s1, [sp, #4]
 800df4e:	ed9d 0a00 	vldr	s0, [sp]
 800df52:	f000 faf9 	bl	800e548 <__kernel_cosf>
 800df56:	e7f5      	b.n	800df44 <sinf+0x70>
 800df58:	3f490fd8 	.word	0x3f490fd8
 800df5c:	00000000 	.word	0x00000000

0800df60 <asinf>:
 800df60:	b508      	push	{r3, lr}
 800df62:	ed2d 8b02 	vpush	{d8}
 800df66:	eeb0 8a40 	vmov.f32	s16, s0
 800df6a:	f000 f827 	bl	800dfbc <__ieee754_asinf>
 800df6e:	eeb4 8a48 	vcmp.f32	s16, s16
 800df72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df76:	eef0 8a40 	vmov.f32	s17, s0
 800df7a:	d615      	bvs.n	800dfa8 <asinf+0x48>
 800df7c:	eeb0 0a48 	vmov.f32	s0, s16
 800df80:	f000 fed4 	bl	800ed2c <fabsf>
 800df84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800df88:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800df8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df90:	dd0a      	ble.n	800dfa8 <asinf+0x48>
 800df92:	f7fb f9f9 	bl	8009388 <__errno>
 800df96:	ecbd 8b02 	vpop	{d8}
 800df9a:	2321      	movs	r3, #33	; 0x21
 800df9c:	6003      	str	r3, [r0, #0]
 800df9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dfa2:	4804      	ldr	r0, [pc, #16]	; (800dfb4 <asinf+0x54>)
 800dfa4:	f7fc b962 	b.w	800a26c <nanf>
 800dfa8:	eeb0 0a68 	vmov.f32	s0, s17
 800dfac:	ecbd 8b02 	vpop	{d8}
 800dfb0:	bd08      	pop	{r3, pc}
 800dfb2:	bf00      	nop
 800dfb4:	0800f3a8 	.word	0x0800f3a8

0800dfb8 <atan2f>:
 800dfb8:	f000 b8e6 	b.w	800e188 <__ieee754_atan2f>

0800dfbc <__ieee754_asinf>:
 800dfbc:	b538      	push	{r3, r4, r5, lr}
 800dfbe:	ee10 5a10 	vmov	r5, s0
 800dfc2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800dfc6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800dfca:	ed2d 8b04 	vpush	{d8-d9}
 800dfce:	d10c      	bne.n	800dfea <__ieee754_asinf+0x2e>
 800dfd0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800e148 <__ieee754_asinf+0x18c>
 800dfd4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800e14c <__ieee754_asinf+0x190>
 800dfd8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800dfdc:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dfe0:	eeb0 0a67 	vmov.f32	s0, s15
 800dfe4:	ecbd 8b04 	vpop	{d8-d9}
 800dfe8:	bd38      	pop	{r3, r4, r5, pc}
 800dfea:	dd04      	ble.n	800dff6 <__ieee754_asinf+0x3a>
 800dfec:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dff0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800dff4:	e7f6      	b.n	800dfe4 <__ieee754_asinf+0x28>
 800dff6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800dffa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800dffe:	da0b      	bge.n	800e018 <__ieee754_asinf+0x5c>
 800e000:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800e004:	da52      	bge.n	800e0ac <__ieee754_asinf+0xf0>
 800e006:	eddf 7a52 	vldr	s15, [pc, #328]	; 800e150 <__ieee754_asinf+0x194>
 800e00a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e00e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e016:	dce5      	bgt.n	800dfe4 <__ieee754_asinf+0x28>
 800e018:	f000 fe88 	bl	800ed2c <fabsf>
 800e01c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800e020:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800e024:	ee20 8a08 	vmul.f32	s16, s0, s16
 800e028:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800e154 <__ieee754_asinf+0x198>
 800e02c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800e158 <__ieee754_asinf+0x19c>
 800e030:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800e15c <__ieee754_asinf+0x1a0>
 800e034:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e038:	eddf 7a49 	vldr	s15, [pc, #292]	; 800e160 <__ieee754_asinf+0x1a4>
 800e03c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e040:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e164 <__ieee754_asinf+0x1a8>
 800e044:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e048:	eddf 7a47 	vldr	s15, [pc, #284]	; 800e168 <__ieee754_asinf+0x1ac>
 800e04c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e050:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e16c <__ieee754_asinf+0x1b0>
 800e054:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e058:	eddf 7a45 	vldr	s15, [pc, #276]	; 800e170 <__ieee754_asinf+0x1b4>
 800e05c:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e060:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800e174 <__ieee754_asinf+0x1b8>
 800e064:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e068:	eddf 7a43 	vldr	s15, [pc, #268]	; 800e178 <__ieee754_asinf+0x1bc>
 800e06c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e070:	eeb0 0a48 	vmov.f32	s0, s16
 800e074:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e078:	f000 fa62 	bl	800e540 <__ieee754_sqrtf>
 800e07c:	4b3f      	ldr	r3, [pc, #252]	; (800e17c <__ieee754_asinf+0x1c0>)
 800e07e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e082:	429c      	cmp	r4, r3
 800e084:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e088:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e08c:	dd3d      	ble.n	800e10a <__ieee754_asinf+0x14e>
 800e08e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e092:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800e180 <__ieee754_asinf+0x1c4>
 800e096:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e09a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e14c <__ieee754_asinf+0x190>
 800e09e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e0a2:	2d00      	cmp	r5, #0
 800e0a4:	bfd8      	it	le
 800e0a6:	eeb1 0a40 	vnegle.f32	s0, s0
 800e0aa:	e79b      	b.n	800dfe4 <__ieee754_asinf+0x28>
 800e0ac:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e0b0:	eddf 6a28 	vldr	s13, [pc, #160]	; 800e154 <__ieee754_asinf+0x198>
 800e0b4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800e158 <__ieee754_asinf+0x19c>
 800e0b8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800e16c <__ieee754_asinf+0x1b0>
 800e0bc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e0c0:	eddf 6a27 	vldr	s13, [pc, #156]	; 800e160 <__ieee754_asinf+0x1a4>
 800e0c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e0c8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800e164 <__ieee754_asinf+0x1a8>
 800e0cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e0d0:	eddf 6a25 	vldr	s13, [pc, #148]	; 800e168 <__ieee754_asinf+0x1ac>
 800e0d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e0d8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800e15c <__ieee754_asinf+0x1a0>
 800e0dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e0e0:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e170 <__ieee754_asinf+0x1b4>
 800e0e4:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e0e8:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800e174 <__ieee754_asinf+0x1b8>
 800e0ec:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e0f0:	eddf 6a21 	vldr	s13, [pc, #132]	; 800e178 <__ieee754_asinf+0x1bc>
 800e0f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e0f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0fc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e100:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e104:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e108:	e76c      	b.n	800dfe4 <__ieee754_asinf+0x28>
 800e10a:	ee10 3a10 	vmov	r3, s0
 800e10e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e112:	f023 030f 	bic.w	r3, r3, #15
 800e116:	ee07 3a10 	vmov	s14, r3
 800e11a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800e11e:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e122:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e126:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800e12a:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e148 <__ieee754_asinf+0x18c>
 800e12e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800e132:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800e136:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800e184 <__ieee754_asinf+0x1c8>
 800e13a:	eeb0 6a40 	vmov.f32	s12, s0
 800e13e:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e142:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e146:	e7aa      	b.n	800e09e <__ieee754_asinf+0xe2>
 800e148:	b33bbd2e 	.word	0xb33bbd2e
 800e14c:	3fc90fdb 	.word	0x3fc90fdb
 800e150:	7149f2ca 	.word	0x7149f2ca
 800e154:	3811ef08 	.word	0x3811ef08
 800e158:	3a4f7f04 	.word	0x3a4f7f04
 800e15c:	3e2aaaab 	.word	0x3e2aaaab
 800e160:	bd241146 	.word	0xbd241146
 800e164:	3e4e0aa8 	.word	0x3e4e0aa8
 800e168:	bea6b090 	.word	0xbea6b090
 800e16c:	3d9dc62e 	.word	0x3d9dc62e
 800e170:	bf303361 	.word	0xbf303361
 800e174:	4001572d 	.word	0x4001572d
 800e178:	c019d139 	.word	0xc019d139
 800e17c:	3f799999 	.word	0x3f799999
 800e180:	333bbd2e 	.word	0x333bbd2e
 800e184:	3f490fdb 	.word	0x3f490fdb

0800e188 <__ieee754_atan2f>:
 800e188:	ee10 2a90 	vmov	r2, s1
 800e18c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e190:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e194:	b510      	push	{r4, lr}
 800e196:	eef0 7a40 	vmov.f32	s15, s0
 800e19a:	dc06      	bgt.n	800e1aa <__ieee754_atan2f+0x22>
 800e19c:	ee10 0a10 	vmov	r0, s0
 800e1a0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e1a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e1a8:	dd04      	ble.n	800e1b4 <__ieee754_atan2f+0x2c>
 800e1aa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e1ae:	eeb0 0a67 	vmov.f32	s0, s15
 800e1b2:	bd10      	pop	{r4, pc}
 800e1b4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800e1b8:	d103      	bne.n	800e1c2 <__ieee754_atan2f+0x3a>
 800e1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1be:	f000 bce1 	b.w	800eb84 <atanf>
 800e1c2:	1794      	asrs	r4, r2, #30
 800e1c4:	f004 0402 	and.w	r4, r4, #2
 800e1c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e1cc:	b943      	cbnz	r3, 800e1e0 <__ieee754_atan2f+0x58>
 800e1ce:	2c02      	cmp	r4, #2
 800e1d0:	d05e      	beq.n	800e290 <__ieee754_atan2f+0x108>
 800e1d2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e2a4 <__ieee754_atan2f+0x11c>
 800e1d6:	2c03      	cmp	r4, #3
 800e1d8:	bf08      	it	eq
 800e1da:	eef0 7a47 	vmoveq.f32	s15, s14
 800e1de:	e7e6      	b.n	800e1ae <__ieee754_atan2f+0x26>
 800e1e0:	b941      	cbnz	r1, 800e1f4 <__ieee754_atan2f+0x6c>
 800e1e2:	eddf 7a31 	vldr	s15, [pc, #196]	; 800e2a8 <__ieee754_atan2f+0x120>
 800e1e6:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800e2ac <__ieee754_atan2f+0x124>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	bfb8      	it	lt
 800e1ee:	eef0 7a40 	vmovlt.f32	s15, s0
 800e1f2:	e7dc      	b.n	800e1ae <__ieee754_atan2f+0x26>
 800e1f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e1f8:	d110      	bne.n	800e21c <__ieee754_atan2f+0x94>
 800e1fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e1fe:	f104 34ff 	add.w	r4, r4, #4294967295
 800e202:	d107      	bne.n	800e214 <__ieee754_atan2f+0x8c>
 800e204:	2c02      	cmp	r4, #2
 800e206:	d846      	bhi.n	800e296 <__ieee754_atan2f+0x10e>
 800e208:	4b29      	ldr	r3, [pc, #164]	; (800e2b0 <__ieee754_atan2f+0x128>)
 800e20a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e20e:	edd4 7a00 	vldr	s15, [r4]
 800e212:	e7cc      	b.n	800e1ae <__ieee754_atan2f+0x26>
 800e214:	2c02      	cmp	r4, #2
 800e216:	d841      	bhi.n	800e29c <__ieee754_atan2f+0x114>
 800e218:	4b26      	ldr	r3, [pc, #152]	; (800e2b4 <__ieee754_atan2f+0x12c>)
 800e21a:	e7f6      	b.n	800e20a <__ieee754_atan2f+0x82>
 800e21c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e220:	d0df      	beq.n	800e1e2 <__ieee754_atan2f+0x5a>
 800e222:	1a5b      	subs	r3, r3, r1
 800e224:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800e228:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e22c:	da1a      	bge.n	800e264 <__ieee754_atan2f+0xdc>
 800e22e:	2a00      	cmp	r2, #0
 800e230:	da01      	bge.n	800e236 <__ieee754_atan2f+0xae>
 800e232:	313c      	adds	r1, #60	; 0x3c
 800e234:	db19      	blt.n	800e26a <__ieee754_atan2f+0xe2>
 800e236:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e23a:	f000 fd77 	bl	800ed2c <fabsf>
 800e23e:	f000 fca1 	bl	800eb84 <atanf>
 800e242:	eef0 7a40 	vmov.f32	s15, s0
 800e246:	2c01      	cmp	r4, #1
 800e248:	d012      	beq.n	800e270 <__ieee754_atan2f+0xe8>
 800e24a:	2c02      	cmp	r4, #2
 800e24c:	d017      	beq.n	800e27e <__ieee754_atan2f+0xf6>
 800e24e:	2c00      	cmp	r4, #0
 800e250:	d0ad      	beq.n	800e1ae <__ieee754_atan2f+0x26>
 800e252:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800e2b8 <__ieee754_atan2f+0x130>
 800e256:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e25a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800e2bc <__ieee754_atan2f+0x134>
 800e25e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e262:	e7a4      	b.n	800e1ae <__ieee754_atan2f+0x26>
 800e264:	eddf 7a10 	vldr	s15, [pc, #64]	; 800e2a8 <__ieee754_atan2f+0x120>
 800e268:	e7ed      	b.n	800e246 <__ieee754_atan2f+0xbe>
 800e26a:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e2c0 <__ieee754_atan2f+0x138>
 800e26e:	e7ea      	b.n	800e246 <__ieee754_atan2f+0xbe>
 800e270:	ee17 3a90 	vmov	r3, s15
 800e274:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e278:	ee07 3a90 	vmov	s15, r3
 800e27c:	e797      	b.n	800e1ae <__ieee754_atan2f+0x26>
 800e27e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e2b8 <__ieee754_atan2f+0x130>
 800e282:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e286:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800e2bc <__ieee754_atan2f+0x134>
 800e28a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e28e:	e78e      	b.n	800e1ae <__ieee754_atan2f+0x26>
 800e290:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800e2bc <__ieee754_atan2f+0x134>
 800e294:	e78b      	b.n	800e1ae <__ieee754_atan2f+0x26>
 800e296:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e2c4 <__ieee754_atan2f+0x13c>
 800e29a:	e788      	b.n	800e1ae <__ieee754_atan2f+0x26>
 800e29c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e2c0 <__ieee754_atan2f+0x138>
 800e2a0:	e785      	b.n	800e1ae <__ieee754_atan2f+0x26>
 800e2a2:	bf00      	nop
 800e2a4:	c0490fdb 	.word	0xc0490fdb
 800e2a8:	3fc90fdb 	.word	0x3fc90fdb
 800e2ac:	bfc90fdb 	.word	0xbfc90fdb
 800e2b0:	0800f3ac 	.word	0x0800f3ac
 800e2b4:	0800f3b8 	.word	0x0800f3b8
 800e2b8:	33bbbd2e 	.word	0x33bbbd2e
 800e2bc:	40490fdb 	.word	0x40490fdb
 800e2c0:	00000000 	.word	0x00000000
 800e2c4:	3f490fdb 	.word	0x3f490fdb

0800e2c8 <__ieee754_rem_pio2f>:
 800e2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ca:	ee10 6a10 	vmov	r6, s0
 800e2ce:	4b8e      	ldr	r3, [pc, #568]	; (800e508 <__ieee754_rem_pio2f+0x240>)
 800e2d0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e2d4:	429d      	cmp	r5, r3
 800e2d6:	b087      	sub	sp, #28
 800e2d8:	eef0 7a40 	vmov.f32	s15, s0
 800e2dc:	4604      	mov	r4, r0
 800e2de:	dc05      	bgt.n	800e2ec <__ieee754_rem_pio2f+0x24>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	ed80 0a00 	vstr	s0, [r0]
 800e2e6:	6043      	str	r3, [r0, #4]
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	e01a      	b.n	800e322 <__ieee754_rem_pio2f+0x5a>
 800e2ec:	4b87      	ldr	r3, [pc, #540]	; (800e50c <__ieee754_rem_pio2f+0x244>)
 800e2ee:	429d      	cmp	r5, r3
 800e2f0:	dc46      	bgt.n	800e380 <__ieee754_rem_pio2f+0xb8>
 800e2f2:	2e00      	cmp	r6, #0
 800e2f4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800e510 <__ieee754_rem_pio2f+0x248>
 800e2f8:	4b86      	ldr	r3, [pc, #536]	; (800e514 <__ieee754_rem_pio2f+0x24c>)
 800e2fa:	f025 050f 	bic.w	r5, r5, #15
 800e2fe:	dd1f      	ble.n	800e340 <__ieee754_rem_pio2f+0x78>
 800e300:	429d      	cmp	r5, r3
 800e302:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e306:	d00e      	beq.n	800e326 <__ieee754_rem_pio2f+0x5e>
 800e308:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800e518 <__ieee754_rem_pio2f+0x250>
 800e30c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800e310:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e314:	ed80 0a00 	vstr	s0, [r0]
 800e318:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e31c:	2001      	movs	r0, #1
 800e31e:	edc4 7a01 	vstr	s15, [r4, #4]
 800e322:	b007      	add	sp, #28
 800e324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e326:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e51c <__ieee754_rem_pio2f+0x254>
 800e32a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800e520 <__ieee754_rem_pio2f+0x258>
 800e32e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e332:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e336:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e33a:	edc0 6a00 	vstr	s13, [r0]
 800e33e:	e7eb      	b.n	800e318 <__ieee754_rem_pio2f+0x50>
 800e340:	429d      	cmp	r5, r3
 800e342:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e346:	d00e      	beq.n	800e366 <__ieee754_rem_pio2f+0x9e>
 800e348:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800e518 <__ieee754_rem_pio2f+0x250>
 800e34c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800e350:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e354:	ed80 0a00 	vstr	s0, [r0]
 800e358:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e35c:	f04f 30ff 	mov.w	r0, #4294967295
 800e360:	edc4 7a01 	vstr	s15, [r4, #4]
 800e364:	e7dd      	b.n	800e322 <__ieee754_rem_pio2f+0x5a>
 800e366:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800e51c <__ieee754_rem_pio2f+0x254>
 800e36a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800e520 <__ieee754_rem_pio2f+0x258>
 800e36e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e372:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e376:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e37a:	edc0 6a00 	vstr	s13, [r0]
 800e37e:	e7eb      	b.n	800e358 <__ieee754_rem_pio2f+0x90>
 800e380:	4b68      	ldr	r3, [pc, #416]	; (800e524 <__ieee754_rem_pio2f+0x25c>)
 800e382:	429d      	cmp	r5, r3
 800e384:	dc72      	bgt.n	800e46c <__ieee754_rem_pio2f+0x1a4>
 800e386:	f000 fcd1 	bl	800ed2c <fabsf>
 800e38a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e528 <__ieee754_rem_pio2f+0x260>
 800e38e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e392:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e39a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e39e:	ee17 0a90 	vmov	r0, s15
 800e3a2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e510 <__ieee754_rem_pio2f+0x248>
 800e3a6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e3aa:	281f      	cmp	r0, #31
 800e3ac:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800e518 <__ieee754_rem_pio2f+0x250>
 800e3b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3b4:	eeb1 6a47 	vneg.f32	s12, s14
 800e3b8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e3bc:	ee16 2a90 	vmov	r2, s13
 800e3c0:	dc1c      	bgt.n	800e3fc <__ieee754_rem_pio2f+0x134>
 800e3c2:	495a      	ldr	r1, [pc, #360]	; (800e52c <__ieee754_rem_pio2f+0x264>)
 800e3c4:	1e47      	subs	r7, r0, #1
 800e3c6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800e3ca:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800e3ce:	428b      	cmp	r3, r1
 800e3d0:	d014      	beq.n	800e3fc <__ieee754_rem_pio2f+0x134>
 800e3d2:	6022      	str	r2, [r4, #0]
 800e3d4:	ed94 7a00 	vldr	s14, [r4]
 800e3d8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e3dc:	2e00      	cmp	r6, #0
 800e3de:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e3e2:	ed84 0a01 	vstr	s0, [r4, #4]
 800e3e6:	da9c      	bge.n	800e322 <__ieee754_rem_pio2f+0x5a>
 800e3e8:	eeb1 7a47 	vneg.f32	s14, s14
 800e3ec:	eeb1 0a40 	vneg.f32	s0, s0
 800e3f0:	ed84 7a00 	vstr	s14, [r4]
 800e3f4:	ed84 0a01 	vstr	s0, [r4, #4]
 800e3f8:	4240      	negs	r0, r0
 800e3fa:	e792      	b.n	800e322 <__ieee754_rem_pio2f+0x5a>
 800e3fc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e400:	15eb      	asrs	r3, r5, #23
 800e402:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800e406:	2d08      	cmp	r5, #8
 800e408:	dde3      	ble.n	800e3d2 <__ieee754_rem_pio2f+0x10a>
 800e40a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800e51c <__ieee754_rem_pio2f+0x254>
 800e40e:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e520 <__ieee754_rem_pio2f+0x258>
 800e412:	eef0 6a40 	vmov.f32	s13, s0
 800e416:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e41a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e41e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800e422:	eef0 7a40 	vmov.f32	s15, s0
 800e426:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e42a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e42e:	ee15 2a90 	vmov	r2, s11
 800e432:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e436:	1a5b      	subs	r3, r3, r1
 800e438:	2b19      	cmp	r3, #25
 800e43a:	dc04      	bgt.n	800e446 <__ieee754_rem_pio2f+0x17e>
 800e43c:	edc4 5a00 	vstr	s11, [r4]
 800e440:	eeb0 0a66 	vmov.f32	s0, s13
 800e444:	e7c6      	b.n	800e3d4 <__ieee754_rem_pio2f+0x10c>
 800e446:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800e530 <__ieee754_rem_pio2f+0x268>
 800e44a:	eeb0 0a66 	vmov.f32	s0, s13
 800e44e:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e452:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e456:	eddf 6a37 	vldr	s13, [pc, #220]	; 800e534 <__ieee754_rem_pio2f+0x26c>
 800e45a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e45e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e462:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e466:	ed84 7a00 	vstr	s14, [r4]
 800e46a:	e7b3      	b.n	800e3d4 <__ieee754_rem_pio2f+0x10c>
 800e46c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e470:	db06      	blt.n	800e480 <__ieee754_rem_pio2f+0x1b8>
 800e472:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e476:	edc0 7a01 	vstr	s15, [r0, #4]
 800e47a:	edc0 7a00 	vstr	s15, [r0]
 800e47e:	e733      	b.n	800e2e8 <__ieee754_rem_pio2f+0x20>
 800e480:	15ea      	asrs	r2, r5, #23
 800e482:	3a86      	subs	r2, #134	; 0x86
 800e484:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e488:	ee07 3a90 	vmov	s15, r3
 800e48c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e490:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e538 <__ieee754_rem_pio2f+0x270>
 800e494:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e498:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e49c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e4a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e4a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e4a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e4ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e4b0:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e4b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e4b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c0:	edcd 7a05 	vstr	s15, [sp, #20]
 800e4c4:	d11e      	bne.n	800e504 <__ieee754_rem_pio2f+0x23c>
 800e4c6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ce:	bf14      	ite	ne
 800e4d0:	2302      	movne	r3, #2
 800e4d2:	2301      	moveq	r3, #1
 800e4d4:	4919      	ldr	r1, [pc, #100]	; (800e53c <__ieee754_rem_pio2f+0x274>)
 800e4d6:	9101      	str	r1, [sp, #4]
 800e4d8:	2102      	movs	r1, #2
 800e4da:	9100      	str	r1, [sp, #0]
 800e4dc:	a803      	add	r0, sp, #12
 800e4de:	4621      	mov	r1, r4
 800e4e0:	f000 f892 	bl	800e608 <__kernel_rem_pio2f>
 800e4e4:	2e00      	cmp	r6, #0
 800e4e6:	f6bf af1c 	bge.w	800e322 <__ieee754_rem_pio2f+0x5a>
 800e4ea:	edd4 7a00 	vldr	s15, [r4]
 800e4ee:	eef1 7a67 	vneg.f32	s15, s15
 800e4f2:	edc4 7a00 	vstr	s15, [r4]
 800e4f6:	edd4 7a01 	vldr	s15, [r4, #4]
 800e4fa:	eef1 7a67 	vneg.f32	s15, s15
 800e4fe:	edc4 7a01 	vstr	s15, [r4, #4]
 800e502:	e779      	b.n	800e3f8 <__ieee754_rem_pio2f+0x130>
 800e504:	2303      	movs	r3, #3
 800e506:	e7e5      	b.n	800e4d4 <__ieee754_rem_pio2f+0x20c>
 800e508:	3f490fd8 	.word	0x3f490fd8
 800e50c:	4016cbe3 	.word	0x4016cbe3
 800e510:	3fc90f80 	.word	0x3fc90f80
 800e514:	3fc90fd0 	.word	0x3fc90fd0
 800e518:	37354443 	.word	0x37354443
 800e51c:	37354400 	.word	0x37354400
 800e520:	2e85a308 	.word	0x2e85a308
 800e524:	43490f80 	.word	0x43490f80
 800e528:	3f22f984 	.word	0x3f22f984
 800e52c:	0800f3c4 	.word	0x0800f3c4
 800e530:	2e85a300 	.word	0x2e85a300
 800e534:	248d3132 	.word	0x248d3132
 800e538:	43800000 	.word	0x43800000
 800e53c:	0800f444 	.word	0x0800f444

0800e540 <__ieee754_sqrtf>:
 800e540:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e544:	4770      	bx	lr
	...

0800e548 <__kernel_cosf>:
 800e548:	ee10 3a10 	vmov	r3, s0
 800e54c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e550:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e554:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e558:	da05      	bge.n	800e566 <__kernel_cosf+0x1e>
 800e55a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e55e:	ee17 2a90 	vmov	r2, s15
 800e562:	2a00      	cmp	r2, #0
 800e564:	d03d      	beq.n	800e5e2 <__kernel_cosf+0x9a>
 800e566:	ee60 5a00 	vmul.f32	s11, s0, s0
 800e56a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e5e8 <__kernel_cosf+0xa0>
 800e56e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e5ec <__kernel_cosf+0xa4>
 800e572:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800e5f0 <__kernel_cosf+0xa8>
 800e576:	4a1f      	ldr	r2, [pc, #124]	; (800e5f4 <__kernel_cosf+0xac>)
 800e578:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e57c:	4293      	cmp	r3, r2
 800e57e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e5f8 <__kernel_cosf+0xb0>
 800e582:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e586:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e5fc <__kernel_cosf+0xb4>
 800e58a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e58e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800e600 <__kernel_cosf+0xb8>
 800e592:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e596:	eeb0 7a66 	vmov.f32	s14, s13
 800e59a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e59e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e5a2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800e5a6:	ee67 6a25 	vmul.f32	s13, s14, s11
 800e5aa:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800e5ae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e5b2:	dc04      	bgt.n	800e5be <__kernel_cosf+0x76>
 800e5b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e5b8:	ee36 0a47 	vsub.f32	s0, s12, s14
 800e5bc:	4770      	bx	lr
 800e5be:	4a11      	ldr	r2, [pc, #68]	; (800e604 <__kernel_cosf+0xbc>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	bfda      	itte	le
 800e5c4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800e5c8:	ee06 3a90 	vmovle	s13, r3
 800e5cc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800e5d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e5d4:	ee36 0a66 	vsub.f32	s0, s12, s13
 800e5d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5dc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e5e0:	4770      	bx	lr
 800e5e2:	eeb0 0a46 	vmov.f32	s0, s12
 800e5e6:	4770      	bx	lr
 800e5e8:	ad47d74e 	.word	0xad47d74e
 800e5ec:	310f74f6 	.word	0x310f74f6
 800e5f0:	3d2aaaab 	.word	0x3d2aaaab
 800e5f4:	3e999999 	.word	0x3e999999
 800e5f8:	b493f27c 	.word	0xb493f27c
 800e5fc:	37d00d01 	.word	0x37d00d01
 800e600:	bab60b61 	.word	0xbab60b61
 800e604:	3f480000 	.word	0x3f480000

0800e608 <__kernel_rem_pio2f>:
 800e608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e60c:	ed2d 8b04 	vpush	{d8-d9}
 800e610:	b0d9      	sub	sp, #356	; 0x164
 800e612:	4688      	mov	r8, r1
 800e614:	9002      	str	r0, [sp, #8]
 800e616:	49bb      	ldr	r1, [pc, #748]	; (800e904 <__kernel_rem_pio2f+0x2fc>)
 800e618:	9866      	ldr	r0, [sp, #408]	; 0x198
 800e61a:	9301      	str	r3, [sp, #4]
 800e61c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800e620:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800e624:	1e59      	subs	r1, r3, #1
 800e626:	1d13      	adds	r3, r2, #4
 800e628:	db27      	blt.n	800e67a <__kernel_rem_pio2f+0x72>
 800e62a:	f1b2 0b03 	subs.w	fp, r2, #3
 800e62e:	bf48      	it	mi
 800e630:	f102 0b04 	addmi.w	fp, r2, #4
 800e634:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800e638:	1c45      	adds	r5, r0, #1
 800e63a:	00ec      	lsls	r4, r5, #3
 800e63c:	1a47      	subs	r7, r0, r1
 800e63e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800e914 <__kernel_rem_pio2f+0x30c>
 800e642:	9403      	str	r4, [sp, #12]
 800e644:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800e648:	eb0a 0c01 	add.w	ip, sl, r1
 800e64c:	ae1c      	add	r6, sp, #112	; 0x70
 800e64e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800e652:	2400      	movs	r4, #0
 800e654:	4564      	cmp	r4, ip
 800e656:	dd12      	ble.n	800e67e <__kernel_rem_pio2f+0x76>
 800e658:	9b01      	ldr	r3, [sp, #4]
 800e65a:	ac1c      	add	r4, sp, #112	; 0x70
 800e65c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800e660:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800e664:	f04f 0c00 	mov.w	ip, #0
 800e668:	45d4      	cmp	ip, sl
 800e66a:	dc27      	bgt.n	800e6bc <__kernel_rem_pio2f+0xb4>
 800e66c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e670:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800e914 <__kernel_rem_pio2f+0x30c>
 800e674:	4627      	mov	r7, r4
 800e676:	2600      	movs	r6, #0
 800e678:	e016      	b.n	800e6a8 <__kernel_rem_pio2f+0xa0>
 800e67a:	2000      	movs	r0, #0
 800e67c:	e7dc      	b.n	800e638 <__kernel_rem_pio2f+0x30>
 800e67e:	42e7      	cmn	r7, r4
 800e680:	bf5d      	ittte	pl
 800e682:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800e686:	ee07 3a90 	vmovpl	s15, r3
 800e68a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e68e:	eef0 7a47 	vmovmi.f32	s15, s14
 800e692:	ece6 7a01 	vstmia	r6!, {s15}
 800e696:	3401      	adds	r4, #1
 800e698:	e7dc      	b.n	800e654 <__kernel_rem_pio2f+0x4c>
 800e69a:	ecf9 6a01 	vldmia	r9!, {s13}
 800e69e:	ed97 7a00 	vldr	s14, [r7]
 800e6a2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e6a6:	3601      	adds	r6, #1
 800e6a8:	428e      	cmp	r6, r1
 800e6aa:	f1a7 0704 	sub.w	r7, r7, #4
 800e6ae:	ddf4      	ble.n	800e69a <__kernel_rem_pio2f+0x92>
 800e6b0:	eceb 7a01 	vstmia	fp!, {s15}
 800e6b4:	f10c 0c01 	add.w	ip, ip, #1
 800e6b8:	3404      	adds	r4, #4
 800e6ba:	e7d5      	b.n	800e668 <__kernel_rem_pio2f+0x60>
 800e6bc:	ab08      	add	r3, sp, #32
 800e6be:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e6c2:	eddf 8a93 	vldr	s17, [pc, #588]	; 800e910 <__kernel_rem_pio2f+0x308>
 800e6c6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800e90c <__kernel_rem_pio2f+0x304>
 800e6ca:	9304      	str	r3, [sp, #16]
 800e6cc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800e6d0:	4656      	mov	r6, sl
 800e6d2:	00b3      	lsls	r3, r6, #2
 800e6d4:	9305      	str	r3, [sp, #20]
 800e6d6:	ab58      	add	r3, sp, #352	; 0x160
 800e6d8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e6dc:	ac08      	add	r4, sp, #32
 800e6de:	ab44      	add	r3, sp, #272	; 0x110
 800e6e0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800e6e4:	46a4      	mov	ip, r4
 800e6e6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e6ea:	4637      	mov	r7, r6
 800e6ec:	2f00      	cmp	r7, #0
 800e6ee:	f1a0 0004 	sub.w	r0, r0, #4
 800e6f2:	dc4f      	bgt.n	800e794 <__kernel_rem_pio2f+0x18c>
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800e6fa:	f000 fb61 	bl	800edc0 <scalbnf>
 800e6fe:	eeb0 8a40 	vmov.f32	s16, s0
 800e702:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800e706:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e70a:	f000 fb17 	bl	800ed3c <floorf>
 800e70e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800e712:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e716:	2d00      	cmp	r5, #0
 800e718:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e71c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e720:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800e724:	ee17 9a90 	vmov	r9, s15
 800e728:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e72c:	dd44      	ble.n	800e7b8 <__kernel_rem_pio2f+0x1b0>
 800e72e:	f106 3cff 	add.w	ip, r6, #4294967295
 800e732:	ab08      	add	r3, sp, #32
 800e734:	f1c5 0e08 	rsb	lr, r5, #8
 800e738:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800e73c:	fa47 f00e 	asr.w	r0, r7, lr
 800e740:	4481      	add	r9, r0
 800e742:	fa00 f00e 	lsl.w	r0, r0, lr
 800e746:	1a3f      	subs	r7, r7, r0
 800e748:	f1c5 0007 	rsb	r0, r5, #7
 800e74c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800e750:	4107      	asrs	r7, r0
 800e752:	2f00      	cmp	r7, #0
 800e754:	dd3f      	ble.n	800e7d6 <__kernel_rem_pio2f+0x1ce>
 800e756:	f04f 0e00 	mov.w	lr, #0
 800e75a:	f109 0901 	add.w	r9, r9, #1
 800e75e:	4673      	mov	r3, lr
 800e760:	4576      	cmp	r6, lr
 800e762:	dc6b      	bgt.n	800e83c <__kernel_rem_pio2f+0x234>
 800e764:	2d00      	cmp	r5, #0
 800e766:	dd04      	ble.n	800e772 <__kernel_rem_pio2f+0x16a>
 800e768:	2d01      	cmp	r5, #1
 800e76a:	d078      	beq.n	800e85e <__kernel_rem_pio2f+0x256>
 800e76c:	2d02      	cmp	r5, #2
 800e76e:	f000 8081 	beq.w	800e874 <__kernel_rem_pio2f+0x26c>
 800e772:	2f02      	cmp	r7, #2
 800e774:	d12f      	bne.n	800e7d6 <__kernel_rem_pio2f+0x1ce>
 800e776:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e77a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e77e:	b353      	cbz	r3, 800e7d6 <__kernel_rem_pio2f+0x1ce>
 800e780:	4628      	mov	r0, r5
 800e782:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800e786:	f000 fb1b 	bl	800edc0 <scalbnf>
 800e78a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e78e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e792:	e020      	b.n	800e7d6 <__kernel_rem_pio2f+0x1ce>
 800e794:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e798:	3f01      	subs	r7, #1
 800e79a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e79e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7a2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e7a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e7aa:	ecac 0a01 	vstmia	ip!, {s0}
 800e7ae:	ed90 0a00 	vldr	s0, [r0]
 800e7b2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e7b6:	e799      	b.n	800e6ec <__kernel_rem_pio2f+0xe4>
 800e7b8:	d105      	bne.n	800e7c6 <__kernel_rem_pio2f+0x1be>
 800e7ba:	1e70      	subs	r0, r6, #1
 800e7bc:	ab08      	add	r3, sp, #32
 800e7be:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800e7c2:	11ff      	asrs	r7, r7, #7
 800e7c4:	e7c5      	b.n	800e752 <__kernel_rem_pio2f+0x14a>
 800e7c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e7ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7d2:	da31      	bge.n	800e838 <__kernel_rem_pio2f+0x230>
 800e7d4:	2700      	movs	r7, #0
 800e7d6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7de:	f040 809b 	bne.w	800e918 <__kernel_rem_pio2f+0x310>
 800e7e2:	1e74      	subs	r4, r6, #1
 800e7e4:	46a4      	mov	ip, r4
 800e7e6:	2000      	movs	r0, #0
 800e7e8:	45d4      	cmp	ip, sl
 800e7ea:	da4a      	bge.n	800e882 <__kernel_rem_pio2f+0x27a>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d07a      	beq.n	800e8e6 <__kernel_rem_pio2f+0x2de>
 800e7f0:	ab08      	add	r3, sp, #32
 800e7f2:	3d08      	subs	r5, #8
 800e7f4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f000 8081 	beq.w	800e900 <__kernel_rem_pio2f+0x2f8>
 800e7fe:	4628      	mov	r0, r5
 800e800:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e804:	00a5      	lsls	r5, r4, #2
 800e806:	f000 fadb 	bl	800edc0 <scalbnf>
 800e80a:	aa44      	add	r2, sp, #272	; 0x110
 800e80c:	1d2b      	adds	r3, r5, #4
 800e80e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800e910 <__kernel_rem_pio2f+0x308>
 800e812:	18d1      	adds	r1, r2, r3
 800e814:	4622      	mov	r2, r4
 800e816:	2a00      	cmp	r2, #0
 800e818:	f280 80ae 	bge.w	800e978 <__kernel_rem_pio2f+0x370>
 800e81c:	4622      	mov	r2, r4
 800e81e:	2a00      	cmp	r2, #0
 800e820:	f2c0 80cc 	blt.w	800e9bc <__kernel_rem_pio2f+0x3b4>
 800e824:	a944      	add	r1, sp, #272	; 0x110
 800e826:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800e82a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800e908 <__kernel_rem_pio2f+0x300>
 800e82e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e914 <__kernel_rem_pio2f+0x30c>
 800e832:	2000      	movs	r0, #0
 800e834:	1aa1      	subs	r1, r4, r2
 800e836:	e0b6      	b.n	800e9a6 <__kernel_rem_pio2f+0x39e>
 800e838:	2702      	movs	r7, #2
 800e83a:	e78c      	b.n	800e756 <__kernel_rem_pio2f+0x14e>
 800e83c:	6820      	ldr	r0, [r4, #0]
 800e83e:	b94b      	cbnz	r3, 800e854 <__kernel_rem_pio2f+0x24c>
 800e840:	b118      	cbz	r0, 800e84a <__kernel_rem_pio2f+0x242>
 800e842:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800e846:	6020      	str	r0, [r4, #0]
 800e848:	2001      	movs	r0, #1
 800e84a:	f10e 0e01 	add.w	lr, lr, #1
 800e84e:	3404      	adds	r4, #4
 800e850:	4603      	mov	r3, r0
 800e852:	e785      	b.n	800e760 <__kernel_rem_pio2f+0x158>
 800e854:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800e858:	6020      	str	r0, [r4, #0]
 800e85a:	4618      	mov	r0, r3
 800e85c:	e7f5      	b.n	800e84a <__kernel_rem_pio2f+0x242>
 800e85e:	1e74      	subs	r4, r6, #1
 800e860:	a808      	add	r0, sp, #32
 800e862:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e866:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e86a:	f10d 0c20 	add.w	ip, sp, #32
 800e86e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800e872:	e77e      	b.n	800e772 <__kernel_rem_pio2f+0x16a>
 800e874:	1e74      	subs	r4, r6, #1
 800e876:	a808      	add	r0, sp, #32
 800e878:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e87c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e880:	e7f3      	b.n	800e86a <__kernel_rem_pio2f+0x262>
 800e882:	ab08      	add	r3, sp, #32
 800e884:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800e888:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e88c:	4318      	orrs	r0, r3
 800e88e:	e7ab      	b.n	800e7e8 <__kernel_rem_pio2f+0x1e0>
 800e890:	f10c 0c01 	add.w	ip, ip, #1
 800e894:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800e898:	2c00      	cmp	r4, #0
 800e89a:	d0f9      	beq.n	800e890 <__kernel_rem_pio2f+0x288>
 800e89c:	9b05      	ldr	r3, [sp, #20]
 800e89e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800e8a2:	eb0d 0003 	add.w	r0, sp, r3
 800e8a6:	9b01      	ldr	r3, [sp, #4]
 800e8a8:	18f4      	adds	r4, r6, r3
 800e8aa:	ab1c      	add	r3, sp, #112	; 0x70
 800e8ac:	1c77      	adds	r7, r6, #1
 800e8ae:	384c      	subs	r0, #76	; 0x4c
 800e8b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e8b4:	4466      	add	r6, ip
 800e8b6:	42be      	cmp	r6, r7
 800e8b8:	f6ff af0b 	blt.w	800e6d2 <__kernel_rem_pio2f+0xca>
 800e8bc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800e8c0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e8c4:	ee07 3a90 	vmov	s15, r3
 800e8c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8cc:	f04f 0c00 	mov.w	ip, #0
 800e8d0:	ece4 7a01 	vstmia	r4!, {s15}
 800e8d4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e914 <__kernel_rem_pio2f+0x30c>
 800e8d8:	46a1      	mov	r9, r4
 800e8da:	458c      	cmp	ip, r1
 800e8dc:	dd07      	ble.n	800e8ee <__kernel_rem_pio2f+0x2e6>
 800e8de:	ece0 7a01 	vstmia	r0!, {s15}
 800e8e2:	3701      	adds	r7, #1
 800e8e4:	e7e7      	b.n	800e8b6 <__kernel_rem_pio2f+0x2ae>
 800e8e6:	9804      	ldr	r0, [sp, #16]
 800e8e8:	f04f 0c01 	mov.w	ip, #1
 800e8ec:	e7d2      	b.n	800e894 <__kernel_rem_pio2f+0x28c>
 800e8ee:	ecfe 6a01 	vldmia	lr!, {s13}
 800e8f2:	ed39 7a01 	vldmdb	r9!, {s14}
 800e8f6:	f10c 0c01 	add.w	ip, ip, #1
 800e8fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e8fe:	e7ec      	b.n	800e8da <__kernel_rem_pio2f+0x2d2>
 800e900:	3c01      	subs	r4, #1
 800e902:	e775      	b.n	800e7f0 <__kernel_rem_pio2f+0x1e8>
 800e904:	0800f788 	.word	0x0800f788
 800e908:	0800f75c 	.word	0x0800f75c
 800e90c:	43800000 	.word	0x43800000
 800e910:	3b800000 	.word	0x3b800000
 800e914:	00000000 	.word	0x00000000
 800e918:	9b03      	ldr	r3, [sp, #12]
 800e91a:	eeb0 0a48 	vmov.f32	s0, s16
 800e91e:	1a98      	subs	r0, r3, r2
 800e920:	f000 fa4e 	bl	800edc0 <scalbnf>
 800e924:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800e90c <__kernel_rem_pio2f+0x304>
 800e928:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e930:	db19      	blt.n	800e966 <__kernel_rem_pio2f+0x35e>
 800e932:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800e910 <__kernel_rem_pio2f+0x308>
 800e936:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e93a:	aa08      	add	r2, sp, #32
 800e93c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e940:	1c74      	adds	r4, r6, #1
 800e942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e946:	3508      	adds	r5, #8
 800e948:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e94c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e950:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e954:	ee10 3a10 	vmov	r3, s0
 800e958:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e95c:	ee17 3a90 	vmov	r3, s15
 800e960:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e964:	e74b      	b.n	800e7fe <__kernel_rem_pio2f+0x1f6>
 800e966:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e96a:	aa08      	add	r2, sp, #32
 800e96c:	ee10 3a10 	vmov	r3, s0
 800e970:	4634      	mov	r4, r6
 800e972:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e976:	e742      	b.n	800e7fe <__kernel_rem_pio2f+0x1f6>
 800e978:	a808      	add	r0, sp, #32
 800e97a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e97e:	9001      	str	r0, [sp, #4]
 800e980:	ee07 0a90 	vmov	s15, r0
 800e984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e988:	3a01      	subs	r2, #1
 800e98a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e98e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e992:	ed61 7a01 	vstmdb	r1!, {s15}
 800e996:	e73e      	b.n	800e816 <__kernel_rem_pio2f+0x20e>
 800e998:	ecfc 6a01 	vldmia	ip!, {s13}
 800e99c:	ecb6 7a01 	vldmia	r6!, {s14}
 800e9a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	4550      	cmp	r0, sl
 800e9a8:	dc01      	bgt.n	800e9ae <__kernel_rem_pio2f+0x3a6>
 800e9aa:	4288      	cmp	r0, r1
 800e9ac:	ddf4      	ble.n	800e998 <__kernel_rem_pio2f+0x390>
 800e9ae:	a858      	add	r0, sp, #352	; 0x160
 800e9b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e9b4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800e9b8:	3a01      	subs	r2, #1
 800e9ba:	e730      	b.n	800e81e <__kernel_rem_pio2f+0x216>
 800e9bc:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800e9be:	2a02      	cmp	r2, #2
 800e9c0:	dc09      	bgt.n	800e9d6 <__kernel_rem_pio2f+0x3ce>
 800e9c2:	2a00      	cmp	r2, #0
 800e9c4:	dc2a      	bgt.n	800ea1c <__kernel_rem_pio2f+0x414>
 800e9c6:	d043      	beq.n	800ea50 <__kernel_rem_pio2f+0x448>
 800e9c8:	f009 0007 	and.w	r0, r9, #7
 800e9cc:	b059      	add	sp, #356	; 0x164
 800e9ce:	ecbd 8b04 	vpop	{d8-d9}
 800e9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e9d8:	2b03      	cmp	r3, #3
 800e9da:	d1f5      	bne.n	800e9c8 <__kernel_rem_pio2f+0x3c0>
 800e9dc:	ab30      	add	r3, sp, #192	; 0xc0
 800e9de:	442b      	add	r3, r5
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	f1a1 0104 	sub.w	r1, r1, #4
 800e9ec:	dc51      	bgt.n	800ea92 <__kernel_rem_pio2f+0x48a>
 800e9ee:	4621      	mov	r1, r4
 800e9f0:	2901      	cmp	r1, #1
 800e9f2:	f1a2 0204 	sub.w	r2, r2, #4
 800e9f6:	dc5c      	bgt.n	800eab2 <__kernel_rem_pio2f+0x4aa>
 800e9f8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800e914 <__kernel_rem_pio2f+0x30c>
 800e9fc:	3304      	adds	r3, #4
 800e9fe:	2c01      	cmp	r4, #1
 800ea00:	dc67      	bgt.n	800ead2 <__kernel_rem_pio2f+0x4ca>
 800ea02:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ea06:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ea0a:	2f00      	cmp	r7, #0
 800ea0c:	d167      	bne.n	800eade <__kernel_rem_pio2f+0x4d6>
 800ea0e:	edc8 6a00 	vstr	s13, [r8]
 800ea12:	ed88 7a01 	vstr	s14, [r8, #4]
 800ea16:	edc8 7a02 	vstr	s15, [r8, #8]
 800ea1a:	e7d5      	b.n	800e9c8 <__kernel_rem_pio2f+0x3c0>
 800ea1c:	aa30      	add	r2, sp, #192	; 0xc0
 800ea1e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800e914 <__kernel_rem_pio2f+0x30c>
 800ea22:	4413      	add	r3, r2
 800ea24:	4622      	mov	r2, r4
 800ea26:	2a00      	cmp	r2, #0
 800ea28:	da24      	bge.n	800ea74 <__kernel_rem_pio2f+0x46c>
 800ea2a:	b34f      	cbz	r7, 800ea80 <__kernel_rem_pio2f+0x478>
 800ea2c:	eef1 7a47 	vneg.f32	s15, s14
 800ea30:	edc8 7a00 	vstr	s15, [r8]
 800ea34:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800ea38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ea3c:	aa31      	add	r2, sp, #196	; 0xc4
 800ea3e:	2301      	movs	r3, #1
 800ea40:	429c      	cmp	r4, r3
 800ea42:	da20      	bge.n	800ea86 <__kernel_rem_pio2f+0x47e>
 800ea44:	b10f      	cbz	r7, 800ea4a <__kernel_rem_pio2f+0x442>
 800ea46:	eef1 7a67 	vneg.f32	s15, s15
 800ea4a:	edc8 7a01 	vstr	s15, [r8, #4]
 800ea4e:	e7bb      	b.n	800e9c8 <__kernel_rem_pio2f+0x3c0>
 800ea50:	aa30      	add	r2, sp, #192	; 0xc0
 800ea52:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800e914 <__kernel_rem_pio2f+0x30c>
 800ea56:	4413      	add	r3, r2
 800ea58:	2c00      	cmp	r4, #0
 800ea5a:	da05      	bge.n	800ea68 <__kernel_rem_pio2f+0x460>
 800ea5c:	b10f      	cbz	r7, 800ea62 <__kernel_rem_pio2f+0x45a>
 800ea5e:	eef1 7a67 	vneg.f32	s15, s15
 800ea62:	edc8 7a00 	vstr	s15, [r8]
 800ea66:	e7af      	b.n	800e9c8 <__kernel_rem_pio2f+0x3c0>
 800ea68:	ed33 7a01 	vldmdb	r3!, {s14}
 800ea6c:	3c01      	subs	r4, #1
 800ea6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea72:	e7f1      	b.n	800ea58 <__kernel_rem_pio2f+0x450>
 800ea74:	ed73 7a01 	vldmdb	r3!, {s15}
 800ea78:	3a01      	subs	r2, #1
 800ea7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea7e:	e7d2      	b.n	800ea26 <__kernel_rem_pio2f+0x41e>
 800ea80:	eef0 7a47 	vmov.f32	s15, s14
 800ea84:	e7d4      	b.n	800ea30 <__kernel_rem_pio2f+0x428>
 800ea86:	ecb2 7a01 	vldmia	r2!, {s14}
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea90:	e7d6      	b.n	800ea40 <__kernel_rem_pio2f+0x438>
 800ea92:	edd1 7a00 	vldr	s15, [r1]
 800ea96:	edd1 6a01 	vldr	s13, [r1, #4]
 800ea9a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ea9e:	3801      	subs	r0, #1
 800eaa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eaa4:	ed81 7a00 	vstr	s14, [r1]
 800eaa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eaac:	edc1 7a01 	vstr	s15, [r1, #4]
 800eab0:	e799      	b.n	800e9e6 <__kernel_rem_pio2f+0x3de>
 800eab2:	edd2 7a00 	vldr	s15, [r2]
 800eab6:	edd2 6a01 	vldr	s13, [r2, #4]
 800eaba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800eabe:	3901      	subs	r1, #1
 800eac0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eac4:	ed82 7a00 	vstr	s14, [r2]
 800eac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eacc:	edc2 7a01 	vstr	s15, [r2, #4]
 800ead0:	e78e      	b.n	800e9f0 <__kernel_rem_pio2f+0x3e8>
 800ead2:	ed33 7a01 	vldmdb	r3!, {s14}
 800ead6:	3c01      	subs	r4, #1
 800ead8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eadc:	e78f      	b.n	800e9fe <__kernel_rem_pio2f+0x3f6>
 800eade:	eef1 6a66 	vneg.f32	s13, s13
 800eae2:	eeb1 7a47 	vneg.f32	s14, s14
 800eae6:	edc8 6a00 	vstr	s13, [r8]
 800eaea:	ed88 7a01 	vstr	s14, [r8, #4]
 800eaee:	eef1 7a67 	vneg.f32	s15, s15
 800eaf2:	e790      	b.n	800ea16 <__kernel_rem_pio2f+0x40e>

0800eaf4 <__kernel_sinf>:
 800eaf4:	ee10 3a10 	vmov	r3, s0
 800eaf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eafc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800eb00:	da04      	bge.n	800eb0c <__kernel_sinf+0x18>
 800eb02:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800eb06:	ee17 3a90 	vmov	r3, s15
 800eb0a:	b35b      	cbz	r3, 800eb64 <__kernel_sinf+0x70>
 800eb0c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800eb10:	eddf 7a15 	vldr	s15, [pc, #84]	; 800eb68 <__kernel_sinf+0x74>
 800eb14:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800eb6c <__kernel_sinf+0x78>
 800eb18:	eea7 6a27 	vfma.f32	s12, s14, s15
 800eb1c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800eb70 <__kernel_sinf+0x7c>
 800eb20:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eb24:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800eb74 <__kernel_sinf+0x80>
 800eb28:	eea7 6a87 	vfma.f32	s12, s15, s14
 800eb2c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800eb78 <__kernel_sinf+0x84>
 800eb30:	ee60 6a07 	vmul.f32	s13, s0, s14
 800eb34:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eb38:	b930      	cbnz	r0, 800eb48 <__kernel_sinf+0x54>
 800eb3a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800eb7c <__kernel_sinf+0x88>
 800eb3e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800eb42:	eea6 0a26 	vfma.f32	s0, s12, s13
 800eb46:	4770      	bx	lr
 800eb48:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800eb4c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800eb50:	eee0 7a86 	vfma.f32	s15, s1, s12
 800eb54:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800eb58:	eddf 7a09 	vldr	s15, [pc, #36]	; 800eb80 <__kernel_sinf+0x8c>
 800eb5c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800eb60:	ee30 0a60 	vsub.f32	s0, s0, s1
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop
 800eb68:	2f2ec9d3 	.word	0x2f2ec9d3
 800eb6c:	b2d72f34 	.word	0xb2d72f34
 800eb70:	3638ef1b 	.word	0x3638ef1b
 800eb74:	b9500d01 	.word	0xb9500d01
 800eb78:	3c088889 	.word	0x3c088889
 800eb7c:	be2aaaab 	.word	0xbe2aaaab
 800eb80:	3e2aaaab 	.word	0x3e2aaaab

0800eb84 <atanf>:
 800eb84:	b538      	push	{r3, r4, r5, lr}
 800eb86:	ee10 5a10 	vmov	r5, s0
 800eb8a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800eb8e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800eb92:	eef0 7a40 	vmov.f32	s15, s0
 800eb96:	db10      	blt.n	800ebba <atanf+0x36>
 800eb98:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800eb9c:	dd04      	ble.n	800eba8 <atanf+0x24>
 800eb9e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800eba2:	eeb0 0a67 	vmov.f32	s0, s15
 800eba6:	bd38      	pop	{r3, r4, r5, pc}
 800eba8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ece0 <atanf+0x15c>
 800ebac:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ece4 <atanf+0x160>
 800ebb0:	2d00      	cmp	r5, #0
 800ebb2:	bfd8      	it	le
 800ebb4:	eef0 7a40 	vmovle.f32	s15, s0
 800ebb8:	e7f3      	b.n	800eba2 <atanf+0x1e>
 800ebba:	4b4b      	ldr	r3, [pc, #300]	; (800ece8 <atanf+0x164>)
 800ebbc:	429c      	cmp	r4, r3
 800ebbe:	dc10      	bgt.n	800ebe2 <atanf+0x5e>
 800ebc0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ebc4:	da0a      	bge.n	800ebdc <atanf+0x58>
 800ebc6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ecec <atanf+0x168>
 800ebca:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ebce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ebd2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ebd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebda:	dce2      	bgt.n	800eba2 <atanf+0x1e>
 800ebdc:	f04f 33ff 	mov.w	r3, #4294967295
 800ebe0:	e013      	b.n	800ec0a <atanf+0x86>
 800ebe2:	f000 f8a3 	bl	800ed2c <fabsf>
 800ebe6:	4b42      	ldr	r3, [pc, #264]	; (800ecf0 <atanf+0x16c>)
 800ebe8:	429c      	cmp	r4, r3
 800ebea:	dc4f      	bgt.n	800ec8c <atanf+0x108>
 800ebec:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ebf0:	429c      	cmp	r4, r3
 800ebf2:	dc41      	bgt.n	800ec78 <atanf+0xf4>
 800ebf4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ebf8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ebfc:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ec00:	2300      	movs	r3, #0
 800ec02:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ec06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ec0a:	1c5a      	adds	r2, r3, #1
 800ec0c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ec10:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ecf4 <atanf+0x170>
 800ec14:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ecf8 <atanf+0x174>
 800ec18:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ecfc <atanf+0x178>
 800ec1c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ec20:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ec24:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ed00 <atanf+0x17c>
 800ec28:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ec2c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ed04 <atanf+0x180>
 800ec30:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ec34:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ed08 <atanf+0x184>
 800ec38:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ec3c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ed0c <atanf+0x188>
 800ec40:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ec44:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ed10 <atanf+0x18c>
 800ec48:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ec4c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ed14 <atanf+0x190>
 800ec50:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ec54:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ed18 <atanf+0x194>
 800ec58:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ec5c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ed1c <atanf+0x198>
 800ec60:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ec64:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ec68:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ec6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ec70:	d121      	bne.n	800ecb6 <atanf+0x132>
 800ec72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec76:	e794      	b.n	800eba2 <atanf+0x1e>
 800ec78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ec7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ec80:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ec84:	2301      	movs	r3, #1
 800ec86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ec8a:	e7be      	b.n	800ec0a <atanf+0x86>
 800ec8c:	4b24      	ldr	r3, [pc, #144]	; (800ed20 <atanf+0x19c>)
 800ec8e:	429c      	cmp	r4, r3
 800ec90:	dc0b      	bgt.n	800ecaa <atanf+0x126>
 800ec92:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ec96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec9a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ec9e:	2302      	movs	r3, #2
 800eca0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800eca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eca8:	e7af      	b.n	800ec0a <atanf+0x86>
 800ecaa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ecae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ecb2:	2303      	movs	r3, #3
 800ecb4:	e7a9      	b.n	800ec0a <atanf+0x86>
 800ecb6:	4a1b      	ldr	r2, [pc, #108]	; (800ed24 <atanf+0x1a0>)
 800ecb8:	491b      	ldr	r1, [pc, #108]	; (800ed28 <atanf+0x1a4>)
 800ecba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ecbe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ecc2:	ed93 0a00 	vldr	s0, [r3]
 800ecc6:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ecca:	ed92 0a00 	vldr	s0, [r2]
 800ecce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ecd2:	2d00      	cmp	r5, #0
 800ecd4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ecd8:	bfb8      	it	lt
 800ecda:	eef1 7a67 	vneglt.f32	s15, s15
 800ecde:	e760      	b.n	800eba2 <atanf+0x1e>
 800ece0:	3fc90fdb 	.word	0x3fc90fdb
 800ece4:	bfc90fdb 	.word	0xbfc90fdb
 800ece8:	3edfffff 	.word	0x3edfffff
 800ecec:	7149f2ca 	.word	0x7149f2ca
 800ecf0:	3f97ffff 	.word	0x3f97ffff
 800ecf4:	3c8569d7 	.word	0x3c8569d7
 800ecf8:	3d4bda59 	.word	0x3d4bda59
 800ecfc:	bd6ef16b 	.word	0xbd6ef16b
 800ed00:	3d886b35 	.word	0x3d886b35
 800ed04:	3dba2e6e 	.word	0x3dba2e6e
 800ed08:	3e124925 	.word	0x3e124925
 800ed0c:	3eaaaaab 	.word	0x3eaaaaab
 800ed10:	bd15a221 	.word	0xbd15a221
 800ed14:	bd9d8795 	.word	0xbd9d8795
 800ed18:	bde38e38 	.word	0xbde38e38
 800ed1c:	be4ccccd 	.word	0xbe4ccccd
 800ed20:	401bffff 	.word	0x401bffff
 800ed24:	0800f794 	.word	0x0800f794
 800ed28:	0800f7a4 	.word	0x0800f7a4

0800ed2c <fabsf>:
 800ed2c:	ee10 3a10 	vmov	r3, s0
 800ed30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed34:	ee00 3a10 	vmov	s0, r3
 800ed38:	4770      	bx	lr
	...

0800ed3c <floorf>:
 800ed3c:	ee10 3a10 	vmov	r3, s0
 800ed40:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ed44:	3a7f      	subs	r2, #127	; 0x7f
 800ed46:	2a16      	cmp	r2, #22
 800ed48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ed4c:	dc2a      	bgt.n	800eda4 <floorf+0x68>
 800ed4e:	2a00      	cmp	r2, #0
 800ed50:	da11      	bge.n	800ed76 <floorf+0x3a>
 800ed52:	eddf 7a18 	vldr	s15, [pc, #96]	; 800edb4 <floorf+0x78>
 800ed56:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ed5a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ed5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed62:	dd05      	ble.n	800ed70 <floorf+0x34>
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	da23      	bge.n	800edb0 <floorf+0x74>
 800ed68:	4a13      	ldr	r2, [pc, #76]	; (800edb8 <floorf+0x7c>)
 800ed6a:	2900      	cmp	r1, #0
 800ed6c:	bf18      	it	ne
 800ed6e:	4613      	movne	r3, r2
 800ed70:	ee00 3a10 	vmov	s0, r3
 800ed74:	4770      	bx	lr
 800ed76:	4911      	ldr	r1, [pc, #68]	; (800edbc <floorf+0x80>)
 800ed78:	4111      	asrs	r1, r2
 800ed7a:	420b      	tst	r3, r1
 800ed7c:	d0fa      	beq.n	800ed74 <floorf+0x38>
 800ed7e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800edb4 <floorf+0x78>
 800ed82:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ed86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ed8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed8e:	ddef      	ble.n	800ed70 <floorf+0x34>
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	bfbe      	ittt	lt
 800ed94:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800ed98:	fa40 f202 	asrlt.w	r2, r0, r2
 800ed9c:	189b      	addlt	r3, r3, r2
 800ed9e:	ea23 0301 	bic.w	r3, r3, r1
 800eda2:	e7e5      	b.n	800ed70 <floorf+0x34>
 800eda4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800eda8:	d3e4      	bcc.n	800ed74 <floorf+0x38>
 800edaa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800edae:	4770      	bx	lr
 800edb0:	2300      	movs	r3, #0
 800edb2:	e7dd      	b.n	800ed70 <floorf+0x34>
 800edb4:	7149f2ca 	.word	0x7149f2ca
 800edb8:	bf800000 	.word	0xbf800000
 800edbc:	007fffff 	.word	0x007fffff

0800edc0 <scalbnf>:
 800edc0:	ee10 3a10 	vmov	r3, s0
 800edc4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800edc8:	d025      	beq.n	800ee16 <scalbnf+0x56>
 800edca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800edce:	d302      	bcc.n	800edd6 <scalbnf+0x16>
 800edd0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800edd4:	4770      	bx	lr
 800edd6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800edda:	d122      	bne.n	800ee22 <scalbnf+0x62>
 800eddc:	4b2a      	ldr	r3, [pc, #168]	; (800ee88 <scalbnf+0xc8>)
 800edde:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ee8c <scalbnf+0xcc>
 800ede2:	4298      	cmp	r0, r3
 800ede4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ede8:	db16      	blt.n	800ee18 <scalbnf+0x58>
 800edea:	ee10 3a10 	vmov	r3, s0
 800edee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800edf2:	3a19      	subs	r2, #25
 800edf4:	4402      	add	r2, r0
 800edf6:	2afe      	cmp	r2, #254	; 0xfe
 800edf8:	dd15      	ble.n	800ee26 <scalbnf+0x66>
 800edfa:	ee10 3a10 	vmov	r3, s0
 800edfe:	eddf 7a24 	vldr	s15, [pc, #144]	; 800ee90 <scalbnf+0xd0>
 800ee02:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ee94 <scalbnf+0xd4>
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	eeb0 7a67 	vmov.f32	s14, s15
 800ee0c:	bfb8      	it	lt
 800ee0e:	eef0 7a66 	vmovlt.f32	s15, s13
 800ee12:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ee16:	4770      	bx	lr
 800ee18:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ee98 <scalbnf+0xd8>
 800ee1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ee20:	4770      	bx	lr
 800ee22:	0dd2      	lsrs	r2, r2, #23
 800ee24:	e7e6      	b.n	800edf4 <scalbnf+0x34>
 800ee26:	2a00      	cmp	r2, #0
 800ee28:	dd06      	ble.n	800ee38 <scalbnf+0x78>
 800ee2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee2e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ee32:	ee00 3a10 	vmov	s0, r3
 800ee36:	4770      	bx	lr
 800ee38:	f112 0f16 	cmn.w	r2, #22
 800ee3c:	da1a      	bge.n	800ee74 <scalbnf+0xb4>
 800ee3e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ee42:	4298      	cmp	r0, r3
 800ee44:	ee10 3a10 	vmov	r3, s0
 800ee48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ee4c:	dd0a      	ble.n	800ee64 <scalbnf+0xa4>
 800ee4e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ee90 <scalbnf+0xd0>
 800ee52:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ee94 <scalbnf+0xd4>
 800ee56:	eef0 7a40 	vmov.f32	s15, s0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	bf18      	it	ne
 800ee5e:	eeb0 0a47 	vmovne.f32	s0, s14
 800ee62:	e7db      	b.n	800ee1c <scalbnf+0x5c>
 800ee64:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ee98 <scalbnf+0xd8>
 800ee68:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ee9c <scalbnf+0xdc>
 800ee6c:	eef0 7a40 	vmov.f32	s15, s0
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	e7f3      	b.n	800ee5c <scalbnf+0x9c>
 800ee74:	3219      	adds	r2, #25
 800ee76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee7a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ee7e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800eea0 <scalbnf+0xe0>
 800ee82:	ee07 3a10 	vmov	s14, r3
 800ee86:	e7c4      	b.n	800ee12 <scalbnf+0x52>
 800ee88:	ffff3cb0 	.word	0xffff3cb0
 800ee8c:	4c000000 	.word	0x4c000000
 800ee90:	7149f2ca 	.word	0x7149f2ca
 800ee94:	f149f2ca 	.word	0xf149f2ca
 800ee98:	0da24260 	.word	0x0da24260
 800ee9c:	8da24260 	.word	0x8da24260
 800eea0:	33000000 	.word	0x33000000

0800eea4 <_getpid>:
 800eea4:	4b02      	ldr	r3, [pc, #8]	; (800eeb0 <_getpid+0xc>)
 800eea6:	2258      	movs	r2, #88	; 0x58
 800eea8:	601a      	str	r2, [r3, #0]
 800eeaa:	f04f 30ff 	mov.w	r0, #4294967295
 800eeae:	4770      	bx	lr
 800eeb0:	20000aac 	.word	0x20000aac

0800eeb4 <_kill>:
 800eeb4:	4b02      	ldr	r3, [pc, #8]	; (800eec0 <_kill+0xc>)
 800eeb6:	2258      	movs	r2, #88	; 0x58
 800eeb8:	601a      	str	r2, [r3, #0]
 800eeba:	f04f 30ff 	mov.w	r0, #4294967295
 800eebe:	4770      	bx	lr
 800eec0:	20000aac 	.word	0x20000aac

0800eec4 <_exit>:
 800eec4:	e7fe      	b.n	800eec4 <_exit>
	...

0800eec8 <_init>:
 800eec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeca:	bf00      	nop
 800eecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eece:	bc08      	pop	{r3}
 800eed0:	469e      	mov	lr, r3
 800eed2:	4770      	bx	lr

0800eed4 <_fini>:
 800eed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eed6:	bf00      	nop
 800eed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeda:	bc08      	pop	{r3}
 800eedc:	469e      	mov	lr, r3
 800eede:	4770      	bx	lr
